#/secure/daemon/function.c
FileSize (["/lib/light.c":1371,"/secure/sefun/percent.c":579,"/verbs/players/ride.c":2599,"/lib/files.c":1060,"/secure/lib/net/uptime_server.c":1529,"/lib/std/furnace.c":843,"/lib/std/daemon.c":1241,"/lib/door.c":10530,"/secure/sefun/format_page.c":446,"/lib/bboard.c":8327,"/secure/sefun/ascii.c":7246,"/secure/sefun/query_time_of_day.c":226,"/lib/poison.c":1351,"/secure/sefun/communications.c":4014,"/verbs/rooms/cast.c":1202,"/lib/post_office.c":1259,"/lib/battery.c":2314,"/verbs/items/smell.c":1582,"/lib/props/move.c":2040,"/secure/sefun/path_file.c":660,"/secure/sefun/mud_info.c":1439,"/verbs/creators/echo.c":1962,"/lib/shop.c":818,"/lib/money.c":617,"/lib/enter.c":3798,"/verbs/creators/wizunlock.c":988,"/lib/events/drop.c":2128,"/verbs/items/open.c":1448,"/verbs/common/yell.c":1571,"/spells/buffer.c":2808,"/lib/magic.c":4451,"/lib/std/germ.c":7343,"/lib/props/clean.c":2248,"/secure/lib/net/echo_server.c":1655,"/lib/std/bane.c":211,"/lib/events/manipulate.c":2008,"/lib/std/barkeep.c":5094,"/verbs/players/cast.c":2018,"/lib/events/pull.c":1888,"/verbs/players/follow.c":2509,"/secure/sefun/translate.c":3146,"/secure/sefun/convert_name.c":349,"/verbs/items/deactivate.c":802,"/secure/sefun/atomize.c":355,"/lib/events/close.c":1729,"/lib/virtual/virt_land.c":5392,"/verbs/rooms/stop.c":864,"/lib/fishing.c":5819,"/lib/std/story.c":2926,"/lib/events/fly.c":109,"/secure/sefun/legacy.c":3535,"/secure/sefun/base_name.c":568,"/lib/props/carry.c":1241,"/secure/lib/net/server.c":8757,"/secure/sefun/generic.c":136,"/secure/sefun/timestamp.c":831,"/lib/lvs/position.c":4103,"/verbs/creators/createfix.c":1973,"/lib/meal.c":5859,"/verbs/players/bump.c":5284,"/secure/daemon/master.c":21085,"/secure/sefun/custom_path.c":539,"/lib/pistol.c":15629,"/lib/mount.c":2874,"/lib/props/id.c":2680,"/verbs/common/shout.c":1906,"/secure/sefun/distinct_array.c":349,"/verbs/players/attack.c":3240,"/verbs/players/vote.c":925,"/lib/std/dummy.c":2622,"/lib/comp/weapon.c":4677,"/secure/lib/net/client.c":3675,"/verbs/creators/delete.c":4582,"/secure/sefun/mappings.c":1979,"/secure/sefun/user_path.c":69,"/lib/potion.c":906,"/lib/torch.c":736,"/lib/pole.c":2473,"/lib/events/sit.c":1861,"/verbs/items/drop.c":2697,"/lib/std/bot_limb.c":987,"/lib/events/consult.c":1960,"/lib/virtual/virt_std.c":1402,"/secure/sefun/get_verbs.c":568,"/lib/player.c":23584,"/verbs/players/describe.c":919,"/lib/events/wear.c":943,"/verbs/items/throw.c":2163,"/secure/sefun/dump_socket_status.c":602,"/lib/props/properties.c":1005,"/lib/donate.c":1991,"/verbs/rooms/enter.c":1198,"/lib/events/wield.c":1196,"/secure/sefun/this_agent.c":447,"/verbs/players/learn.c":1322,"/lib/props/value.c":2037,"/lib/shell.c":826,"/verbs/items/consult.c":961,"/secure/sefun/query_carrying.c":295,"/lib/race.c":6149,"/lib/std/book.c":2455,"/verbs/items/press.c":1052,"/secure/sefun/files.c":1121,"/verbs/players/party.c":3982,"/verbs/players/sleep.c":922,"/secure/sefun/parse_objects.c":527,"/verbs/items/dig.c":2282,"/lib/props/radiance.c":465,"/lib/events/smell.c":3005,"/lib/events/dig.c":1141,"/spells/fireball.c":1442,"/verbs/common/whisper.c":2532,"/lib/events/drink.c":619,"/lib/teacher.c":6322,"/verbs/items/close.c":936,"/verbs/items/poison.c":1424,"/verbs/items/remove.c":2212,"/verbs/items/extinguish.c":1261,"/secure/sefun/numbers.c":554,"/verbs/items/free.c":827,"/secure/sefun/compare_array.c":540,"/lib/cylinder.c":358,"/lib/pile.c":3355,"/verbs/creators/wizlock.c":1075,"/lib/events/bait.c":875,"/verbs/creators/resurrect.c":1504,"/lib/events/press.c":2132,"/lib/events/give.c":1192,"/verbs/players/backstab.c":6453,"/verbs/items/buy.c":1119,"/verbs/rooms/go.c":1813,"/lib/events/lock_with.c":1496,"/verbs/items/wear.c":1863,"/secure/sefun/log_file.c":794,"/verbs/items/search.c":1600,"/lib/events/touch.c":2458,"/lib/manycoins.c":233,"/lib/props/body_mass.c":853,"/verbs/items/donate.c":1121,"/secure/sefun/persist.c":342,"/verbs/items/capture.c":941,"/lib/props/mass.c":814,"/verbs/items/give.c":4705,"/verbs/players/sit.c":1835,"/lib/events/jump.c":3290,"/secure/lib/net/ftp_client.c":4271,"/verbs/players/befriend.c":731,"/lib/domesticate.c":3921,"/lib/fuel.c":1500,"/lib/language.c":3988,"/lib/std/bot_corpse.c":1057,"/daemon/command.c":1809,"/lib/history.c":4571,"/secure/lib/connect.first.c":5339,"/secure/sefun/findobs.c":1376,"/lib/comp/holder.c":2676,"/secure/lib/net/oob.c":8030,"/lib/clan.c":5176,"/lib/props/uniqueness.c":629,"/verbs/items/move.c":845,"/verbs/items/pour.c":1819,"/secure/sefun/rooms.c":1617,"/secure/sefun/values.c":562,"/lib/std/corpse.c":2707,"/verbs/creators/reload.c":4859,"/secure/lib/net/http.c":2314,"/daemon/verbs.c":2881,"/secure/lib/net/ftp_data_connection.c":5264,"/verbs/items/shoot.c":1169,"/secure/sefun/get_stack.c":135,"/secure/lib/net/socket.c":1444,"/verbs/players/marry.c":1605,"/secure/lib/connect.c":18484,"/verbs/rooms/fish.c":1061,"/lib/messages.c":1799,"/secure/sefun/reload.c":3505,"/verbs/players/teach.c":1478,"/lib/editor.c":927,"/lib/lvs/abilities.c":8438,"/secure/sefun/wild_card.c":759,"/verbs/players/stealth.c":2223,"/lib/lead.c":3946,"/lib/props/save.c":62,"/secure/lib/net/remote.c":4654,"/secure/sefun/reaper.c":1787,"/lib/shadow.c":352,"/secure/lib/net/generic.c":1386,"/secure/sefun/query_invis.c":878,"/verbs/common/body.c":3481,"/verbs/items/put.c":5401,"/secure/lib/net/telnet_client.c":4786,"/lib/comp/seal.c":1359,"/verbs/players/ignore.c":2026,"/lib/events/turn.c":681,"/lib/std/room.c":22211,"/verbs/items/ring.c":1466,"/secure/sefun/load_object.c":1086,"/verbs/players/mount.c":618,"/lib/chapel.c":3432,"/verbs/players/dismount.c":1395,"/verbs/items/eat.c":1070,"/lib/lamp.c":1379,"/lib/events/shake.c":1912,"/lib/chat.c":3401,"/secure/sefun/visible.c":145,"/secure/lib/net/h_ftpd.c":27162,"/verbs/items/unlock.c":1001,"/secure/sefun/interface.c":724,"/lib/events/lie.c":1602,"/verbs/items/equate.c":3918,"/lib/std/table.c":344,"/verbs/items/pick.c":2712,"/daemon/intermud.c":9123,"/lib/burn.c":4011,"/lib/events/bait_with.c":1018,"/secure/sefun/to_object.c":3098,"/lib/round.c":908,"/lib/events/poison.c":861,"/lib/classes.c":3405,"/secure/sefun/tail.c":305,"/lib/props/addstuff.c":394,"/lib/living.c":18544,"/lib/creator.c":4250,"/secure/sefun/time.c":1586,"/lib/teach.c":1313,"/verbs/creators/zap.c":1227,"/lib/learn.c":312,"/lib/events/get_from.c":4970,"/lib/comp/container.c":1167,"/lib/help.c":565,"/lib/bot.c":2142,"/verbs/players/abandon.c":531,"/verbs/players/wake.c":1241,"/lib/props/damage.c":917,"/verbs/items/bait.c":929,"/lib/events/bury.c":271,"/verbs/players/withdraw.c":876,"/lib/command.c":9694,"/verbs/items/read.c":1359,"/verbs/players/news.c":1018,"/spells/restoration.c":2629,"/verbs/rooms/fly.c":2477,"/lib/interface.c":6557,"/spells/meditate.c":1326,"/verbs/items/balance.c":2815,"/lib/fish.c":544,"/lib/used_meal.c":174,"/secure/lib/net/g2.c":2677,"/lib/verb.c":1879,"/lib/clip.c":1965,"/verbs/players/lie.c":1311,"/verbs/items/pull.c":913,"/verbs/common/ask.c":2725,"/verbs/common/say.c":1755,"/verbs/items/get.c":4307,"/spells/cure.c":2042,"/secure/sefun/copy.c":626,"/lib/events/look.c":7058,"/verbs/items/empty.c":413,"/secure/sefun/morality.c":1121,"/verbs/creators/promote.c":823,"/lib/teller.c":10651,"/lib/virtual/virt_map.c":4585,"/lib/persist.c":3275,"/verbs/items/judge.c":3918,"/lib/quest.c":181,"/lib/blank_pile.c":724,"/lib/genetics.c":8297,"/verbs/common/speak.c":2362,"/verbs/creators/codesay.c":1855,"/lib/combat.c":26181,"/verbs/rooms/climb.c":1950,"/verbs/items/lock.c":1109,"/lib/talk.c":7188,"/lib/leader.c":5015,"/lib/spell.c":17318,"/verbs/players/crawl.c":1788,"/lib/undead.c":2539,"/secure/sefun/messaging.c":11309,"/verbs/items/listen.c":1827,"/secure/lib/std/access.c":2986,"/verbs/items/shake.c":896,"/verbs/creators/modify.c":3997,"/verbs/items/touch.c":950,"/verbs/players/request.c":1303,"/lib/combatmsg.c":6876,"/verbs/items/strike.c":587,"/verbs/items/steal.c":3910,"/verbs/items/install.c":839,"/lib/std/vendor.c":15881,"/secure/sefun/expand_keys.c":425,"/verbs/items/look.c":4206,"/secure/daemon/players.c":8713,"/secure/sefun/ordinal.c":407,"/secure/sefun/get_livings.c":1641,"/verbs/creators/pulsecheck.c":1018,"/secure/sefun/security.c":2774,"/lib/stargate.c":7176,"/secure/sefun/local_time.c":1919,"/verbs/items/fill.c":718,"/secure/sefun/get_cmds.c":925,"/lib/sentient.c":8133,"/lib/clay.c":1683,"/lib/exits.c":7361,"/verbs/players/nominate.c":933,"/lib/events/put.c":2797,"/verbs/items/drink.c":1507,"/lib/interactive.c":20212,"/lib/events/buy.c":380,"/lib/props/description.c":3404,"/lib/trap.c":3552,"/secure/sefun/disable.c":639,"/lib/std/item.c":8574,"/lib/steal.c":891,"/lib/flask.c":5126,"/secure/sefun/flat_map.c":819,"/verbs/rooms/jump.c":2919,"/lib/bonus.c":2020,"/lib/std/storage.c":4693,"/verbs/creators/add.c":3300,"/verbs/items/light.c":2819,"/verbs/items/use.c":872,"/lib/follow.c":1396,"/lib/events/read.c":3547,"/secure/sefun/singular_array.c":169,"/verbs/players/target.c":2523,"/verbs/items/sell.c":1867,"/secure/lib/file.c":5431,"/lib/events/dig_with.c":2405,"/lib/match.c":1068,"/secure/sefun/pointers.c":2604,"/lib/mayor.c":2055,"/lib/comp/object.c":1013,"/verbs/creators/initfix.c":2485,"/secure/sefun/domains.c":1135,"/verbs/players/evade.c":793,"/lib/events/smoke.c":152,"/lib/props/inventory.c":1645,"/lib/events/look_in.c":2734,"/verbs/items/turn.c":1724,"/verbs/creators/dest.c":1728,"/lib/events/lock.c":6200,"/lib/props/equip.c":1933,"/secure/sefun/user_exists.c":240,"/lib/events/climb.c":3258,"/lib/blank.c":38,"/lib/nmsh.c":14646,"/secure/sefun/query_names.c":1497,"/verbs/items/wield.c":3240,"/secure/lib/bboard.c":8490,"/lib/user/autosave.c":1913,"/secure/sefun/economy.c":1822,"/secure/sefun/dummy.c":105,"/secure/sefun/make_workroom.c":2439,"/secure/sefun/light.c":1792,"/secure/sefun/absolute_path.c":1776,"/secure/sefun/absolute_value.c":268,"/lib/events/sell.c":518,"/secure/lib/net/ftp.c":25468,"/verbs/items/bury.c":1838,"/lib/std/armor.c":10463,"/secure/sefun/english.c":10468,"/lib/events/search.c":2554,"/lib/trainer.c":7067,"/verbs/common/mail.c":1910,"/lib/npc.c":22383,"/verbs/items/activate.c":776,"/lib/std/limb.c":2007,"/secure/sefun/get_object.c":5467,"/verbs/items/judge1.c":3918,"/lib/std/chair.c":499,"/lib/pager.c":10028,"/lib/std/bed.c":282,"/secure/sefun/events.c":739,"/lib/std/worn_storage.c":14349,"/lib/props/ambiance.c":377,"/lib/events/listen.c":2879,"/spells/missile.c":1216,"/lib/props/deterioration.c":1216,"/verbs/items/uninstall.c":855,"/lib/comp/surface.c":141,"/lib/clerk.c":4101,"/secure/sefun/duplicates.c":1290,"/lib/events/crawl.c":113,"/lib/currency.c":2975,"/lib/body.c":48055,"/secure/sefun/sefun.c":10358,"/secure/sefun/wipe_inv.c":875,"/secure/sefun/strings.c":18195,"/lib/flashlight.c":4693,"/lib/events/get.c":2278,"/verbs/players/lead.c":1004,"/lib/virtual/virt_sky.c":2830,"/secure/sefun/identify.c":1424,"/secure/lib/net/web_client.c":55,"/lib/detect.c":3205,"/verbs/creators/copy.c":4475,"/lib/events/shoot.c":1631,"/verbs/items/unwield.c":1326,"/verbs/players/pray.c":1701,"/verbs/players/stand.c":1128,])
FunctionCache (["/lib/light.c":"string GetShort() {
static void create() {
varargs mixed eventLight(object who, object tool) {
int GetLit() {
static int SetLit(int x) {
mixed CanLight(object who) {
mixed direct_light_obj() {
mixed eventDarken() {
","/secure/sefun/percent.c":"float percent(mixed numerator, mixed denominator) {
","/verbs/players/ride.c":"static void create() {
mixed can_ride_str(string str) {
mixed can_ride_into_str(string str) {
mixed do_ride_str(string str) {
mixed do_ride_into_str(string str) {
","/lib/files.c":"string array wild_card(string str) {
nomask static int remove_dots(string str) { return !(str[0] == '.'); }
string query_cwd() { return DIR_TMP; }
","/secure/lib/net/uptime_server.c":"void create(){
static mixed read_callback(int fd, mixed data){
static void close_callback(int fd){
static void listen_callback(int fd){
void StartServer(){
int SendUptime(int fd){
","/lib/std/furnace.c":"int CanReceive(object ob){
void create() {
void init(){
void heart_beat(){
","/lib/std/daemon.c":"int eventDestruct() {
string GetSaveFile() {
static void create() {
static string SetSaveFile(string str) {
varargs int eventRestore(int do_not_zero_out) {
varargs int eventSave(int save_zero_values) {
","/lib/door.c":"static void create() {
string GetDefiniteShort() {
varargs mixed eventClose(object who) {
varargs int eventOpen(object who, object tool) {
mixed eventUnlock(object who, object key) {
mixed CanUnlock(object who) {
varargs mixed eventLock(object who, mixed key, mixed foo) {
varargs string array SetKeys(string side, mixed array args...) {
mixed CanLock(object who, string foo) {
string array GetKeys(string side) { return ((class door_side)Sides[side])->Keys; }
varargs string array SetId(string side, mixed array args...) {
varargs string GetShort(string side) {
mixed SetShort(string side, mixed short) {
int eventRegisterSide(string side) {
void SetSide(string side, mapping mp) {
string GetLong(string side) {
mixed SetLong(string side, mixed long) {
string array GetId(string side) { return ((class door_side)Sides[side])->Ids; }
int GetHiddenDoor(){
int SetHiddenDoor(int i){
string array GetSides(){
int SetLockable(string side, int x) {
int GetLockable(string side) {
object array GetRooms(string side) { return ((class door_side)Sides[side])->Rooms; }
int get_closed() { return GetClosed(); }
","/secure/sefun/format_page.c":"string format_page(string array items, int columns) {
","/lib/bboard.c":"void create() {
string GetExternalDesc() {
void init() {
int cmd_remove(string str) {
static private int valid_edit(string author) {
int cmd_post(string str) {
static void begin_post(string cmd, string subj, string file, function f) {
void continue_post(string subj, string file) {
void end_post(string subj, string mail) {
int cmd_read(string str) {
int cmd_followup_and_respond(string str) {
void continue_followup(mapping post, string subj, string file) {
void continue_mail(mapping post, string subj, string file) {
static void check_include_text(string ans, string subj, string file, mapping
int cmd_edit(string str) {
void end_edit(string subj, int num) {
void set_board_id(string str) { __BoardID = str; }
string query_board_id() { return __BoardID; }
string query_board_time(int x) {
","/secure/sefun/ascii.c":"string convert_ascii(int i){
","/secure/sefun/query_time_of_day.c":"string query_time_of_day() { return SEASONS_D->GetTimeOfDay(); }
","/lib/poison.c":"static void create() {
int GetPoisonUses() { return PoisonUses; }
mixed eventSpreadPoison(object who, object target) {
mixed GetPoisonStrength() { return PoisonStrength; }
int SetPoisonUses(int x) { return (PoisonUses = x); }
int SetPoisonStrength(int x) { return (PoisonStrength = x); }
mixed indirect_poison_obj_with_obj() {
","/secure/sefun/communications.c":"varargs void say(mixed str, mixed ob) {
varargs void shout(mixed str, mixed exclude) {
varargs void tell_object(object ob, mixed str, int mclass){
varargs void tell_room(mixed ob, mixed str, mixed exclude) {
void tell_player(mixed player, string msg){
varargs void tc(string str, string col, object dude){
varargs int debug(mixed msg, mixed val, string color){
varargs int tell_creators(string msg, string color){
varargs int tn(string str, string col, object room, int mclass){
varargs int trr(string str, string col, int mclass){
","/verbs/rooms/cast.c":"static void create() {
string GetHelp(string str) {
mixed can_cast_obj(object ob) {
mixed do_cast_obj(object ob) {
","/lib/post_office.c":"int CanReceive(object ob) {
int eventReleaseObject(object foo) {
static void create() {
mixed eventMail(object who, string args) {
mixed CanMail(object who, string args) {
","/lib/battery.c":"void create(){
void init(){
void heart_beat(){
int eventUse(int i){
int SetPowerType(string str) {powertype=str; return 1; }
int SetCellType(string str) {celltype=str; return 1; }
int SetCharge(int i) {charge = i; fullcharge = i; return 1; }
int GetCharge() { return charge; }
string GetPowerType() { return powertype; }
string GetCellType() { return celltype; }
int SetRechargeable(int i) { rechargeable = i; return i;}
int GetRechargeable() { return rechargeable;}
int SetDrainable(int i) { drainable = i; return i; }
int GetDrainable() { return drainable; }
int SetDrainRate(int i) { drainrate = i; return i; }
int GetDrainRate() { return drainrate; }
int ModCharge(int i) {
int eventDrain(int i){
int eventCharge(int i){
int Spent(){
","/verbs/items/smell.c":"static void create() {
mixed can_smell_obj() {
mixed can_smell_str_word_obj() {
mixed do_smell() {
mixed do_smell_obj(object ob) {
mixed do_smell_str_word_obj(string str, object ob) {
","/lib/props/move.c":"object GetLastEnvironment() {
int eventMove(mixed dest) {
","/secure/sefun/path_file.c":"mixed array path_file(mixed full_path) {
","/secure/sefun/mud_info.c":"string query_intermud_ip(){
string architecture() { return MUDOS_ARCH; }
string mud_name() { return MUD_NAME; }
string mudlib() { return \"Dead Souls\"; }
string mudlib_version() { return \"2.3a1\"; }
int query_host_port() { return __PORT__; }
string admin_email() { return ADMIN_EMAIL; }
string query_os_type(){
","/verbs/creators/echo.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_echo() {
mixed can_echo_to_liv_str(object ob, string str) {
mixed can_echo_str(string str) {
mixed do_echo() { return 1; }
mixed do_echo_to_liv_str(object who, string what) {
mixed do_echo_str(string str) {
void eventEcho(object array targs, string str) {
","/lib/shop.c":"static void create() {
void init() {
int list(string str) {
int show(string str) {
int price(string str) {
int appraise(string str) {
","/lib/money.c":"int AddMoney(string type, int amount) {
varargs void SetMoney(mixed val, int amount) {
mapping GetMoneyMap() { return copy(Money); }
","/lib/enter.c":"mixed eventUnlock(object who, object key) {
varargs mixed direct_lock_obj_with_obj(object target, object tool) {
mixed direct_pick_str_on_obj(string str, object ob, string id1, string id2) {
mixed direct_pick_str_on_obj_with_obj(string str, object ob, object w,
varargs mixed eventLock(object who, mixed arg1, mixed arg2) {
string ResolveObjectName(string file) {
varargs void SetEnter(string dest, function pre, function post) {
mixed direct_unlock_obj_with_obj(object target, object w) {
mixed direct_wizlock_obj(){ return 1; }
mixed direct_wizunlock_obj(){ return 1; }
static void create() {
void SetDoor(string door) {
string GetEnter() {
mixed eventClose(object who) {
varargs mixed eventOpen(object who, object tool) {
mixed direct_close_obj(object target) {
mixed direct_open_obj(object target) {
mixed direct_open_obj_with_obj(object target, object ob) {
varargs mixed eventPick(object who, string str, object tool) {
string GetDoor() {
varargs mixed eventEnter(object who, string what, string verb) {
mixed direct_enter_obj() {
mixed direct_enter_into_obj() {
","/verbs/creators/wizunlock.c":"static void create() {
mixed can_wizunlock_obj(string str) {
mixed do_wizunlock_obj(object ob){
","/lib/events/drop.c":"int GetDestructOnDrop() {
int SetDestructOnDrop(int val) {
mixed CanDrop(object who) {
mixed GetPreventDrop() {
mixed SetPreventDrop(mixed val) {
mixed direct_drop_obj(object target) {
","/verbs/items/open.c":"static void create() {
mixed can_open_obj(string verb, string id) {
mixed can_open_obj_with_obj(string verb, string id1, string id2) {
varargs mixed do_open_obj(object ob, mixed array args...) {
varargs mixed do_open_obj_with_obj(object ob, object with, mixed array args...) {
","/verbs/common/yell.c":"static void create() {
string GetHelp(string str) {
mixed can_yell() { return \"Yell what?\"; }
mixed can_yell_str(string str) {
mixed can_yell_in_wrd_str(string lang, string str) {
mixed do_yell() { return 1; }
mixed do_yell_str(string str) {
mixed do_yell_in_wrd_str(string lang, string str) {
","/spells/buffer.c":"static void create() {
int eventCast(object who, int level, string race, object array targets) {
int hitCallback(object who, object agent, int x, class MagicProtection cl) {
void endCallback(object who) {
","/lib/magic.c":"static varargs void eventCast(object spell, string limb, object array targs) {
static void eventTrainSpell(object spell) {
mapping GetSpellBook() {
void SetSpellBook(mapping book) {
int GetSpellLevel(string spell) {
varargs mixed CanCast(object spell) {
varargs mixed eventPrepareCast(string verb, mixed array args...) {
mixed eventLearnSpell(string spell) {
","/lib/std/germ.c":"static void create() {
void init(){
mixed eventEncounter(object who) {
static void heart_beat() {
mixed eventCure(object who, int x, string type) {
string GetType() {
mixed eventInfect(object ob) {
int isGerm() {
mixed GetCure() {
mixed SetCure(mixed val) {
int SetCannotInfect(int i){
int SetGermName(string str){
string GetGermName(){
int SetCommunicable(int x) {
mixed eventMultiply() {
int GetCommunicable() {
int GetCannotInfect(){
function GetInfect() {
function SetInfect(function f) {
int GetLifeSpan() {
int SetLifeSpan(int x) {
string SetType(string type) {
void eventSuffer(object ob) {
","/lib/props/clean.c":"int eventDestruct() {
int GetNoClean() {
int clean_up(int ref_exists) {
static int SetNoClean(int x) {
","/secure/lib/net/echo_server.c":"void create(){
static mixed read_callback(int fd, mixed data){
static void close_callback(int fd){
static void listen_callback(int fd){
void StartServer(){
","/lib/std/bane.c":"void create(){
string array GetBane(){
string array QueryBane(){
int SetBane(array arr){
","/lib/events/manipulate.c":"varargs mixed CanManipulate(object who, string component) {
varargs mixed eventManipulate(object who, string component) {
string array GetManipulates() {
mapping RemoveManipulate(string item) {
varargs mapping SetManipulate(mixed key, mixed desc) {
mixed direct_move_obj(object target) {
mixed direct_move_str_on_obj(string str, object target) {
","/lib/std/barkeep.c":"static void create() {
int CanCarry(int cmt) {
int indirect_sell_obj_to_liv() {
mixed CanSell(object who, string item) {
mapping GetMenuItems() {
string SetLocalCurrency(string str) {
mapping SetMenuItems(mapping mp) {
mixed eventSell(object who, string args) {
int GetCost(string array item) {
mapping AddMenuItem(mixed item, string file) {
string GetLocalCurrency() {
mapping RemoveMenuItem(string item) {
mixed eventBuyItem(object who, string cmd, string item) {
int eventList(object who, string cmd, string args) {
","/verbs/players/cast.c":"static void create() {
mixed can_cast_str(string spell) {
mixed can_cast_str_on_obj(string spell) {
mixed can_cast_str_on_str(string spell) {
mixed can_cast_str_against_str(string spell) {
mixed can_cast_str_on_str_of_str(string spell) {
mixed do_cast_str(string spell) {
mixed do_cast_str_on_obj(string spell, object target) {
mixed do_cast_str_against_str(string spell, object target) {
mixed do_cast_str_on_str(string spell, string limb) {
mixed do_cast_str_on_str_of_obj(string spell, string limb, object target) {
","/lib/events/pull.c":"varargs mixed eventPull(object who, string component) {
string array GetPulls() {
mapping RemovePull(string item) {
varargs mapping SetPull(mixed key, mixed desc) {
varargs mixed CanPull(object who, string component) {
mixed direct_pull_obj(object target) {
mixed direct_pull_str_on_obj(string str, object target) {
","/verbs/players/follow.c":"static void create() {
mixed can_follow() { return 1; }
mixed do_follow() {
mixed can_follow_liv() { return 1; }
mixed do_follow_liv(object ob) {
","/secure/sefun/translate.c":"string translate(string str, int prof) {
","/secure/sefun/convert_name.c":"string convert_name(string str) {
","/verbs/items/deactivate.c":"static void create() {
mixed can_deactivate() {
mixed can_deactivate_obj(mixed foo) {
mixed can_deactivate_obj_on_obj(mixed foo) {
mixed do_deactivate() {
varargs mixed do_deactivate_obj(mixed foo, mixed foo2) {
varargs mixed do_deactivate_obj_on_obj(mixed foo, mixed foo2) {
","/secure/sefun/atomize.c":"string array atomize_string(string str){
string array atomize_array(string array temp_arr){
","/lib/events/close.c":"int SetOpen(int x) {
mixed direct_close_obj(object target) {
mixed direct_open_obj(object target) {
mixed direct_open_obj_with_obj(object target, object tool) {
int GetClosed() {
varargs mixed CanClose(object who, string id) {
int SetClosed(int x) {
varargs mixed CanOpen(object who, object tool) {
mixed eventClose(object who) {
varargs mixed eventOpen(object who, object tool) {
int inventory_visible() {
int GetOpen(){
int inventory_accessible() {
","/lib/virtual/virt_land.c":"varargs static void create(int x, int y,int z) {
int GetMedium() {
mapping GetDirectionMap(){
void SetVirtualExits(int x, int y, int z){
varargs void SetLongAndItems(int x, int y, int z) {
mapping SetSurroundAreas(int x, int y, int z){
void ResetSurroundExits(){
void ResetLocation(){
string GetAreaType(){ return AreaType;}
varargs mixed GetCoordinates(int level) {
object GetMasterMap(){ return Map_Master;}
varargs string array GetNonExits(string array extra){
mapping GetSurroundAreas(){ return Surrounding_Areas; }
void PreAddEnter(mixed dir, string file){
int SetMasterMap(mixed map_name){
int SetVirtFile( string file ){
string SetResetMessage(mixed str){ Reset_Message = str;}
void SetCoordinates(int x, int y, int z) {
int SetMedium(int medium){ return Medium = medium;}
string GetReverseDirection(string dir){
varargs mixed GetMapType(int x, int y, int z){
","/verbs/rooms/stop.c":"static void create() {
string GetHelp(string str) {
mixed can_stop_str(string str) {
mixed do_stop_str(string str) {
","/lib/fishing.c":"int CanRelease(object who){
static void create() {
void heart_beat() {
mixed eventCast(object who, object pole, string str) {
mixed CanCast(object who, string where) {
mixed CanStop(object who, string str) {
mixed eventStop(object who, string str) {
int SetChance(int x) { return (Chance = x); }
int GetChance() { return Chance; }
mapping SetFish(mapping mp) { return (Fish = mp); }
mapping RemoveFish(string fish) {
mapping GetFish() { return Fish; }
mapping SetFishing(object who, object pole) {
mapping RemoveFishing(object who) {
int SetMaxFishing(int x) { return (MaxFishing = x); }
int GetMaxFishing() { return MaxFishing; }
int SetSpeed(int x) { return (Speed = x); }
int GetSpeed() { return Speed; }
static void eventCatch(object who, string fish, object pole) {
int AddFish(string fish, int x) {
","/lib/std/story.c":"static void create() {
string GetTalesDir() { return TalesDir; }
string SetTalesDir(string dir) {
void PickTale( string taletotell ) {
void TellTale( int part ) {
string SetNoTaleMessage(string notalemessage) {
string GetNoTaleMessage() { return NoTaleMessage; }
int GetTellingTale() { return AlreadyTellingTale; }
","/lib/events/fly.c":"mixed direct_fly_into_str(string str) {
mixed direct_fly_str(string str) {
","/secure/sefun/legacy.c":"mixed seteuid(mixed args){
mixed getuid(mixed args){
mixed geteuid(mixed args){
void add(mixed arg1, mixed arg2){
varargs mixed dump_variable(mixed foo, mixed bar){
string day(){
int date(){
string month(){
int year(){
varargs int minutes(int x){
varargs string season(int x){
string query_time(){
varargs int hour(int x){
void personal_log(string str){
void add_sky_event(function f){
mixed set_verbs(string array args){
","/secure/sefun/base_name.c":"string base_name(mixed val) {
","/lib/props/carry.c":"int GetMaxCarry() {
int GetLivingMaxCarry() {
int SetMaxCarry(int x) {
int CanCarry(int amount) {
int AddCarriedMass(int x) {
int GetCarriedMass() {
int GetCarriedWeight() {
","/secure/lib/net/server.c":"int eventDestruct() {
varargs static void create(int port, int type, string socket_obj) {
static int eventClose(mixed sock) {
int eventShutdown() {
static void eventSocketError(string msg, int code) {
static int SetSocketType(int x ) {
static int SetDestructOnClose(int x) {
int eventCreateSocket(int port) {
varargs int eventWrite(object owner, mixed val, int close) {
int GetDestructOnClose() {
int GetSocketType() {
static void eventServerReadCallback(int fd, mixed val) {
static void eventServerAbortCallback(int fd) {
static void eventServerListenCallback(int fd) {
static void eventNewConnection(object socket) {
static void eventServerWriteCallback(int fd) {
","/secure/sefun/generic.c":"varargs int true(mixed args...){
varargs int false(mixed args...){
","/secure/sefun/timestamp.c":"string timestamp(){
","/lib/lvs/position.c":"mixed eventLand(){
string GetFurnitureName(){
mixed eventStand() {
int GetPosition() {
mixed eventFly(){
varargs mixed eventSit(object target) {
int SetPosition(int x) {
mixed eventFall() {
varargs mixed eventLay(object target) {
","/verbs/creators/createfix.c":"static void create() {
mixed can_createfix_obj(string str) {
mixed can_createfix_word(string str) { return can_createfix_obj(\"foo\"); }
mixed do_createfix_obj(object ob) {
mixed do_createfix_word(string wrd) {
","/lib/meal.c":"string GetShort() { return item::GetShort(); }
static void create() {
int eventDestruct() { return item::eventDestruct(); }
static mixed AddSave(mixed array vars) { return item::AddSave(vars); }
int GetValue() {
int eventPoison(object who, object agent, int x) {
int GetStrength() { return MealStrength; }
int GetMealType() { return MealType; }
mixed eventDrink(object who) {
mixed eventEat(object who) {
int SetMealType(int x) {
int SetStrength(int x) { return (MealStrength = x); }
mixed direct_eat_obj() {
string SetEmptyItem(string file) { return (EmptyItem = file); }
string GetEmptyItem() { return EmptyItem; }
string SetEmptyName(string str) { return (EmptyName = str); }
string GetEmptyName() { return EmptyName; }
mixed SetEmptyShort(mixed val) { return (EmptyShort = val); }
mixed GetEmptyShort() { return EmptyShort; }
mixed SetEmptyLong(mixed val) { return (EmptyLong = val); }
mixed GetEmptyLong() { return EmptyLong; }
varargs void SetMealMessages(mixed array val...) {
mixed direct_drink_obj() {
mixed direct_drink_from_obj() {
mixed array GetMealMessages() { return ({ MyMessage, OtherMessage }); }
","/verbs/players/bump.c":"static void create() {
mixed can_bump_liv() {
mixed do_bump_liv(object ob) {
void MoveBack(object ob, string where) {
","/secure/daemon/master.c":"int valid_bind(object binder, object old_owner, object new_owner) {
int valid_save_binary(string str) { return true(str); }
int valid_shadow(object ob) {
int valid_object(object ob) {
string parser_error_message(int type, object ob, mixed arg, int flag) {
mapping query_groups() { return copy(Groups); }
object array parse_command_users() {
string player_save_file(string nom) {
int valid_apply(string array ok) {
void master_log_file(string file, string msg) {
void create() {
int GetResetNumber() { return ResetNumber; }
mixed apply_unguarded(function f) {
int player_exists(string nom) {
void new_read() {
void new_write() {
void new_groups() {
private static void load_access(string cfg, mapping resource) {
string array epilog(int i) {
string privs_file(string file) {
int different(string fn, string pr) {
string make_path_absolute(string file) {
string domain_file(string str) {
string author_file(string str) {
static int slow_shutdown() {
int save_ed_setup(object who, int code) {
int retrieve_ed_setup(object who) {
string get_save_file_name() {
int is_locked() { return MUD_IS_LOCKED; }
string array parse_command_id_list() { return ({ \"one\", \"thing\" }); }
string array parse_command_plural_id_list() { return ({ \"ones\", \"things\",\"them\"}); }
string array parse_command_adjectiv_id_list() {
string array parse_command_prepos_list() {
string parse_command_all_word() { return \"all\"; }
void create_save() {
object player_object(string nom) {
static void eventReset() {
void preload(string str) {
int valid_write(string file, object ob, string fun) {
int valid_read(string file, object ob, string fun) {
int check_access(object ob, string fun, mixed file, string array ok, string oper) {
nomask static int check_user(object ob, string fun, string file, string oper) {
nomask static int check_domain(object ob, string fun, string file, string o) {
object connect(int port) {
object compile_object(string str) {
static void crash(string err) {
int valid_hide(object who) {
int valid_override(string file, string nom) { true(file,nom); return (file == SEFUN); }
int valid_socket(object ob, string fun, mixed array info) {
string error_handler(mapping mp, int caught) {
void log_error(string file, string msg) {
varargs string standard_trace(mapping mp, int flag) {
string trace_line(object obj, string prog, string file, int line) {
int valid_link(string from, string to) {
","/secure/sefun/custom_path.c":"string array query_custom_path(){
string query_custom_command(string str){
","/lib/pistol.c":"int CanReceive(object ob){
int CanRelease(object ob){
mixed CanPutInto(object who, object what) {
mixed CanGetFrom(object who, object item) {
static void create(){
int eventShoot(object ob, mixed target){
void init(){
int SetMaxAmmo(int x) { MaxAmmo=x; return 1; }
int SetCaliber(int x) { Caliber=x; return 1; }
int SetMillimeter(int x) { Millimeter=x; return 1; }
int SetPistolType(string str) { PistolType=str; return 1; }
int SetAmmoType(string str) { AmmoType=str; return 1; }
int GetCaliber() { return Caliber; }
int GetMillimeter() { return Millimeter; }
string GetAmmoType() { return AmmoType; }
string GetPistolType() { return PistolType; }
int LoadRevolver(string str){
int LoadAuto(string str){
int doRevolverUnload(string what, string num){
int SetAmmoFile(string str) { AmmoFile=str; return 1; }
int InitRevolver(string array arr){
int GetMaxAmmo() { return MaxAmmo; }
int CalculateAmmoSize(){
int missed_shot(){
int startLoad(string str){
int startUnload(string str){
int eventFire(string str){
int GetMag() { return mag; }
int SetMag(int i) { mag=i; return 1; }
int SetLoaded(int i) { loaded=i; return 1; }
int GetLoaded() { return loaded; }
int doMagUnload(){
","/lib/mount.c":"mixed direct_ride_word_str(){
mixed direct_mount_liv(){
mixed direct_dismount_liv(){
mixed direct_dismount_from_liv(){
int eventRide(string direction){
int SetMount(int x) {
mixed eventMount(object who){
mixed eventDismount(object who){
mixed direct_ride_str(){
int GetMount(){ return Mount; }
","/lib/props/id.c":"varargs string array SetAdjectives(mixed adjs...) {
string SetCapName(string str) {
string GetKeyName() {
varargs string array SetId(mixed val...) {
string GetName() {
int id(string str) {
string array parse_command_id_list() {
string array parse_command_plural_id_list() {
string array parse_command_adjectiv_id_list() {
string array GetId() {
string array GetAdjectives() {
string SetKeyName(string nom) {
string GetCapName() {
","/verbs/common/shout.c":"static void create() {
string GetHelp(string str) {
mixed can_shout() { return \"Shout what?\"; }
mixed can_shout_str(string str) {
mixed can_shout_in_wrd_str(string lang, string str) {
mixed do_shout() { return 1; }
mixed do_shout_str(string str) {
mixed do_shout_in_wrd_str(string lang, string str) {
","/secure/sefun/distinct_array.c":"mixed array distinct_array(mixed array arr) {
","/verbs/players/attack.c":"static void create() {
varargs mixed can_attack_liv(object target) {
mixed do_attack_liv(object target) {
varargs mixed do_attack_lvs(mixed array targets, int exclusive) {
mixed can_attack_only_liv(object target){
mixed can_attack_liv_only(object target){
mixed do_attack_only_liv(object target){
mixed do_attack_liv_only(object target){
","/verbs/players/vote.c":"static void create() {
mixed can_vote_for_str() {
mixed do_vote_for_str( string str ) {
","/lib/std/dummy.c":"static int Destruct() {
varargs static void create(string array id, mixed long, string array adj) {
varargs string array SetId(mixed ids...) {
varargs int GetInvis(object ob) {
int isDummy() {
mixed eventMove(mixed dest) {
","/lib/comp/weapon.c":"string array GetSave() {
int eventStrike(object target) {
mixed CanEquip(object who, string array limbs) {
mixed eventEquip(object who, string array limbs) {
mixed eventUnequip(object who) {
int GetHands() {
string SetWeaponType(string str) {
varargs string GetEquippedDescription(object who) {
int SetHands(int x) {
int GetWielded(){
mixed SetWield(mixed val) {
mixed direct_remove_obj() {
mixed direct_wear_obj() {
string GetWeaponType() {
string GetEquippedShort() {
int eventDeteriorate(int type) {
","/secure/lib/net/client.c":"int eventDestruct() {
static void eventReadCallback(int fd, mixed
