#/secure/daemon/function.c
FileSize (["/lib/std/bed.c":289,"/verbs/creators/echo.c":1962,"/lib/lamp.c":1393,"/secure/sefun/to_object.c":3721,"/verbs/items/look.c":4206,"/lib/events/put.c":2964,"/lib/events/read.c":3946,"/verbs/players/teach.c":1478,"/lib/classes.c":3601,"/daemon/intermud.c":9123,"/secure/sefun/disable.c":702,"/lib/combat.c":31646,"/lib/genetics.c":8654,"/secure/lib/std/access.c":2986,"/lib/comp/container.c":1332,"/secure/sefun/percent.c":579,"/verbs/items/pour.c":1819,"/lib/events/look.c":7711,"/verbs/items/turn.c":1724,"/secure/lib/net/client.c":3675,"/verbs/items/balance.c":2815,"/verbs/players/follow.c":2509,"/verbs/creators/delete.c":4582,"/verbs/builders/delete.c":4960,"/secure/lib/net/remote.c":4654,"/lib/comp/surface.c":141,"/secure/sefun/custom_path.c":539,"/secure/sefun/get_livings.c":1774,"/lib/events/crawl.c":113,"/lib/events/turn.c":1860,"/lib/std/worn_storage.c":15795,"/verbs/items/smell.c":1582,"/lib/undead.c":2686,"/secure/sefun/communications.c":4088,"/verbs/builders/pulsecheck.c":1036,"/verbs/builders/add.c":3475,"/verbs/common/yell.c":1571,"/lib/events/press.c":2384,"/secure/sefun/format_page.c":516,"/secure/sefun/timestamp.c":873,"/lib/pole.c":2606,"/lib/events/consult.c":2212,"/lib/props/ambiance.c":377,"/lib/follow.c":1459,"/lib/clan.c":5330,"/secure/sefun/sockets.c":1123,"/lib/std/bot_limb.c":1078,"/lib/std/corpse.c":2939,"/verbs/players/nominate.c":933,"/verbs/items/unlock.c":1001,"/verbs/items/move.c":845,"/verbs/items/bury.c":1838,"/secure/sefun/mud_info.c":1666,"/verbs/players/news.c":1018,"/lib/props/description.c":3579,"/verbs/items/judge.c":3918,"/lib/std/germ.c":7707,"/verbs/players/learn.c":1322,"/secure/lib/net/ftp_data_connection.c":5264,"/secure/sefun/events.c":739,"/secure/lib/net/g2.c":2677,"/lib/events/bury.c":271,"/verbs/items/remove.c":2212,"/lib/events/get.c":2575,"/verbs/items/knock.c":1245,"/lib/player.c":26167,"/lib/magic.c":4850,"/secure/lib/net/ftp_client.c":4271,"/verbs/items/uninstall.c":851,"/secure/sefun/tail.c":305,"/lib/manycoins.c":233,"/verbs/common/say.c":1755,"/lib/files.c":1095,"/lib/events/smoke.c":152,"/lib/props/equip.c":1996,"/lib/events/lie.c":1679,"/verbs/items/empty.c":413,"/verbs/items/lock.c":1109,"/secure/sefun/log_file.c":1072,"/verbs/items/dig.c":2282,"/verbs/items/consult.c":961,"/lib/fishing.c":6288,"/lib/props/mass.c":849,"/lib/user/autosave.c":2141,"/lib/vehicle.c":30333,"/lib/std/bane.c":211,"/secure/lib/net/http.c":2314,"/secure/sefun/inventory.c":477,"/lib/events/lock.c":6844,"/secure/sefun/legacy.c":3470,"/verbs/items/use.c":872,"/secure/sefun/path_file.c":737,"/secure/sefun/values.c":576,"/verbs/creators/promote.c":823,"/verbs/players/befriend.c":731,"/spells/fireball.c":1442,"/secure/lib/bboard.c":8490,"/lib/events/buy.c":380,"/lib/steal.c":954,"/lib/events/smell.c":3411,"/lib/fuel.c":1563,"/verbs/builders/createfix.c":2071,"/verbs/creators/wizunlock.c":988,"/lib/race.c":6560,"/lib/std/armor.c":11727,"/lib/props/move.c":2996,"/lib/std/limb.c":2105,"/lib/bboard.c":8844,"/spells/missile.c":1216,"/lib/detect.c":3919,"/secure/sefun/pointers.c":3274,"/lib/events/fall.c":1978,"/secure/sefun/query_invis.c":920,"/secure/sefun/identify.c":1720,"/secure/sefun/english.c":13065,"/verbs/rooms/stop.c":864,"/verbs/items/close.c":936,"/secure/sefun/messaging.c":17196,"/lib/match.c":1103,"/lib/living.c":20885,"/verbs/items/shoot.c":1169,"/secure/sefun/dump_socket_status.c":602,"/lib/events/look_in.c":2888,"/verbs/players/dismount.c":1395,"/lib/virtual/virt_std.c":1549,"/secure/lib/net/oob.c":8030,"/lib/comp/seal.c":1443,"/verbs/items/bait.c":929,"/lib/std/bot_corpse.c":1176,"/lib/events/poison.c":868,"/lib/persist.c":3674,"/secure/sefun/strings.c":24892,"/lib/clip.c":2049,"/secure/sefun/base_name.c":568,"/secure/sefun/mappings.c":2154,"/verbs/items/show.c":1425,"/secure/sefun/light.c":1855,"/verbs/creators/createfix.c":1973,"/secure/sefun/security.c":3178,"/verbs/common/ask.c":2725,"/verbs/builders/dest.c":1978,"/lib/events/bait.c":889,"/verbs/players/vote.c":925,"/verbs/common/shout.c":1906,"/lib/std/furnace.c":979,"/verbs/items/scratch.c":1207,"/lib/nmsh.c":15440,"/lib/std/vendor.c":19563,"/lib/messages.c":1891,"/secure/daemon/master.c":21085,"/lib/props/save.c":62,"/lib/blank_pile.c":787,"/secure/sefun/query_time_of_day.c":226,"/secure/sefun/convert_name.c":557,"/lib/events/manipulate.c":2260,"/verbs/items/extinguish.c":1261,"/daemon/command.c":1809,"/verbs/items/pick.c":2712,"/lib/lvs/abilities.c":9215,"/secure/lib/file.c":5431,"/secure/sefun/duplicates.c":1318,"/lib/std/item.c":9328,"/lib/teller.c":11731,"/verbs/players/sleep.c":922,"/secure/sefun/reaper.c":1911,"/lib/shadow.c":592,"/verbs/players/kneel.c":1294,"/lib/events/lock_with.c":1552,"/verbs/items/disarm.c":673,"/lib/remote.c":3267,"/verbs/creators/reload.c":4859,"/verbs/builders/reload.c":5231,"/lib/props/id.c":5596,"/secure/lib/net/server.c":8757,"/secure/sefun/copy.c":668,"/secure/sefun/economy.c":1878,"/lib/props/clean.c":2800,"/verbs/players/target.c":2523,"/verbs/rooms/enter.c":1198,"/secure/daemon/players.c":8713,"/lib/lead.c":4180,"/verbs/items/boobytrap.c":849,"/verbs/items/equate.c":3918,"/secure/sefun/interface.c":1196,"/verbs/common/speak.c":2362,"/secure/sefun/time.c":1663,"/verbs/rooms/jump.c":2919,"/lib/enter.c":3994,"/lib/props/properties.c":1074,"/lib/bonus.c":2337,"/verbs/items/touch.c":950,"/verbs/creators/modify.c":3997,"/verbs/builders/modify.c":4123,"/lib/props/addstuff.c":492,"/secure/sefun/reload.c":3108,"/lib/events/install.c":1413,"/verbs/items/eat.c":1070,"/verbs/items/steal.c":3910,"/lib/interface.c":7100,"/lib/props/deterioration.c":1251,"/lib/command.c":13612,"/secure/lib/net/ftp.c":25468,"/lib/cylinder.c":358,"/lib/events/close.c":2050,"/lib/events/shoot.c":1947,"/lib/combatmsg.c":7599,"/lib/events/listen.c":3285,"/verbs/items/give.c":4705,"/secure/sefun/get_cmds.c":1009,"/lib/props/damage.c":931,"/verbs/rooms/cast.c":1202,"/verbs/players/drive.c":2635,"/verbs/items/throw.c":2163,"/lib/burn.c":4109,"/lib/quest.c":181,"/secure/sefun/get_verbs.c":610,"/secure/lib/net/web_client.c":55,"/verbs/builders/copy.c":4614,"/verbs/items/fill.c":718,"/verbs/items/free.c":827,"/lib/flask.c":5343,"/verbs/items/judge1.c":3918,"/lib/round.c":908,"/secure/sefun/expand_keys.c":460,"/verbs/rooms/swim.c":2837,"/verbs/players/abandon.c":531,"/verbs/items/wear.c":1863,"/lib/events/give.c":1217,"/lib/interactive.c":26784,"/secure/sefun/wipe_inv.c":882,"/secure/sefun/automap.c":2134,"/secure/sefun/user_exists.c":240,"/lib/events/wear.c":964,"/verbs/creators/codesay.c":1855,"/verbs/items/install.c":839,"/verbs/rooms/climb.c":1950,"/lib/virtual/virt_sky.c":3796,"/verbs/items/poison.c":1424,"/secure/sefun/parse_objects.c":541,"/verbs/rooms/fish.c":1061,"/lib/props/body_mass.c":756,"/lib/events/activate.c":418,"/secure/lib/net/socket.c":1444,"/secure/sefun/translate.c":3402,"/secure/sefun/local_time.c":2128,"/verbs/creators/initfix.c":2485,"/lib/comp/holder.c":2754,"/lib/door.c":11062,"/lib/fish.c":544,"/lib/events/jump.c":3619,"/verbs/players/backstab.c":6453,"/lib/post_office.c":1294,"/verbs/players/stealth.c":2223,"/verbs/items/drop.c":2697,"/verbs/players/lead.c":1004,"/lib/events/touch.c":2843,"/verbs/players/sit.c":1835,"/lib/std/daemon.c":1276,"/lib/sentient.c":8812,"/verbs/items/wield.c":3240,"/lib/trainer.c":7613,"/secure/sefun/wild_card.c":709,"/lib/props/carry.c":1325,"/lib/meal.c":6221,"/secure/lib/net/telnet_client.c":4786,"/verbs/items/open.c":1448,"/lib/std/table.c":344,"/lib/props/inventory.c":3883,"/lib/events/drop.c":2275,"/lib/domesticate.c":4047,"/lib/events/dig.c":1211,"/verbs/builders/initfix.c":2667,"/verbs/items/put.c":5401,"/lib/bank.c":664,"/secure/sefun/dummy.c":105,"/lib/pager.c":11589,"/verbs/players/stand.c":1128,"/verbs/items/donate.c":1121,"/lib/flashlight.c":4959,"/lib/lvs/level.c":1687,"/verbs/creators/pulsecheck.c":1018,"/verbs/players/pray.c":1701,"/secure/lib/net/h_ftpd.c":27162,"/secure/sefun/sefun.c":13823,"/secure/sefun/findobs.c":1530,"/lib/props/value.c":2149,"/verbs/items/roll.c":3877,"/verbs/players/cast.c":2018,"/lib/torch.c":736,"/secure/sefun/domains.c":1177,"/lib/mount.c":4304,"/secure/sefun/singular_array.c":169,"/lib/history.c":5341,"/verbs/items/pull.c":913,"/verbs/players/describe.c":919,"/lib/std/room.c":24919,"/lib/std/book.c":2567,"/secure/lib/net/echo_server.c":1655,"/verbs/common/body.c":3481,"/lib/spell.c":20961,"/secure/sefun/query_carrying.c":295,"/verbs/items/listen.c":1827,"/lib/events/dig_with.c":2545,"/verbs/items/deactivate.c":802,"/secure/sefun/query_names.c":1783,"/lib/events/search.c":2939,"/lib/events/roll.c":1899,"/lib/creator.c":4245,"/lib/die.c":2581,"/lib/events/pull.c":2140,"/lib/std/barkeep.c":5395,"/lib/currency.c":3185,"/spells/cure.c":2042,"/secure/sefun/this_agent.c":447,"/lib/clerk.c":4346,"/lib/blank.c":38,"/lib/clay.c":1781,"/secure/sefun/native_version.c":44,"/verbs/items/shake.c":896,"/daemon/verbs.c":2881,"/secure/sefun/get_object.c":5913,"/lib/virtual/virtual.c":312,"/verbs/players/ignore.c":2026,"/secure/sefun/rooms.c":2810,"/lib/light.c":1413,"/lib/used_meal.c":174,"/verbs/players/ride.c":2599,"/lib/virtual/virt_map.c":4907,"/lib/help.c":579,"/secure/sefun/generic.c":136,"/lib/events/wield.c":1231,"/verbs/items/strike.c":587,"/spells/meditate.c":1326,"/verbs/rooms/fly.c":2477,"/lib/teacher.c":6735,"/lib/events/fly.c":109,"/lib/verb.c":1949,"/verbs/items/unwield.c":1326,"/verbs/items/get.c":4307,"/lib/events/bait_with.c":1053,"/secure/sefun/absolute_path.c":1986,"/secure/lib/connect.c":18484,"/lib/language.c":4121,"/secure/lib/connect.first.c":5379,"/verbs/common/mail.c":1910,"/lib/exits.c":7973,"/verbs/creators/wizlock.c":1075,"/lib/events/sit.c":1938,"/secure/sefun/files.c":1667,"/secure/lib/net/uptime_server.c":1529,"/secure/sefun/visible.c":145,"/lib/npc.c":30333,"/lib/editor.c":983,"/lib/battery.c":2363,"/lib/teach.c":1390,"/secure/sefun/make_workroom.c":3592,"/secure/sefun/atomize.c":369,"/verbs/creators/zap.c":1227,"/secure/daemon/imc2.c":51869,"/verbs/items/drink.c":1507,"/secure/sefun/distinct_array.c":349,"/lib/stargate.c":7315,"/verbs/items/buy.c":1119,"/verbs/players/attack.c":3240,"/spells/restoration.c":2629,"/secure/sefun/ascii.c":7636,"/secure/sefun/numbers.c":844,"/secure/sefun/persist.c":342,"/lib/comp/object.c":1292,"/secure/sefun/flat_map.c":931,"/secure/sefun/absolute_value.c":268,"/lib/chapel.c":3502,"/secure/sefun/get_stack.c":419,"/lib/events/shake.c":2164,"/verbs/rooms/go.c":1813,"/verbs/players/mount.c":618,"/lib/std/chair.c":500,"/verbs/players/withdraw.c":876,"/lib/events/climb.c":3601,"/lib/trap.c":3727,"/verbs/creators/dest.c":1728,"/verbs/items/capture.c":941,"/lib/poison.c":1414,"/secure/sefun/arrays.c":391,"/verbs/creators/add.c":3300,"/verbs/players/wake.c":1241,"/verbs/items/search.c":1600,"/verbs/items/light.c":2819,"/lib/comp/weapon.c":5160,"/lib/std/story.c":3164,"/lib/body.c":56934,"/lib/leader.c":5575,"/lib/props/uniqueness.c":673,"/lib/props/radiance.c":465,"/secure/sefun/ordinal.c":407,"/secure/lib/net/generic.c":1386,"/lib/lvs/position.c":5577,"/lib/bot.c":2517,"/verbs/players/evade.c":793,"/lib/std/storage.c":4882,"/lib/pile.c":3537,"/verbs/players/bump.c":5284,"/lib/learn.c":326,"/verbs/items/sell.c":1867,"/lib/events/get_from.c":5862,"/verbs/players/sink.c":916,"/lib/pistol.c":17379,"/lib/shop.c":818,"/secure/sefun/load_object.c":1133,"/secure/sefun/morality.c":1226,"/verbs/items/press.c":1052,"/lib/chat.c":3564,"/lib/money.c":666,"/verbs/players/crawl.c":1788,"/lib/shadow_hook.c":658,"/verbs/players/party.c":3982,"/secure/sefun/compare_array.c":554,"/verbs/common/whisper.c":2532,"/lib/events/sell.c":525,"/secure/sefun/user_path.c":96,"/lib/std/dummy.c":2818,"/verbs/players/lie.c":1311,"/verbs/items/ring.c":1466,"/lib/donate.c":1879,"/lib/events/drink.c":619,"/lib/virtual/virt_land.c":5917,"/verbs/items/read.c":1359,"/lib/shell.c":826,"/lib/talk.c":9981,"/verbs/players/request.c":1303,"/verbs/items/activate.c":776,"/verbs/creators/resurrect.c":1504,"/lib/potion.c":910,"/verbs/players/marry.c":1605,"/verbs/creators/copy.c":4475,"/lib/mayor.c":2195,"/spells/buffer.c":2808,])
FunctionCache (["/lib/std/bed.c":"int CanGet(object who){
void create(){
","/verbs/creators/echo.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_echo() {
mixed can_echo_str(string str) {
mixed do_echo() { return 1; }
mixed do_echo_to_liv_str(object who, string what) {
mixed do_echo_str(string str) {
void eventEcho(object array targs, string str) {
mixed can_echo_to_liv_str(object ob, string str) {
","/lib/lamp.c":"string GetShort() {
static void create() {
varargs string GetLong(string unused) {
int GetRadiantLight(int ambient) {
varargs mixed eventLight(object who, object tool) {
mixed direct_light_obj() {
mixed eventDarken() {
static void heart_beat() {
int GetBurnRate() {
static int SetBurnRate(int x) {
","/secure/sefun/to_object.c":"object to_object(mixed var) {
","/verbs/items/look.c":"static void create() {
mixed can_look_str(string str, string verb) {
mixed can_look_obj(string verb, string id) {
mixed can_look_at_obj_on_obj(object targ, object where, string id1, string id2){
varargs mixed do_look_obj(object ob, mixed array args...) {
mixed do_look_str(string str) {
mixed can_look_at_str(string str, string verb) {
mixed can_look_in_obj(string verb, string id) {
mixed can_look_inside_obj(string verb, string id) {
mixed can_look_at_obj_word_obj(string verb, string targ, string store) {
mixed can_look_at_str_on_obj(string targ, string verb, string id1, string id2){
varargs mixed do_look_at_obj(object ob, mixed arg) {
mixed do_look_at_str(string str) {
mixed do_look_in_obj(object ob, mixed arg){
mixed do_look_inside_obj(object ob,mixed arg) {
mixed do_look_at_obj_word_obj(object target, object storage, mixed arg) {
varargs mixed do_look_at_str_on_obj(string id, object ob) {
","/lib/events/put.c":"static void create() {
mixed GetPreventPut() {
mixed direct_put_obj_word_obj() {
mixed direct_put_wrd_wrd_word_obj(){
mixed direct_put_obj_obj() {
mixed CanPut(object who) {
mixed SetPreventPut(mixed val) {
","/lib/events/read.c":"mixed direct_read_obj() {
mixed direct_read_str_word_obj(string str) {
string GetRead(string str) {
string array GetReads() {
void RemoveRead(string item) {
void SetReads(mapping ReadMap){
varargs mixed SetDefaultRead(mixed arg1, mixed desc) {
int SetLanguage(string str){
mixed GetLanguage(){
varargs mixed eventRead(object who, string str) {
","/verbs/players/teach.c":"static void create()
mixed can_teach_str_to_liv(string str, object ob)
mixed do_teach_str_to_liv(string spell, object target){
mixed can_teach_liv_to_str(object ob, string str){
mixed do_teach_liv_to_str(object target, string spell){
","/lib/classes.c":"static void create() {
int AddSkillPoints(string skill, int x) {
static string SetSkillModifier(string skill, string stat) {
int GetBaseStatLevel(string stat) { return 0; }
string GetSkillModifier(string skill) { return SkillModifiers[skill]; }
string SetClan(string clan) { return (Clan = clan); }
string GetClan() { return Clan; }
int SetMorality(int x) { return (Morality = x); }
string GetMoralityDescription() {
string array SetReligion(string adj, string noun) {
varargs string GetReligion(int flag) { return Religion[flag]; }
string ChangeClass(string class_name)  {
int ClassMember(string class_name) {
string SetClass(string class_name) {
int eventMoralAct(int degree) {
string GetClass() { return Class; }
","/secure/sefun/disable.c":"mixed hobbled(object ob){
","/lib/combat.c":"varargs int eventReceiveDamage(mixed agent, int type, int x, int internal,
static void heart_beat() {
mixed eventBite(object target) {
mixed eventTurn(object who) {
static void create() {
int GetMaxCarry() {
int GetLevel() {
varargs int eventDie(mixed agent) {
void eventEnemyDied(object ob) {
varargs int SetParalyzed(int count, function f) {
varargs int GetMaxHealthPoints(string limb){
int GetBaseStatLevel(string stat) {
int GetParalyzed() { return cParalyzed; }
int eventExecuteAttack(mixed target) {
int eventWeaponRound(mixed target, mixed val) {
void eventWeaponAttack(object target, object weapon, int num){
int eventMeleeRound(mixed target, function f) {
void eventMeleeAttack(object target, string limb) {
int eventMagicRound(mixed target, function f) {
int eventWimpy(int i) {
int SetDead(int i){
object array GetEnemies() {
int AddEnemy(object ob) {
int RemoveEnemy(object ob) {
object SetCurrentEnemy(object ob) {
int GetDead(){
int GetInCombat() {
void eventKillEnemy(object ob) {
void eventDestroyEnemy(object ob) {
string SetWimpyCommand(string cmd) {
string GetWimpyCommand() {
int GetMagicChance(int val) {
int GetMagicResistance() {
int GetCombatChance(int val) {
int GetDefenseChance(int val) {
int GetCombatBonus(int level) {
static int GetDamage(int power, string skill) {
int CanWeapon(object target, string type, int hands, int num) {
int CanMelee(object target) {
int eventPreAttack(object agent) {
varargs int eventReceiveAttack(int speed, string def, object agent) {
static object ResetCurrentEnemy() {
object GetCurrentEnemy() {
private static void SortEnemies() {
mixed array AddNonTargets(mixed val){
mixed array RemoveNonTargets(mixed val){
object array GetNonTargets(){
int AddHostile(object ob) {
object array GetHostiles() {
object array GetSpecialTarget() {
object array SetSpecialTarget(object array cibles) {
int eventQuell(){
int eventUnQuell(){
string SetParty(string str) {
string GetParty() {
varargs int SetAttack(mixed target, function callback, int type) {
int RemoveHostile(object ob) {
static int Destruct() {
","/lib/genetics.c":"static void create() {
mixed eventRestoreSight(object who, int amt) {
mapping GetStatsMap() { return copy(Stats); }
string GetResistance(int type) {
varargs void SetStat(string stat, int level, int classes) {
varargs void AddStat(string stat, int base, int cls) {
int GetStatClass(string stat) {
int GetBaseStatLevel(string stat) {
int AddStatPoints(string stat, int x) {
int GetMaxStatPoints(string stat, int level) {
void AddStatBonus(string stat, mixed f) {
varargs void RemoveStatBonus(string stat, object ob) {
int GetStatBonus(string stat) {
varargs string SetResistance(int type, string level) {
int GetCustomStats() { return CustomStats; }
int array GetLightSensitivity() {
varargs static int array SetLightSensitivity(mixed array val...) {
int AddVisionBonus(int x) {
int GetVisionBonus() {
varargs mixed GetEffectiveVision(mixed location, int raw_score) {
static void heart_beat() {
int GetStatLevel(string stat) {
mixed eventCustomizeStat(string stat, int amount) {
mapping GetResistanceMap(){
int GetBlind() {
static void RemoveBlindness() {
varargs mixed eventBlind(object who, int amt, mixed end) {
","/secure/lib/std/access.c":"void create() {
nomask int check_access(object ob, string fun, string file, string oper) {
static void set_access(string type, function f) {
mapping query_access(string type) {
nomask int grant_access(string type, string file, string who) {
nomask int remove_access(string type, string file, string who) {
","/secure/sefun/percent.c":"float percent(mixed numerator, mixed denominator) {
","/lib/comp/container.c":"int GetOpacity(){
int SetOpacity(int x){
int GetRadiantLight(int ambient) {
int CanReceive(object ob) {
int CanRelease(object ob) {
int eventReceiveObject(object ob) {
int eventReleaseObject(object ob) {
","/verbs/items/pour.c":"static void create() {
mixed can_pour_obj_onto_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_on_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_out(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_into_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_in_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_out_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_from_obj_into_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_pour_from_obj_into_obj(object from, object to) {
mixed do_pour_from_obj_in_obj(object from, object to) {
mixed do_pour_obj_onto_obj(object from, object to) {
mixed do_pour_obj_on_obj(object from, object to) {
mixed do_pour_obj_in_obj(object from, object to) {
mixed do_pour_obj_into_obj(object from, object to) {
mixed do_pour_obj_out(object from) {
mixed do_pour_out_obj(object from) {
","/lib/events/look.c":"varargs string GetExternalDesc(object who) {
string SetExternalDesc(string desc) {
mixed SetInvis(mixed val) {
varargs mixed AddItem(mixed item, mixed val) {
mixed AddItem_func(mixed foo){
mixed SetItem_func(mixed foo){
string array GetItems() {
mapping GetItemsMap(){
mapping RemoveItem(mixed item) {
mapping SetItems(mapping items) {
mapping SetItem_desc(mapping items) {
varargs string GetLong(string str) {
string SetLong(string str) {
varargs mixed eventShow(object who, string component) {
mixed direct_look_obj() {
mixed direct_look_at_obj() {
mixed direct_look_at_obj_on_obj(object target, object ob,mixed arg, mixed arg2) {
mixed direct_look_at_obj_word_obj() {
mixed direct_look_at_str_on_obj(string str, object target) {
varargs int GetInvis(object ob) {
","/verbs/items/turn.c":"static void create() {
mixed can_turn_off_obj(mixed foo) {
mixed can_turn_obj_on(mixed foo) {
mixed can_turn_obj_off(mixed foo) {
mixed do_turn() {
varargs mixed do_turn_obj(mixed foo, mixed foo2) {
varargs mixed do_turn_on_obj(mixed foo, mixed foo2) {
mixed do_turn_off_obj(mixed foo) {
varargs mixed do_turn_obj_on(mixed foo, mixed foo2) {
mixed do_turn_obj_off(mixed foo) {
mixed do_turn_on_obj_word_obj(mixed foo, mixed foo2) {
mixed can_turn_on_obj(mixed foo) {
","/secure/lib/net/client.c":"int eventDestruct() {
static void eventWriteCallback(int fd) {
static void eventSocketClose() { }
static void eventSocketError(string str, int x) {
static void eventClose(mixed arg) {
function SetRead(function f) { return (Read = f); }
static void eventReadCallback(int fd, mixed val) {
int SetSocketType(int type) { return (SocketType = type); }
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
","/verbs/items/balance.c":"static void create() {
mixed can_balance_obj_to_obj() {
mixed do_balance_obj_to_obj(object obj1, object obj2) {
int eventBalance(object caster, object obj1, object obj2) {
","/verbs/players/follow.c":"static void create() {
mixed do_follow() {
mixed can_follow_liv() { return 1; }
mixed do_follow_liv(object ob) {
","/verbs/creators/delete.c":"static void create() {
int eventDeleteExit(string str){
int eventDeleteObject(object ob1, object ob2){
mixed can_delete_enter_str(string str) {
mixed can_delete_obj(object ob){
mixed can_delete_obj_from_obj(object ob1, object ob2){
mixed can_delete_obj_from_here(object ob){
mixed can_delete_obj_from_room(object ob){
mixed do_delete_exit_str(string str) {
mixed do_delete_enter_str(string str) {
mixed do_delete_room_str(string str) {
mixed can_delete_exit_str(string str) {
mixed can_delete_room_str(string str) {
mixed do_delete_obj(object ob){
mixed do_delete_obj_from_obj(object ob1, object ob2){
mixed do_delete_obj_from_room(object ob){
mixed do_delete_obj_from_here(object ob){
","/verbs/builders/delete.c":"static void create() {
int eventDeleteExit(string str){
int eventDeleteObject(object ob1, object ob2){
mixed can_delete_exit_str(string str) {
mixed can_delete_room_str(string str) {
mixed can_delete_obj(object ob){
mixed do_delete_exit_str(string str) {
mixed do_delete_enter_str(string str) {
mixed do_delete_room_str(string str) {
mixed do_delete_obj(object ob){
mixed can_delete_enter_str(string str) {
mixed can_delete_obj_from_obj(object ob1, object ob2){
mixed can_delete_obj_from_here(object ob){
mixed can_delete_obj_from_room(object ob){
mixed do_delete_obj_from_obj(object ob1, object ob2){
mixed do_delete_obj_from_room(object ob){
mixed do_delete_obj_from_here(object ob){
","/secure/lib/net/remote.c":"static void create(int fd, object owner){
void eventRead(string str) {
static void eventSocketClosed(int fd) {
static private void eventProcess(int fd, string str) {
","/lib/comp/surface.c":"void create(){
int eventPutOn(object player, object item){
","/secure/sefun/get_livings.c":"varargs object get_random_living(object room, int foo){
varargs object array get_livings(object ob,int foo){
","/secure/sefun/custom_path.c":"string array query_custom_path(){
string query_custom_command(string str){
","/lib/events/crawl.c":"mixed direct_crawl_into_str(string str) {
mixed direct_crawl_str(string str) {
","/lib/events/turn.c":"int eventTurn(object who) {
int direct_turn_obj(object target) {
mixed eventTurnOff(object ob){
mixed eventTurnOn(object ob){
varargs mixed CanTurn(object who, object what) {
varargs mixed CanTurnOn(object who, object what) {
varargs mixed CanTurnOff(object who, object what) {
int direct_turn_on_obj(object target){
int direct_turn_on_obj_on_obj(object target, object thinger){
int indirect_turn_on_obj_on_obj(object thinger, object target){
int direct_turn_off_obj(object target){
int direct_turn_off_obj_on_obj(object target, object thinger){
int indirect_turn_off_obj_on_obj(object thinger, object target){
int direct_turn_obj_on(object target){
int direct_turn_obj_on_obj_on(object target, object thinger){
int indirect_turn_obj_on_obj_on(object thinger, object target){
int direct_turn_obj_off(object target){
int direct_turn_obj_on_obj_off(object target, object thinger){
int indirect_turn_obj_on_obj_off(object thinger, object target){
","/lib/std/worn_storage.c":"int eventReceiveDamage(object agent, int type, int amt, int i, mixed array l) {
void eventDeteriorate(int type) {
string GetItemCondition() {
string array GetSave() {
int eventMove(mixed dest) {
mixed eventEquip(object who, string array limbs) {
varargs mixed eventUnequip(object who) {
mixed CanEquip(object who, string array limbs) {
static void create() {
static int Destruct() {
varargs string GetExternalDesc(){
mixed eventShow(object who, string component) {
int GetRadiantLight(int ambient) {
static mixed array AddSave(mixed array vars) {
int SetSaveRecurse(int x) {
mixed CanSteal(object who) {
string array GetRestrictLimbs() {
int GetOpacity() {
varargs mixed CanShowInterior(object who, object target) {
int inventory_visible() {
int eventReceiveObject(object ob) {
mixed CanGetFrom(object who, object item) {
mixed CanPutInto(object who, object what) {
int inventory_accessible() {
mixed CanOpen(object who, string id) {
mixed CanClose(object who, string id) {
mixed CanLock(object who, string id) {
mixed CanPick(object who, string id) {
mixed CanUnlock(object who, string id, object key) {
void PutCheck(){
int SetRetainOnDeath(int x ) { return (RetainOnDeath = x); }
mixed CanRepair(object who) {
int GetRetainOnDeath() { return RetainOnDeath; }
string GetEquippedShort() {
int GetMaxRecurseDepth(){
int SetMaxRecurseDepth(int i){
int GetCanClose() {
int SetCanClose(int x) {
int GetCanLock() {
int SetCanLock(int x) {
void SetKey(string key) {
varargs mixed eventRepair(object who, int strength, int type) {
varargs string GetEquippedDescription(object who) {
int GetRecurseDepth(){
int AddRecurseDepth(int i){
int SetRecurseDepth(int i){
int GetFingers() {
void init() {
string array SetRestrictLimbs(string array limbs) {
int SetProtection(int type, int amount) {
int GetMaxProtection(int type) {
int SetFingers(int x) {
int GetProtection(int type) {
mixed GetWear() {
mixed SetWear(mixed val) {
int restrict(mixed arg){
","/verbs/items/smell.c":"static void create() {
mixed can_smell() {
mixed can_smell_obj() {
mixed can_smell_str_word_obj() {
mixed do_smell() {
mixed do_smell_obj(object ob) {
mixed do_smell_str_word_obj(string str, object ob) {
","/lib/undead.c":"static void heart_beat() {
string GetUndeadType() {
string SetUndeadType(string str) {
mixed eventBite(object target) {
mixed eventTurn(object who) {
int GetGhost(){
","/secure/sefun/communications.c":"varargs void say(mixed str, mixed ob) {
varargs void tc(string str, string col, object dude){
varargs int tn(string str, string col, object room, int mclass){
varargs int trr(string str, string col, int mclass){
varargs int tell_creators(string msg, string color){
varargs void shout(mixed str, mixed exclude) {
varargs void tell_object(object ob, mixed str, int mclass){
varargs void tell_room(mixed ob, mixed str, mixed exclude) {
void tell_player(mixed player, string msg){
varargs int debug(mixed msg, mixed val, string color){
","/verbs/builders/pulsecheck.c":"static void create() {
mixed can_pulsecheck_liv(string str) {
mixed do_pulsecheck_liv(object ob){
mixed do_pulsecheck_lvs(object array obs) {
","/verbs/builders/add.c":"static void create() {
mixed can_add_obj_to_obj(string one, string two){
mixed can_add_obj_to_here(string one) { return 1; }
mixed can_add_obj_to_room(string one) { return 1; }
mixed do_add_obj_to_here(object ob){
mixed do_add_obj_to_room(object ob){
mixed do_add_obj_to_obj(object ob, object ob2) {
","/secure/sefun/format_page.c":"varargs string format_page(string array items, int columns, int modifier) {
","/verbs/common/yell.c":"static void create() {
string GetHelp(string str) {
mixed can_yell_str(string str) {
mixed can_yell_in_wrd_str(string lang, string str) {
mixed do_yell() { return 1; }
mixed do_yell_str(string str) {
mixed do_yell_in_wrd_str(string lang, string str) {
","/lib/events/press.c":"varargs mixed eventPress(object who, string component) {
string array GetPresses() {
mapping RemovePress(string item) {
varargs mapping SetPress(mixed key, mixed desc) {
varargs mixed CanPress(object who, string component) {
mixed direct_press_obj(object target) {
mixed direct_press_str_on_obj(string str, object target) {
","/secure/sefun/timestamp.c":"string timestamp(){
","/lib/pole.c":"static void create() {
int GetStrength() { return PoleStrength; }
mixed AddSave(mixed array vars) { return ({}); }
mixed CanCast(object who) {
int SetStrength(int x) { return (PoleStrength = x);  }
int GetChance() { return CatchChance + GetProperty(\"blessed\"); }
int eventFish(object who) {
mixed eventCatch(object who, string fish) {
int eventBreak() {
int SetChance(int x) { return (CatchChance =x); }
mixed direct_fish_with_obj() {
mixed direct_cast_obj() {
","/lib/events/consult.c":"varargs mixed eventConsult(object who, string component) {
string array GetConsults() {
mapping RemoveConsult(string item) {
varargs mapping SetConsult(mixed key, mixed desc) {
varargs mixed CanConsult(object who, string component) {
mixed direct_consult_obj(object target) {
mixed direct_consult_str_on_obj(string str, object target) {
","/lib/props/ambiance.c":"int GetAmbientLight() {
static int SetAmbientLight(int x) {
","/lib/follow.c":"static void create() { Leader = 0; }
object GetLeader() { return Leader; }
varargs mixed CanFollow(object ob) {
int IsFollowing(object ob) {
mixed direct_follow_liv() {
object SetLeader(object leader) {
int eventFollow(object dest, int fC) { return 0; }
","/lib/clan.c":"static void create() {
string GetLeader() { return Clan->leader; }
string GetAffectLong(object ob) {
string SetLeader(string str) {
static void init() {
mixed CanJoin(object ob) { return 1; }
string SetClanName(string str) {
string GetClanName() { return Clan->name; }
string SetClanObject(string str) {
string GetClanObject() { return Clan->objectName; }
string SetClanSkill(string str) {
string GetClanSkill() { return Clan->skill; }
int eventBring(string str) {
int eventInitiate(string str) {
void eventJoin(object ob) {
int eventRetire(string str) {
void eventUnjoin(object ob) {
void eventWelcome(object ob) {
","/secure/sefun/sockets.c":"mixed array socket_names(){
string dump_socket_status() {
string socket_ip(int fd){
","/lib/std/bot_limb.c":"static void create() {
void SetLimb(string limb, string owner, string race) {
int eventDecay() {
","/lib/std/corpse.c":"int CanReceive(object ob) { return 1; }
static void create() {
string GetItemCondition() { return \"\";}
static int Destruct() {
string GetSaveString() { return 0; }
void SetCorpse(object who) {
string GetRace() { return Race; }
int isFreshCorpse() {
string GetHealthShort() {
int eventDecay() {
string GetOwner() { return Owner; }
int SetDecayLife(int x) { return (DecayLife = x); }
int GetDecayLife() { return DecayLife; }
int direct_animate_obj() {
int direct_offer_obj() {
","/verbs/players/nominate.c":"static void create() {
mixed can_nominate_str() {
mixed do_nominate_str( string str ) {
","/verbs/items/unlock.c":"static void create() {
mixed can_unlock_obj_with_obj() {
mixed do_unlock_obj_with_obj(object target, object key) {
","/verbs/items/move.c":"static void create() {
mixed can_move_obj() {
mixed can_move_str_on_obj() {
mixed do_move_obj(object target) {
varargs mixed do_move_str_on_obj(string thing, object target) {
","/verbs/items/bury.c":"static void create() {
static void eventBury(object who, object tool, object what, object check) {
varargs static void eventPrepareBury(object who, object tool, object what) {
mixed can_bury_str_with_obj() {
mixed can_bury_obj_with_obj() {
mixed do_bury_str_with_obj(string str, object tool) {
mixed do_bury_obj_with_obj(object what, object tool) {
","/secure/sefun/mud_info.c":"string architecture() { return MUDOS_ARCH; }
varargs string imc2_mud_name(string name){
string mudlib_version() { return \"2.8.2\"; }
int query_host_port() { return __PORT__; }
string query_os_type(){
string query_intermud_ip(){
string admin_email() { return ADMIN_EMAIL; }
","/verbs/players/news.c":"static void create() {
mixed do_news_str(string str) {
mixed can_news() { return can_news_str(\"general\"); }
","/lib/props/description.c":"mixed direct_modify_obj_str() {
mixed direct_modify_word_str() {
mixed direct_initfix_obj() {
mixed direct_createfix_obj() {
mixed direct_reload_obj() { return 1; }
mixed indirect_reload_obj() { return 1; }
mixed direct_reload_word_obj() { return 1; }
mixed indirect_reload_word_obj() { return 1; }
mixed direct_reload_str_obj() { return 1; }
mixed indirect_reload_str_obj() { return 1; }
mixed direct_reload_str_word() { return 1; }
mixed indirect_reload_str_word() { return 1; }
mixed direct_reload_every_str() { return 1; }
mixed indirect_reload_every_str() { return 1; }
mixed direct_copy_obj_to_obj() { return 1; }
mixed direct_copy_obj_str() { return 1; }
mixed direct_add_obj_to_obj() { return 1; }
mixed indirect_add_obj_to_obj() { return 1; }
mixed direct_delete_obj_from_obj(){
mixed indirect_delete_obj_from_obj(){
mixed indirect_delete_obj_from_here() { return 1; }
mixed direct_delete_obj_from_room() { return 1; }
mixed indirect_delete_obj_from_room() { return 1; }
mixed indirect_add_obj_to_here() { return 1; }
mixed indirect_add_obj_to_room() { return 1; }
int SetNoModify(int i){
string GetShort() {
int GetModify(){
int GetNoModify(){
string GetDefiniteShort() {
varargs mixed SetShort(mixed val, int proper) {
object array GetDummyItems() {
","/verbs/items/judge.c":"static void create() {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
mixed can_judge_obj_to_obj() {
","/lib/std/germ.c":"static void create() {
void init(){
static void heart_beat() {
mixed eventEncounter(object who) {
mixed eventCure(object who, int x, string type) {
string GetType() {
mixed eventInfect(object ob) {
int isGerm() {
mixed GetCure() {
mixed SetCure(mixed val) {
int SetCannotInfect(int i){
int SetGermName(string str){
string GetGermName(){
int SetCommunicable(int x) {
function GetInfect() {
function SetInfect(function f) {
int GetLifeSpan() {
int SetLifeSpan(int x) {
mixed eventMultiply() {
int GetCommunicable() {
int GetCannotInfect(){
string SetType(string type) {
void eventSuffer(object ob) {
","/verbs/players/learn.c":"static void create()
mixed can_learn_to_str_from_liv(string str, object ob){
mixed do_learn_str_from_liv(string spell, object target){
mixed do_learn_to_str_from_liv(string spell, object target){
mixed can_learn_str_from_liv(string str, object ob)
","/secure/lib/net/ftp_data_connection.c":"int eventDestruct() {
static void eventWriteCallback(int fd) {
static void eventSocketClose() { }
static void eventSocketError(string str, int x) {
varargs static int eventClose(class data_conn sock, int aborted) {
function SetRead(function f) { return (Read = f); }
static void eventReadCallback(int fd, mixed val) {
int SetSocketType(int type) { return (SocketType = type); }
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
int SetPassiveMode(int x) { return (PassiveMode = x); }
static void eventListenCallback(int fd)
function SetClose(function f) { return (Close = f); }
function SetWrite(function f) { return (Write = f); }
int eventWriteDestruct() {
","/secure/sefun/events.c":"int event_pending(object ob) {
varargs void remove_event(int i){
varargs void add_event(string source, string ob, string fun, mixed array args, int when, int repeat){
","/lib/events/bury.c":"mixed direct_bury_obj_with_obj() {
","/verbs/items/remove.c":"static void create() {
mixed can_remove_obj() {
mixed can_remove_obj_out_of_obj() {
mixed can_remove_obj_from_obj() {
mixed do_remove_obj(object ob) {
mixed do_remove_obs(mixed array res) {
mixed do_remove_obj_out_of_obj(object targ, object container) {
mixed do_remove_obj_from_obj(object targ, object container) {
mixed do_remove_obs_out_of_obj(mixed array res, object container) {
mixed do_remove_obs_from_obj(mixed array res, object container) {
","/lib/events/get.c":"static void create() {
mixed GetPreventGet() {
mixed SetPreventGet(mixed val) {
mixed direct_get_obj_out_of_obj(object target, object src) {
mixed direct_get_obj_obj(object target, object src) {
mixed CanGet(object who) {
mixed direct_get_obj_from_obj(object target, object src) {
","/verbs/items/knock.c":"static void create() {
varargs mixed do_knock_str_on_obj(string thing, object target) {
mixed can_knock_on_obj() {
mixed do_knock_obj(object target) {
mixed can_knock_on_str_on_obj() {
varargs mixed do_knock_on_str_on_obj(string thing, object target) {
mixed can_knock_obj() {
mixed do_knock_on_obj(object target) {
mixed can_knock_str_on_obj() {
","/lib/player.c":"int CanReceive(object ob) { return CanCarry((int)ob->GetMass()); }
int eventReceiveObject(object foo) {
int eventReleaseObject(object foo) {
static int Destruct() {
string SetShort(string irrelevant) {
string GetCapName() { return interactive::GetCapName(); }
string GetName() {
varargs string GetLong(string str) {
varargs int eventShow(object who, string str) {
static void create() {
int Setup() {
static void heart_beat() {
int eventMove(mixed dest) {
static void net_dead() {
void eventReconnect() {
varargs mixed GetEffectiveVision(mixed location, int raw_score) {
int SetUndead(int x) {
mixed eventTurn(object who) {
varargs int eventMoveLiving(mixed dest, string omsg, string imsg) {
string SetClass(string str) {
varargs int eventDie(mixed agent) {
void eventLoadObject(mixed array value, int recurse) { }
varargs static int AddHealthPoints(int x, string limb, object agent) {
int GetLanguageLevel(string lang) {
int ResetLevel() {
void eventKillEnemy(object ob) {
int AddCurrency(string type, int amount) {
int AddBank(string bank, string type, int amount) {
string array GetMuffed(){
mixed eventAsk(object who, string what) {
int eventDisplayStatus() {
void eventRevive() {
static mixed eventUse(object used, string cmd) {
mixed CanUse() { return 1; }
string array SetTitles(string array titles) {
string array AddTitle(string title) {
string array RemoveTitle(string title) {
string array GetTitles() { return Titles; }
void AddQuest(string title, string desc) {
mixed array GetQuests() {
mapping array GetDeaths() {
int GetTrainingPoints() { return TrainingPoints; }
int AddTrainingPoints(int x) {
int RemoveTrainingPoints(int x) {
static void eventDestroyUndead(object agent) {
string array SetMuffed(string array muffed){
string array AddMuffed(string muffed){
string array RemoveMuffed(string unmuffed){
int SetTitleLength(int x) {
int GetTitleLength() { return TitleLength; }
void AddPartyQuest(string title, string desc) {
void AddQuestSkillPoints(string skill, int amount) {
void AddQuestStatPoints(string stat, int amount) {
void AddQuestCurrency(string type, int amount) {
varargs int eventTrain(string skill, int points) {
","/lib/magic.c":"static varargs void eventCast(object spell, string limb, object array targs) {
static void eventTrainSpell(object spell) {
mapping GetSpellBook() {
void SetSpellBook(mapping book) {
int GetSpellLevel(string spell) {
varargs mixed CanCast(object spell) {
varargs mixed eventPrepareCast(string verb, mixed array args...) {
mixed eventLearnSpell(string spell) {
","/secure/lib/net/ftp_client.c":"int eventDestruct() {
static void eventWriteCallback(int fd) {
static void eventSocketClose() { }
static void eventSocketError(string str, int x) {
varargs static int eventClose(class client sock, int aborted) {
function SetRead(function f) { return (Read = f); }
static void eventReadCallback(int fd, mixed val) {
int SetSocketType(int type) { return (SocketType = type); }
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
function SetClose(function f) { return (Close = f); }
function SetWrite(function f) { return (Write = f); }
int eventWriteDestruct() {
","/secure/sefun/tail.c":"int tail(string file) {
","/verbs/items/uninstall.c":"static void create() {
mixed can_uninstall() {
mixed can_uninstall_obj(mixed foo) {
mixed can_uninstall_obj_word_obj(mixed foo) {
mixed do_uninstall() {
varargs mixed do_uninstall_obj(mixed foo) {
varargs mixed do_uninstall_obj_word_obj(mixed foo, mixed foo2, mixed foo3) {
","/lib/manycoins.c":"int PutCoins(object who) {
int Payment(object who, int value) {
","/verbs/common/say.c":"static void create() {
string GetHelp(string str) {
mixed can_say_to_liv(object ob) {
mixed can_say_to_liv_str(object targ, string str) {
mixed can_say_str(string str) {
mixed do_say_to_liv(object ob) { return 1; }
mixed do_say_to_liv_str(object targ, string str) {
mixed do_say_str(string str) { return do_say_to_liv_str(0, str); }
","/lib/files.c":"string array wild_card(string str) {
nomask static int remove_dots(string str) { return !(str[0] == '.'); }
string query_cwd() { return DIR_TMP; }
","/lib/events/smoke.c":"mixed CanSmoke(object who) {
int direct_smoke(object target) {
","/lib/props/equip.c":"int GetArmorType() {
static string array SetWorn(string array limbs) {
mixed CanUnequip(object who) {
mixed eventEquip(object who, string array limbs) {
static void eventRestoreEquip(string array limbs) {
mixed eventUnequip(object who) {
int SetArmorType(int x) {
mixed CanEquip(object who, string array limbs) {
string array GetWorn() {
string array GetSave() {
","/lib/events/lie.c":"int CanGet(object who){
mixed eventReleaseStand(object who) {
int GetMaxLiers() {
static int SetMaxLiers(int x) {
mixed direct_lie_word_obj() {
mixed direct_lie_down_word_obj() {
mixed eventReceiveLay(object who) {
object array GetLiers() {
","/verbs/items/empty.c":"static void create() {
mixed can_empty_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_empty_obj(object from) {
","/secure/sefun/log_file.c":"void log_file(string fl, string msg) {
","/verbs/items/lock.c":"static void create() {
mixed can_lock_obj_with_obj(string verb) {
varargs mixed do_lock_obj_with_obj(object target, object key, mixed array words...) {
","/verbs/items/dig.c":"static void create() {
mixed can_dig_with_obj() {
mixed can_dig_str_with_obj() {
mixed can_dig_obj_with_obj() {
mixed do_dig_with_obj(object ob) {
mixed do_dig_str_with_obj(string str, object ob) {
mixed do_dig_obj_with_obj(object what, object ob, string id) {
static void eventDig(object who, object tool, object what, object check) {
varargs static void eventPrepareDig(object who, object tool, object what) {
","/verbs/items/consult.c":"static void create() {
mixed can_consult_obj() {
mixed can_consult_str_on_obj() {
mixed do_consult_obj(object target) {
varargs mixed do_consult_str_on_obj(string thing, object target) {
","/lib/fishing.c":"int CanRelease(object who){
static void create() {
void heart_beat() {
mixed eventCast(object who, object pole, string str) {
mixed CanCast(object who, string where) {
mixed CanStop(object who, string str) {
mixed eventStop(object who, string str) {
int GetChance() { return Chance; }
mapping SetFish(mapping mp) { return (Fish = mp); }
mapping RemoveFish(string fish) {
mapping GetFish() { return Fish; }
mapping SetFishing(object who, object pole) {
mapping RemoveFishing(object who) {
int SetMaxFishing(int x) { return (MaxFishing = x); }
int GetMaxFishing() { return MaxFishing; }
int SetSpeed(int x) { return (Speed = x); }
int GetSpeed() { return Speed; }
int AddFish(string fish, int x) {
static void eventCatch(object who, string fish, object pole) {
int SetChance(int x) { return (Chance = x); }
","/lib/props/mass.c":"int AddMass(int x) {
int SetMass(int x) {
int GetMass() {
int GetWeight() {
string array GetSave() {
","/lib/user/autosave.c":"int Setup() {
static void heart_beat() {
nomask int restore_player(string nom) {
nomask void restore_inventory() {
nomask void save_player(string nom) {
","/lib/vehicle.c":"static void create() {
int eventDestruct() {
void eventReconnect() { }
static int cmdAll(string arg) {
string GetCommandFail() { return \"What?\"; }
string GetShort(){
int GetRadiantLight(int ambient) {
int CanReceive(object ob) { return CanCarry((int)ob->GetMass()); }
int eventReceiveObject(object who) {
int eventReleaseObject(object who) {
int AddCarriedMass(int x) { return living::AddCarriedMass(x); }
varargs int eventPrint(string msg, mixed arg2, mixed arg3) {
string GetName() { return object::GetName(); }
static void heart_beat() {
mixed eventTurn(object who) {
string GetCapName() { return object::GetCapName(); }
void SetAction(int chance, mixed val) {
mixed GetAction() { return Action; }
varargs int eventMoveLiving(mixed dest, string omsg, string imsg) {
mixed array GetCommands() { return commands(); }
static int ContinueHeart() {
varargs string SetRace(string race, mixed extra) {
string SetClass(string cls) {
int SetLevel(int x) {
int SetHealthPoints(int x) {
int SetMaxHealthPoints(int x) {
int SetMagicPoints(int x) {
float SetStaminaPoints(float x) {
float SetMaxStaminaPoints(float x) {
varargs void SetCurrency(mixed val, int amount) {
mixed SetEncounter(mixed val) { return (Encounter = val); }
string array AddEncounter(string nom) {
string array RemoveEncounter(string nom) {
mixed GetEncounter() { return Encounter; }
varargs string GetLong(string str) {
int GetUnique() { return Unique; }
mapping SetInventory(mapping mp ) { return (Inventory = mp); }
string SetKeyName(string nom) {
int GetLevel() { return NPCLevel; }
varargs int eventShow(object who, string str) {
varargs int eventDie(mixed agent) {
int eventCompleteMove(mixed dest) {
void eventEnemyDied(object ob) {
mixed SetDie(mixed val) { return (Die = val); }
mixed GetDie() { return Die; }
mixed GetCombatAction() { return CombatAction; }
int SetUnique(int x) {
string array GetEnemyNames() { return EnemyNames; }
static void init() {
void SetCombatAction(int chance, mixed val) {
varargs int GetMaxHealthPoints(string limb){
int array GetScreen() { return ({ 80, 24 }); }
int AddEnemy(object ob) {
void CheckEncounter(){
mapping GetInventory() { return copy(Inventory); }
int SetAutoStand(int i){
int GetCustomXP(){
int SetCustomXP(int i){
int GetAutoStand(){ return AutoStand; }
mixed CanGet(object who) { return GetName() + \" is a living being!\"; }
int SetMaxMagicPoints(int x) {
mixed SetAggressive(mixed val){
int eventExtraAction(){ return 1; }
void eventDescribeEnvironment(int brief) {
string GetPlainShort(){
","/lib/std/bane.c":"void create(){
string array GetBane(){
string array QueryBane(){
int SetBane(array arr){
","/secure/lib/net/http.c":"int eventRead(buffer data) {
private static void eventError(string name) {
private static mixed eventGetFile(string name) {
","/secure/sefun/inventory.c":"int query_carrying(object who, mixed thing){
object array containers(object ob){
","/secure/sefun/legacy.c":"void set(mixed arg1, mixed arg2){
void add(mixed arg1, mixed arg2){
string day(){
void personal_log(string str){
void add_sky_event(function f){
varargs mixed dump_variable(mixed foo, mixed bar){
void query(mixed arg1, mixed arg2){
mixed seteuid(mixed args){
mixed getuid(mixed args){
mixed geteuid(mixed args){
int date(){
string month(){
int year(){
varargs int minutes(int x){
varargs string season(int x){
string query_time(){
varargs int hour(int x){
mixed set_verbs(string array args){
","/lib/events/lock.c":"int GetLocked() {
int SetLocked(int x) {
string array AddKey(string key) {
varargs string array GetKeys(string unused) {
int GetLockStrength() {
int SetLockStrength(int x) {
function GetPick() {
function SetPick(function f) {
mixed CanLock(object who, string id) {
varargs mixed eventUnlock(object who, mixed arg1, mixed arg2) {
mixed direct_lock_obj_with_obj(object target, object key, string id) {
mixed direct_pick_str_on_obj(string str, object target, string str2,
mixed direct_pick_str_on_obj_with_obj(string str, object target, object tool,
mixed direct_unlock_obj_with_obj(object target, object key, string id) {
mixed direct_wizlock_obj(){ return 1; }
mixed direct_wizunlock_obj(){ return 1; }
varargs mixed eventLock(object who, mixed arg1, mixed arg2) {
mixed CanPick(object who, string id) {
varargs mixed CanUnlock(object who, string id, object key) {
varargs mixed eventPick(object who, string id, object tool) {
varargs string array SetKeys(mixed array args...) {
string array GetSave() {
","/verbs/items/use.c":"static void create() {
mixed can_use_obj_to_str(string str) { return 1; }
mixed do_use_obj_to_str(object ob, string str) {
","/secure/sefun/values.c":"mixed convert_value(string val) {
int round(string f){
","/secure/sefun/path_file.c":"mixed array path_file(mixed full_path) {
","/verbs/players/befriend.c":"static void create() {
mixed can_befriend_liv() { return 1; }
mixed do_befriend_liv(object ob) {
","/spells/fireball.c":"static void create() {
","/secure/lib/bboard.c":"void create() {
string GetExternalDesc() {
void init() {
int cmd_remove(string str) {
static private int valid_edit(string author) {
int cmd_post(string str) {
static void begin_post(string cmd, string subj, string file, function f) {
void continue_post(string subj, string file) {
void end_post(string subj, string mail) {
int cmd_read(string str) {
int cmd_followup_and_respond(string str) {
void continue_followup(mapping post, string subj, string file) {
void continue_mail(mapping post, string subj, string file) {
static void check_include_text(string ans, string subj, string file, mapping
int cmd_edit(string str) {
void end_edit(string subj, int num) {
void set_board_id(string str) { __BoardID = str; }
string query_board_id() { return __BoardID; }
string query_board_time(int x) {
","/lib/events/buy.c":"mixed CanSell(object who, string what) {
int direct_buy_str_from_liv(string str) {
","/lib/steal.c":"static void create() {
mixed CanSteal(object who) {
mixed SetPreventSteal(mixed val) { return (PreventSteal = val); }
mixed GetPreventSteal() { return PreventSteal; }
mixed direct_steal_obj_from_liv() { return CanSteal(this_player()); }
","/lib/events/smell.c":"mapping GetSmellMap(){
varargs mixed SetSmell(mixed array args...) {
mapping RemoveSmell(string item) {
mixed direct_smell_obj() {
mixed direct_smell_str_word_obj(string str) {
string array GetSmells() {
varargs mixed eventSmell(object who, string str) {
","/lib/fuel.c":"static void create() {
varargs string GetLong(string val) {
mixed eventDecreaseFuel(int x) {
mixed eventRefuel(int x) {
int GetFuelAmount() {
static int SetFuelAmount(int x) {
string GetFuelType() {
int GetMaxFuel() {
static int SetMaxFuel(int x) {
int GetRefuelable() {
static int SetRefuelable(int x) {
static string SetFuelType(string str) {
","/verbs/builders/createfix.c":"static void create() {
mixed can_createfix_obj(string str) {
mixed can_createfix_word(string str) { return can_createfix_obj(\"foo\"); }
mixed do_createfix_obj(object ob) {
mixed do_createfix_word(string wrd) {
","/verbs/creators/wizunlock.c":"static void create() {
mixed can_wizunlock_obj(string str) {
mixed do_wizunlock_obj(object ob){
","/lib/race.c":"void NewBody(string race) {
static void heart_beat() {
string GetRace() { return Race; }
static void create() {
int GetCarriedMass() { return 0; }
int GetMaxCarry() {
varargs string SetRace(string race, mixed extra) {
varargs int eventDie(mixed agent) {
int GetAlcohol() { return body::GetAlcohol(); }
string GetResistance(int type) { return genetics::GetResistance(type); }
int GetHeartRate() {
int GetHealRate() {
varargs int GetMaxHealthPoints(string limb) {
int GetMaxMagicPoints() {
float GetMaxStaminaPoints() {
varargs void SetStat(string stat, int level, int classes) {
int GetStatLevel(string stat) { return genetics::GetStatLevel(stat); }
mixed CanDrink(object ob) {
string GetGender() { return Gender; }
mixed CanEat(object ob) {
mixed eventDrink(object ob) {
mixed eventEat(object ob) {
string SetGender(string gender) { return (Gender = gender); }
int GetLuck() {
int GetMobility() {
string GetTown() { return Town; }
string SetTown(string str) { return (Town = str); }
","/lib/std/armor.c":"int eventReceiveDamage(object agent, int type, int amt, int i, mixed array l) {
void eventDeteriorate(int type) {
string GetItemCondition() {
string array GetSave() {
int eventMove(mixed dest) {
mixed eventEquip(object who, string array limbs) {
varargs mixed eventUnequip(object who) {
mixed CanEquip(object who, string array limbs) {
static void create() {
static int Destruct() {
varargs string GetExternalDesc(){
mixed eventShow(object who, string component) {
static mixed array AddSave(mixed array vars) {
mixed CanSteal(object who) {
string array GetRestrictLimbs() {
int SetRetainOnDeath(int x ) { return (RetainOnDeath = x); }
mixed CanRepair(object who) {
int GetRetainOnDeath() { return RetainOnDeath; }
string GetEquippedShort() {
varargs mixed eventRepair(object who, int strength, int type) {
varargs string GetEquippedDescription(object who) {
int GetFingers() {
void init() {
string array SetRestrictLimbs(string array limbs) {
int SetProtection(int type, int amount) {
int GetMaxProtection(int type) {
int SetFingers(int x) {
int GetProtection(int type) {
int SetAC(int i){
mixed GetWear() {
mixed SetWear(mixed val) {
int restrict(mixed arg){
","/lib/props/move.c":"object GetLastEnvironment() {
int eventMove(mixed dest) {
","/lib/std/limb.c":"string GetShort() {
int CanReceive(object ob) {
void create(){
string GetItemCondition(){
int Destruct() {
int GetSaveString() {
void init(){
string GetRace() {
void SetLimb(string limb, string owner, string race) {
string GetLimb() {
int eventDecay() {
string GetOwner() {
int SetDecayLife(int x) {
int GetDecayLife() {
","/lib/bboard.c":"void create() {
string GetExternalDesc() {
void init() {
int cmd_remove(string str) {
static private int valid_edit(string author) {
int cmd_post(string str) {
static void begin_post(string cmd, string subj, string file, function f) {
void continue_post(string subj, string file) {
void end_post(string subj, string mail) {
int cmd_read(string str) {
int cmd_followup_and_respond(string str) {
void continue_followup(mapping post, string subj, string file) {
void continue_mail(mapping post, string subj, string file) {
static void check_include_text(string ans, string subj, string file, mapping
int cmd_edit(string str) {
void end_edit(string subj, int num) {
void set_board_id(string str) { __BoardID = str; }
string query_board_id() { return __BoardID; }
string query_board_time(int x) {
","/spells/missile.c":"static void create() {
","/lib/detect.c":"mixed eventDetect(object who, string str, int ability) {
int direct_detect_wrd_in_obj(string word) {
","/secure/sefun/pointers.c":"int telnet_privp(mixed guy) {
int high_mortalp(object ob) {
int ambassadorp(object ob) {
int archp(object ob) {
varargs int creatorp(object ob) {
int hiddenp(object ob) {
int leaderp(object ob) {
varargs int newbiep(object ob) {
varargs int playerp(object ob) {
int imud_privp(mixed guy) {
int securep(mixed guy) {
int assistp(mixed guy) {
int elderp(object ob) {
int testp(object ob) {
varargs int wizardp(object ob){
int adminp(object ob){
int snooperp(mixed guy) {
int builderp(object ob) {
varargs int estatep(object ob){
int councilp(object ob) {
int avatarp(object ob) {
","/lib/events/fall.c":"mixed eventFall() {
","/secure/sefun/query_invis.c":"varargs int query_invis(object lookee, object looker) {
","/secure/sefun/identify.c":"varargs string identify( mixed a )
","/secure/sefun/english.c":"string array explode_list(string list) {
string possessive_noun(mixed val) {
varargs string add_article(string str, int def) {
string cardinal(int x) {
varargs string conjunction(mixed expressions, string coordinator) {
string consolidate(int x, string str) {
varargs string item_list(mixed array items...) {
string nominative(mixed val) {
string objective(mixed val) {
string remove_article(string str) {
string strip_article(mixed val) {
string match_command(string verb){
string reflexive(mixed val) { return sprintf(\"%sself\", objective(val)); }
","/verbs/rooms/stop.c":"static void create() {
string GetHelp(string str) {
mixed do_stop_str(string str) {
mixed can_stop_str(string str) {
","/secure/sefun/messaging.c":"string create_message(int pov, string array verb, string message,
void send_messages(mixed verb, string message, object subject, mixed targets,
","/verbs/items/close.c":"static void create() {
mixed can_close_obj(string verb) {
varargs mixed do_close_obj(object ob, mixed array args...) {
","/lib/match.c":"mixed eventStrike(object who) {
mixed direct_strike_obj() {
int GetStrikeChance() {
static int SetStrikeChance(int x) {
","/lib/living.c":"int CanCarry(int amount) { return carry::CanCarry(amount); }
int AddCarriedMass(int x) { return carry::AddCarriedMass(x); }
int GetCarriedMass() {
int GetMaxCarry() { return combat::GetMaxCarry(); }
static void create() {
mixed direct_ride_str(){
int is_living() { return 1; }
varargs mixed eventShow(object who, string str) {
int eventFollow(object dest, int followChance) {
mixed direct_ride_word_str(){
mixed direct_mount_liv(){
mixed direct_dismount_liv(){
mixed direct_dismount_from_liv(){
int inventory_accessible() { return 1; }
varargs int GetMaxHealthPoints(string limb){
int SetDead(int i){
int direct_follow_liv() { return 1; }
int direct_lead_liv() { return 1; }
int direct_evade_liv() { return 1; }
mixed direct_give_liv_obj() {
mixed indirect_give_obj_liv(object item) {
mixed indirect_give_obs_to_liv(object array items) {
mixed indirect_give_obs_liv(object array items) {
mixed direct_backstab_liv() {
mixed direct_heal_str_of_liv(string limb) {
mixed direct_remedy_str_of_liv(string limb) {
mixed direct_regen_str_on_liv(string limb) {
mixed direct_teleport_to_liv() {
mixed direct_portal_to_liv() {
mixed direct_resurrect_liv() {
mixed direct_scry_liv() {
mixed indirect_zap_liv() { return 1; }
mixed indirect_pulsecheck_liv() { return 1; }
int direct_rockwhip_liv() { return CanReceiveMagic(1, \"rockwhip\"); }
int direct_acidspray_liv() { return CanReceiveMagic(1, \"acidspray\"); }
int direct_annihilate_at_liv() { return CanReceiveMagic(1, \"annihilate\"); }
int direct_annihilate_liv() { return CanReceiveMagic(1, \"annihilate\"); }
int direct_arrow_liv() { return CanReceiveMagic(1, \"arrow\"); }
int direct_arrow_at_liv() { return CanReceiveMagic(1, \"arrow\"); }
int direct_blades_at_liv() { return CanReceiveMagic(1, \"blades\"); }
int direct_blades_liv() { return CanReceiveMagic(1, \"blades\"); }
int direct_corrupt_liv() { return CanReceiveMagic(1, \"currupt\"); }
int direct_demonclaw_liv() { return CanReceiveMagic(1, \"demonclaw\"); }
int direct_dispel_liv() { return CanReceiveMagic(1, \"dispel\"); }
int direct_drain_at_liv() { return CanReceiveMagic(1, \"drain\"); }
int direct_drain_liv() { return CanReceiveMagic(1, \"drain\"); }
int direct_fireball_at_liv() { return CanReceiveMagic(1, \"fireball\"); }
int direct_fireball_liv() { return CanReceiveMagic(1, \"fireball\"); }
int direct_frigidus_at_liv() { return CanReceiveMagic(1, \"frigidus\"); }
int direct_frigidus_liv() { return CanReceiveMagic(1, \"frigidus\"); }
int direct_holylight_liv() { return CanReceiveMagic(1, \"holylight\"); }
int direct_missile_liv() { return CanReceiveMagic(1, \"missile\"); }
int direct_missile_at_liv() { return CanReceiveMagic(1, \"missile\"); }
int direct_shock_liv() { return CanReceiveMagic(1, \"shock\"); }
int direct_palm_liv() { return CanReceiveMagic(1, \"palm\"); }
int direct_immolate_liv() { return CanReceiveMagic(1, \"immolate\"); }
int direct_gale_liv() { return CanReceiveMagic(1, \"gale\"); }
int direct_aura_liv() { return CanReceiveMagic(0, \"aura\"); }
int direct_soulseek_liv() { return CanReceiveMagic(0, \"soulseek\"); }
int direct_cloak_wrd() { return CanReceiveMagic(0, \"cloak\"); }
int direct_stealth_wrd() { return CanReceiveMagic(0, \"stealth\"); }
int direct_backlash_for_liv() { return CanReceiveMagic(0, \"backlash\"); }
int direct_backlash_for_liv_against_wrd() { return CanReceiveMagic(0, \"backlash\"); }
int direct_balance_obj_to_obj() { return CanReceiveMagic(0, \"balance\"); }
int direct_buffer_liv() { return CanReceiveMagic(0, \"buffer\"); }
int direct_calm_liv() { return CanReceiveMagic(0, \"calm\"); }
int direct_cleanse_liv() { return CanReceiveMagic(0, \"cleanse\"); }
int direct_convert_liv() { return CanReceiveMagic(0, \"convert\"); }
int direct_shield_liv() { return CanReceiveMagic(0, \"shield\"); }
int direct_veil_liv_against_wrd_wrd() { return CanReceiveMagic(0, \"veil\"); }
int direct_remedy_liv() { return CanReceiveMagic(0, \"remedy\"); }
int direct_ward_liv_against_wrd() { return CanReceiveMagic(0, \"ward\"); }
int direct_command_str_to_str() { return CanReceiveMagic(0, \"command\"); }
int direct_gaze() { return CanReceiveMagic(0, \"gaze\"); }
int direct_send_str_to_str() { return CanReceiveMagic(0, \"send\"); }
int direct_connect_str() { return CanReceiveMagic(0, \"connect\"); }
int direct_heal_liv() { return CanReceiveMagic(0, \"heal\"); }
int direct_mend_liv() { return CanReceiveMagic(0, \"mend\"); }
int direct_refresh_liv() { return CanReceiveMagic(0, \"refresh\"); }
int direct_rejuvinate_liv() { return CanReceiveMagic(0, \"rejuvinate\"); }
int direct_farsight_liv() { return 1; }
int direct_bump_liv() { return 1; }
int direct_marry_liv_to_liv() { return 1; }
int direct_party_wrd_liv() { return 1; }
int direct_challenge_liv() { return 1; }
int direct_ignore_liv() { return 1; }
int indirect_throw_obj_at_obj() { return 1; }
int indirect_toss_obj_at_obj() { return 1; }
int indirect_buy_str_from_liv() { return 1; }
int indirect_sell_obj_to_liv() { return 1; }
int indirect_marry_liv_to_liv() { return 1; }
int GetNoCondition(){
mixed indirect_give_obj_to_liv(object item) {
mixed direct_give_liv_wrd_wrd(object targ, string num, string curr) {
mixed direct_give_wrd_wrd_to_liv(string num, string curr) {
mixed direct_steal_wrd_from_liv(string wrd) {
mixed indirect_steal_obj_from_liv(object item, mixed args...) {
varargs mixed CanCastMagic(int hostile, string spell) {
int SetPK(int x) { return (isPK = x); }
int GetPK() { return isPK; }
varargs mixed CanReceiveHealing(object who, string limb) {
mixed direct_verb_rule(string verb) {
mixed direct_attack_liv(){
mixed direct_attack_only_liv(){
mixed direct_attack_liv_only(){
mixed direct_target_liv(){
mixed direct_target_only_liv(){
mixed direct_target_liv_only(){
mixed direct_bite_liv() {
mixed direct_capture_liv_word_obj() {
mixed direct_pray_for_str_against_str_for_liv() {
mixed direct_cast_str_on_obj() {
mixed direct_cast_str_against_str() {
mixed direct_cast_str_on_str_of_obj() {
mixed direct_free_liv_from_obj() {
mixed direct_resurrect_obj() { return 1; }
mixed indirect_resurrect_obj() { return 1; }
mixed direct_get_obj() {
mixed direct_get_obj_from_obj() {
mixed direct_give_liv_obs() {
mixed CanAttack(){
mixed eventCure(object who, int amount, string type) {
mixed eventInfect(object germ) {
varargs mixed eventSteal(object who, mixed what, object target, int skill) {
int GetNonCurrencyMass(){
mixed SetAttackable(mixed foo){
mixed GetAttackable(){
int SetNoCondition(int foo){
","/verbs/items/shoot.c":"static void create() {
mixed can_shoot_obj_with_obj(mixed target,mixed shooter) {
mixed can_shoot_obj_at_obj(mixed shooter,mixed target) {
mixed can_shoot_obj_at_str(object shooter, string target) {
varargs mixed do_shoot_obj_at_obj(mixed shooter,mixed target) {
varargs mixed do_shoot_obj_at_str(object shooter, string target) {
varargs mixed do_shoot_obj_with_obj(mixed target,mixed shooter) {
","/lib/events/look_in.c":"string GetInternalDesc() {
mixed direct_look_in_obj() {
string SetInternalDesc(string str) {
int GetOpacity() {
int SetOpacity(int x) {
varargs mixed CanShowInterior(object who, object target) {
varargs mixed eventShowInterior(object who, object target) {
mixed direct_look_inside_obj() {
mixed indirect_look_at_obj_word_obj(object target) {
mixed inventory_visible() {
","/verbs/players/dismount.c":"static void create() {
mixed can_dismount_liv() {
mixed can_dismount_from_liv() {
mixed do_dismount_liv(object ob) {
mixed do_dismount_from_liv(object ob) {
","/lib/virtual/virt_std.c":"object compile_object(string fname) {
mixed CreateVirtualObject(string fname) {
","/secure/lib/net/oob.c":"static void create(mixed alpha, mixed beta, mixed gamma, mixed delta){
int eventRead(mixed data) {
void heart_beat(){
static private void validate() {
void write_data(mixed arg){
void eventID(string str){
int eventDumpFiles(){
","/lib/comp/seal.c":"varargs mixed CanOpen(object who, string id) {
varargs mixed eventOpen(object who, object tool) {
mixed CanLock(object who, string id) {
void create() {
","/verbs/items/bait.c":"static void create() {
mixed can_bait_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_bait_obj_with_obj(object pole, object bait) {
","/lib/std/bot_corpse.c":"void create() {
int eventDecay() {
","/lib/events/poison.c":"int AddPoison(int x) {
int GetPoison() {
int SetPoison(int x) {
mixed CanPoison(object who) {
mixed eventPoison(object who, object agent, int strength) {
mixed direct_poison_obj_with_obj() {
string array GetSave() {
","/secure/sefun/strings.c":"string web_translate(string str){
varargs string arrange_string(string str, int x) {
varargs mixed convert_string(string str, int flag) {
varargs string center(string str, int x) {
string last_string_element(string str, string delimiter){
string replace_line(string file, string array params, string repl){
int reverse_memberp(string primary, string array sub){
int starts_with_arr(string primary, string array sub){
string reverse_string(string str) {
varargs string generate_tmp(mixed arg){
string newline_trim(string str) {
varargs mixed read_matching_line(string target, string substring, int i, string exclude){
int basic_punctuationp(mixed arg){
int check_string_length(string str){
varargs mixed print_long_string(object who, string str, int catted){
varargs string array chunk_string(string str, int width){
varargs mixed random_numbers(int n, int integer){
string convert_newline(string str){
int clean_newline_file(string str){
varargs mixed remove_matching_line(string target, string substring, int i, string exclude){
varargs string first_string_element(string str, string delimiter, int stripfirst){
varargs mixed replace_matching_line(string target, string substring, string replace, int i, string exclude){
varargs string wrap(string str, int x) {
string truncate(string str, int i){
string path_prefix(string str){
int grepp(string primary, string sub){
varargs mixed homedir(mixed ob, int cre){
int numericp(mixed arg){
string append_line(string file, mixed params, string repl){
int alphap(mixed arg){
varargs mixed alpha_crypt(mixed arg1, mixed arg2){
string alpha_strip(mixed arg){
string morse(string msg) {
string unmorse(string msg) {
string unpinkfish(string str){
string repinkfish(string str){
string dbz_colors(string str, int annoying){
int query_common_ascii(string str){
string to_html(string str) {
string evaluate_description(mixed val) {
string space_trim(string str) {
","/lib/persist.c":"int SetRetain(int i){
int GetRetain(){
static mixed array AddSave(mixed array vars) { return (Saved += vars); }
static int eventConvertObject(mixed val, int recurse) {
int eventLoadObject(mixed val, int recurse) {
string GetSaveString() {
static int SetSaveRecurse(int flag) { return (SaveRecurse = flag); }
","/lib/clip.c":"int CanReceive(object ob){
int CanRelease(object ob){
void create(){
int MinusAmmo(int i) { ammo -= i; return 1; }
int SetMaxAmmo(int i) { MaxAmmo=i; return 1; }
string GetPistolType() { return pistoltype; }
int PlusAmmo(int i) { ammo += i; return 1; }
int SetCaliber(int x) { caliber=x; return 1; }
int SetMillimeter(int x){ millimeter=x; return 1; }
int SetPistolType(string str) {pistoltype=str; return 1; }
int SetAmmoType(string str) {ammotype=str; return 1; }
int GetCaliber() { return caliber; }
int GetMillimeter() { return millimeter; }
string GetAmmoType() { return ammotype; }
","/secure/sefun/mappings.c":"mixed mapping_member(mapping Map, string sub){
string flat_map(mapping mp) {
int mgrepp(string primary, string array sub){
varargs mapping add_maps(mapping FirstMapping,mapping  SecondMapping, int preference){
","/secure/sefun/base_name.c":"string base_name(mixed val) {
","/verbs/items/show.c":"static void create() {
mixed can_show_obj_liv(mixed arg1, mixed arg2) {
mixed can_show_liv_obj() {
mixed do_show_obj_to_liv(object what, object target) {
mixed do_show_obj_liv(object what, object target) {
mixed can_show_obj_to_liv(mixed arg1, mixed arg2) {
mixed do_show_liv_obj(object target, object what) {
","/secure/sefun/security.c":"int member_group(mixed who, string grp) {
string file_privs(string file) {
int domain_admin(mixed pretender, string domain){
mixed unguarded(function f) { return (mixed)master()->apply_unguarded(f); }
int check_privs(mixed pretender, mixed target){
int check_read(string file){
","/secure/sefun/light.c":"varargs int effective_light(object ob) {
varargs int total_light(object ob) {
varargs int visibility(object ob) {
mixed check_light(object who) {
","/verbs/creators/createfix.c":"static void create() {
mixed can_createfix_obj(string str) {
mixed can_createfix_word(string str) { return can_createfix_obj(\"foo\"); }
mixed do_createfix_obj(object ob) {
mixed do_createfix_word(string wrd) {
","/verbs/common/ask.c":"static void create() {
mixed can_ask_liv_to_str(string str) { return 1; }
mixed can_ask_str(string str) {
mixed do_ask_str(string str) {
mixed can_ask_liv_for_str(string str) { return 1; }
mixed can_ask_liv_str(string str) {
mixed do_ask_liv_to_str(object ob, string str) {
mixed do_ask_liv_for_str(object ob, string str) {
mixed do_ask_liv_str(object ob, string str) {
","/verbs/builders/dest.c":"static void create() {
mixed can_dest_obj(string str) {
mixed do_dest_obs(object array obs) {
mixed do_dest_obj(object ob){
mixed can_dest_str(){
mixed do_dest_str(string str){
","/lib/events/bait.c":"string array GetSave() {
int eventBait(object who, object bait) {
int AddBait(int x) {
int GetBait() {
int SetBait(int x) {
mixed CanBait(object who) {
mixed direct_bait_obj_with_obj() {
","/verbs/players/vote.c":"static void create() {
mixed do_vote_for_str( string str ) {
mixed can_vote_for_str() {
","/verbs/common/shout.c":"static void create() {
string GetHelp(string str) {
mixed can_shout() { return \"Shout what?\"; }
mixed can_shout_str(string str) {
mixed can_shout_in_wrd_str(string lang, string str) {
mixed do_shout() { return 1; }
mixed do_shout_str(string str) {
mixed do_shout_in_wrd_str(string lang, string str) {
","/lib/std/furnace.c":"int CanReceive(object ob){
void create() {
void heart_beat(){
void init(){
","/verbs/items/scratch.c":"static void create() {
mixed do_scratch_on_obj(object target) {
mixed can_scratch_on_obj() {
varargs mixed do_scratch_on_str_on_obj(string thing, object target) {
mixed can_scratch_obj() {
mixed can_scratch_str_on_obj() {
mixed can_scratch_on_str_on_obj() {
varargs mixed do_scratch_str_on_obj(string thing, object target) {
mixed do_scratch_obj(object target) {
","/lib/nmsh.c":"static void create() {
string GetKeyName() { return 0; }
nomask static int cmd_unalias(string str) {
nomask static int cmd_pwd() {
nomask static int cmd_work(string str) {
static string user_names(object ob) {
int Setup() {
string get_path() { return query_cwd(); }
varargs int GetInvis() { return 0; }
string process_input(string str) {
nomask static int cmd_cd(string str) {
nomask static int cmd_nickname(string str) {
nomask static int cmd_nmsh(string str) {
nomask static int cmd_pushd(string str) {
nomask static int cmd_popd() {
nomask string write_prompt() {
nomask static void process_request(string request, string xtra) {
static int request_vis(object ob) {
private static int set_cwd(string str) {
nomask private static string do_nickname(string str) {
nomask private static string do_alias(string str) {
nomask static string replace_nickname(string str) {
void reset_prompt() {
string GetPrompt() { return DEFAULT_PROMPT; }
int query_mp() { return 1; }
int query_max_mp() { return 10; }
int query_hp() { return 1; }
int query_max_hp() { return 10; }
int query_sp() { return 1; }
int query_max_sp() { return 10; }
nomask static int cmd_alias(string str) {
string query_prev_wd() { return PreviousWorkingDirectory; }
string SetPrompt(string str) { return Prompt = str; }
","/lib/std/vendor.c":"static void create() {
int CanCarry(int amount) { return 1; }
mixed eventBuy(object who, object array obs) {
int indirect_sell_obj_to_liv() { return 1; }
mixed eventAsk(object who, string str) {
int GetValue(object ob, object who) {
int GetVendorType() { return VendorType; }
int SetVendorType(int x) { return (VendorType = x); }
mixed CanSell(object who, string what) {
string SetLocalCurrency(string str) { return (LocalCurrency = str); }
string SetStorageRoom(string room) { return (StorageRoom = room); }
int SetMaxItems(int x) { return (MaxItems = x); }
mixed eventSell(object who, mixed what) {
string GetLocalCurrency() { return LocalCurrency; }
mixed direct_buy_str_from_liv(string str) {
int cmdBrowse(object who, string args) {
int cmdShow(object who, string args) {
int cmdPrice(object who, string args) {
int cmdAppraise(object who, string args) {
int GetCost(object ob, object who) {
string GetStorageRoom() { return StorageRoom; }
int GetMaxItems() { return MaxItems; }
int indirect_sell_obs_to_liv() { return 1; }
mixed CanBuy(object who, object array obs) {
","/lib/messages.c":"static void create() {
string GetName() { return 0; }
varargs string GetMessage(string msg, mixed arg) {
string SetMessage(string msg, string str) {
mapping GetMessages() { return copy(Messages); }
","/lib/props/save.c":"int DumpVars(string file){
","/secure/sefun/query_time_of_day.c":"string query_time_of_day() { return SEASONS_D->GetTimeOfDay(); }
","/secure/sefun/convert_name.c":"string convert_name(string str) {
","/lib/blank_pile.c":"string GetShort() {
static void create() {
string array GetId() {
","/lib/events/manipulate.c":"varargs mixed CanManipulate(object who, string component) {
varargs mixed eventManipulate(object who, string component) {
string array GetManipulates() {
mapping RemoveManipulate(string item) {
varargs mapping SetManipulate(mixed key, mixed desc) {
mixed direct_move_obj(object target) {
mixed direct_move_str_on_obj(string str, object target) {
","/verbs/items/extinguish.c":"static void create() {
mixed do_extinguish_obj(object target) {
mixed do_extinguish_obs(mixed array targs) {
mixed can_extinguish_obj() {
","/verbs/items/pick.c":"static void create() {
mixed can_pick_str_on_obj_with_obj(string str) {
mixed do_pick_str_on_obj(string wrd, object ob, mixed array args...) {
mixed do_pick_str_on_obj_with_obj(string wrd, object ob, object tool,
mixed can_pick_obj() {
mixed do_pick_obj(object ob, string id) {
","/secure/sefun/duplicates.c":"object array get_dupes(object ob, object where){
int query_dupes(object ob1,object ob2){
","/lib/lvs/abilities.c":"static void create() {
string array GetPrimarySkills() {
int GetBaseSkillLevel(string skill) {
int ResetLevel() {
int GetMaxSkillPoints(string skill, int level) {
string array GetSkills() {
int SetLevel(int x) {
mapping GetSkillsMap(){
varargs void SetSkill(string skill, int level, mixed cls) {
void RemoveSkill(string skill) {
void AddSkillBonus(string skill, mixed f) {
varargs void RemoveSkillBonus(string skill, object ob) {
int GetSkillBonus(string skill) {
int GetSkillClass(string skill) {
int GetLevel() {
int AddSkillPoints(string name, int x) {
int GetSkillLevel(string skill) {
","/secure/lib/file.c":"int eventDestruct() {
varargs static void create(string file) {
mixed eventWrite(mixed val) {
int GetSize() {
mixed eventDelete() {
int isDirectory() {
int isFile() {
int isTemporary() {
string GetCharacters(int start, int length) {
string array GetDirectoryList() {
mixed array GetDirectoryShort() {
string GetFileName() {
int GetLastModified() {
string GetLine() {
varargs string GetLines(int arg1, int arg2) {
string GetString() {
mixed eventCreateDirectory() {
varargs mixed eventRename(string name, int clobber) {
","/lib/std/item.c":"void eventDeteriorate(int type) {
string GetItemCondition() {
string array GetSave() {
int eventMove(mixed dest) {
static void create() {
varargs mixed direct_get_obj_from_obj(object item, mixed gamma,mixed alfa, mixed beta, mixed epsilon){
static int Destruct() {
string GetExternalDesc() {
mixed eventShow(object who, string component) {
static mixed array AddSave(mixed array vars) {
mixed CanSteal(object who) {
string SetQuestId(string name){
string GetQuestId(){
int SetRetainOnDeath(int x) {
mixed CanRepair(object who) {
varargs mixed CanThrow(object who, object target) {
void eventRemoveBlessing() {
mixed direct_balance_obj_to_obj() {
int GetRetainOnDeath() {
int eventBless(int amount, int time) {
mixed eventThrow(object who, object target) {
varargs mixed eventRepair(object who, int strength, int type) {
mixed indirect_balance_obj_to_obj() {
mixed direct_compare_obj_to_obj() {
mixed indirect_compare_obj_to_obj() {
mixed direct_judge_obj_to_obj() {
mixed indirect_judge_obj_to_obj() {
mixed direct_use_obj_to_str() {
mixed direct_throw_obj_word_obj() {
mixed indirect_throw_obj_into_obj() {
int direct_sacrifice_obj_to_str(string deus) {
mixed direct_bless_obj() {
mixed direct_curse_obj() {
mixed direct_cast_str_on_obj() {
mixed direct_cast_str_on_str_of_obj() {
void init() { }
int SetNoCondition(int i){
","/lib/teller.c":"static void create() {
mixed GetCurrencies() { return copy(Currencies); }
string SetLocalCurrency(string str) { return (LocalCurrency = str); }
int eventBalance(object who) {
int eventWithdraw(object who, string currency, int amount) {
int cmdParse(object who, string cmd, string str) {
string GetLocalCurrency() { return LocalCurrency; }
int SetLocalFee(int x) { return (LocalFee = x); }
int SetNonLocalFee(int x) { return (NonLocalFee = x); }
int SetOpenFee(int x) { return (OpenFee = x); }
float SetExchangeFee(float x) { return (ExchangeFee = x); }
mixed SetCurrencies(mixed var) {
int GetLocalFee() { return LocalFee; }
int GetNonLocalFee() { return NonLocalFee; }
int GetExchangeFee() { return ExchangeFee; }
int GetOpenFee() { return OpenFee; }
string GetBankName() { return BankName; }
int AddSurcharge(object who, string currency, int amount) {
int eventDeposit(object who, string currency, int amount) {
int eventExchange(object who, int amount, string str1, string str2) {
int eventOpenAccount(object who) {
mixed CanBank(object who) {
string SetBankName(string str) { return (BankName = str); }
","/secure/sefun/reaper.c":"varargs void reap_other(string s1){
mixed reap_list(){
","/verbs/players/sleep.c":"static void create() {
mixed can_sleep() {
mixed do_sleep() {
","/lib/shadow.c":"int eventShadow(object ob){
int eventUnshadow(){
string GetShadowedName(){
object GetShadowedObject(){
","/verbs/players/kneel.c":"static void create() {
mixed do_kneel_down() {
mixed can_kneel_down() {
mixed do_kneel_word_obj(string word, object target) {
mixed can_kneel_word_obj() {
mixed can_kneel_down_word_obj() {
mixed do_kneel_down_word_obj(string word, object target) {
","/lib/events/lock_with.c":"int GetDisableChance() {
int SetDisableChance(int x) {
int GetDisabled() {
int SetDisabled(int x) {
mixed eventLockLock(object who, object what) {
mixed eventUnlockLock(object who, object what) {
mixed indirect_lock_obj_with_obj(object target, object key, string id) {
mixed indirect_unlock_obj_with_obj(object target, object key, string id) {
mixed array GetSave() {
","/verbs/items/disarm.c":"static void create() {
varargs mixed can_disarm_obj(mixed args...) {
varargs mixed do_disarm_obj(object target) {
","/lib/remote.c":"static void create() {
string eventWriteFile(string file, string str) {
string eventReadFile(string file) {
string eventCommand(string cmd, string arg) {
","/verbs/creators/reload.c":"static void create() {
mixed can_reload_obj(string str) {
mixed can_reload_every_str(string str){
mixed can_reload_str_obj(string str) {
mixed can_reload_word(string str) {
mixed can_reload_str_word(string str, string str2) {
mixed do_reload_obj(object ob) {
mixed do_reload_str_obj(string str, object ob) {
mixed do_reload_word(string wrd) {
mixed do_reload_str_word(string wrd1, string wrd2) {
mixed do_reload_every_str(string str){
","/verbs/builders/reload.c":"static void create() {
mixed can_reload_every_str(string str){
mixed can_reload_obj(string str) {
mixed can_reload_str_obj(string str) {
mixed can_reload_word(string str) {
mixed can_reload_str_word(string str, string str2) {
mixed do_reload_obj(object ob) {
mixed do_reload_str_obj(string str, object ob) {
mixed do_reload_word(string wrd) {
mixed do_reload_str_word(string wrd1, string wrd2) {
mixed do_reload_every_str(string str){
","/lib/props/id.c":"int SetMatching(int i){
int GetMatching(){
string GetCapName() {
varargs string array SetId(mixed val...) {
string GetKeyName() {
string GetName() {
string array parse_command_id_list() {
string array parse_command_plural_id_list() {
string array parse_command_adjectiv_id_list() {
string SetKeyName(string nom) {
varargs string array SetAdjectives(mixed adjs...) {
string SetCapName(string str) {
varargs void eventAnnounceCanonicalId(object env){
string array GetCanonicalId() {
varargs void ReceiveCanonicalId(mixed foo, int leaving){
string array GetId() {
string array GetAdjectives() {
","/secure/sefun/copy.c":"mixed copy(mixed val) {
","/secure/lib/net/server.c":"int eventDestruct() {
varargs static void create(int port, int type, string socket_obj) {
varargs int eventWrite(object owner, mixed val, int close) {
static void eventSocketError(string msg, int code) {
static int eventClose(mixed sock) {
static int SetSocketType(int x ) {
static int SetDestructOnClose(int x) {
int eventCreateSocket(int port) {
int eventShutdown() {
int GetDestructOnClose() {
int GetSocketType() {
static void eventServerReadCallback(int fd, mixed val) {
static void eventServerAbortCallback(int fd) {
static void eventServerListenCallback(int fd) {
static void eventNewConnection(object socket) {
static void eventServerWriteCallback(int fd) {
","/secure/sefun/economy.c":"float currency_inflation(string type) {
float currency_rate(string type) {
int currency_mass(int x, string type) {
int currency_value(int x, string str) {
string array mud_currencies() { return (string array )ECONOMY_D->__QueryCurrencies(); }
string query_base_currency(){
int query_base_rate(){
int query_player_money(object who) {
int query_base_value(string currency, int amount){
int valid_currency(string str){
int query_value(int amount,string from_currency, string to_currency){
","/lib/props/clean.c":"int clean_up(int ref_exists) {
int eventDestruct() {
int GetNoClean() {
static int SetNoClean(int x) {
","/verbs/players/target.c":"static void create() {
mixed can_target_liv(object target) {
mixed do_target_liv(object target) {
varargs mixed do_target_lvs(mixed array targets, int exclusive) {
mixed can_target_only_liv(object target){
mixed can_target_liv_only(object target){
mixed do_target_only_liv(object target){
mixed do_target_liv_only(object target){
","/verbs/rooms/enter.c":"static void create() {
mixed can_enter_into_obj() {
mixed can_enter_obj() {
mixed do_enter_obj(object targ, string what) {
mixed do_enter_into_obj(object targ, string what) {
","/lib/lead.c":"static void create() {
object array GetFollowers() { return filter(keys(Followers), (: $1 :)); }
varargs mixed CanLead(object ob) {
mixed direct_lead_liv() {
mixed direct_evade_liv() {
object array AddFollower(object follower) {
object array RemoveFollower(object follower) {
int SetFollowed(object follower, int followed) {
int GetFollowed(object follower) {
int AddFollowBonus(object follower, int bonus) {
int GetFollowBonus(object follower) {
varargs mixed CanEvade(object ob) {
int eventMoveFollowers(object dest) {
int eventEvade(object ob) {
","/verbs/items/boobytrap.c":"static void create() {
mixed can_boobytrap_obj_with_obj(string verb) {
varargs mixed do_boobytrap_obj_with_obj(object target, object key, mixed array words...) {
","/secure/sefun/interface.c":"string strip_colours(string str){
string strip_colors(string str){
string strip_colors_old(string str){
","/verbs/items/equate.c":"static void create() {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
mixed can_judge_obj_to_obj() {
","/secure/sefun/time.c":"int query_date(int x) { return (int)SEASONS_D->GetDay(x); }
string query_day_name(int x) { return (string)SEASONS_D->GetDayName(x); }
int query_minutes(int x) { return (int)SEASONS_D->GetMinutes(x); }
string query_season(int x) { return (string)SEASONS_D->GetSeason(x); }
varargs string time_elapsed(int arg1, int arg2){
int query_hour(int x) { return (int)SEASONS_D->GetHour(x); }
string query_month(int x) { return (string)SEASONS_D->GetMonth(x); }
int query_night() { return ((string)SEASONS_D->GetTimeOfDay() == \"night\"); }
int query_year(int x) { return (int)SEASONS_D->GetYear(x); }
function time_event(string tod, function f) {
","/verbs/common/speak.c":"static void create() {
string GetHelp(string str) {
mixed can_speak_in_wrd(string str) {
mixed do_speak() { return 1; }
mixed can_speak_str(string str) {
mixed can_speak_in_wrd_str(string lang, string str) {
mixed do_speak_in_wrd(string str) {
mixed do_speak_str(string str) {
mixed do_speak_in_wrd_str(string lang, string str) {
","/verbs/rooms/jump.c":"static void create() {
varargs mixed do_jump_off_of(object ob, mixed array args...) {
mixed can_jump_word_obj() {
mixed can_jump_word_word_obj() {
varargs mixed do_jump_in_obj(object ob, mixed array args...) {
varargs mixed do_jump_into_obj(object ob, mixed array args...) {
varargs mixed do_jump_off_obj(object ob, mixed array args...) {
varargs mixed do_jump_from_obj(object ob, mixed array args...) {
varargs mixed do_jump_through_obj(object ob, mixed array args...) {
varargs mixed do_jump_across_obj(object ob, mixed array args...) {
varargs mixed do_jump_over_obj(object ob, mixed array args...) {
varargs mixed do_jump_onto_obj(object ob, mixed array args...) {
varargs mixed do_jump_on_obj(object ob, mixed array args...) {
","/lib/enter.c":"static void create() {
mixed direct_close_obj(object target) {
mixed direct_open_obj(object target) {
mixed direct_open_obj_with_obj(object target, object ob) {
string ResolveObjectName(string file) {
mixed eventClose(object who) {
varargs mixed eventOpen(object who, object tool) {
mixed eventUnlock(object who, object key) {
varargs mixed direct_lock_obj_with_obj(object target, object tool) {
mixed direct_pick_str_on_obj(string str, object ob, string id1, string id2) {
mixed direct_pick_str_on_obj_with_obj(string str, object ob, object w,
mixed direct_unlock_obj_with_obj(object target, object w) {
mixed direct_wizlock_obj(){ return 1; }
mixed direct_wizunlock_obj(){ return 1; }
varargs mixed eventLock(object who, mixed arg1, mixed arg2) {
varargs mixed eventPick(object who, string str, object tool) {
varargs void SetEnter(string dest, function pre, function post) {
string GetDoor() {
void SetDoor(string door) {
string GetEnter() {
varargs mixed eventEnter(object who, string what, string verb) {
mixed direct_enter_obj() {
mixed direct_enter_into_obj() {
","/lib/props/properties.c":"mixed GetProperty(string prop) {
mapping SetProperties(mapping props) {
mixed SetProperty(string prop, mixed val) {
mixed AddProperty(string prop, mixed val) {
mapping GetProperties() {
int RemoveProperty(string prop) {
","/lib/bonus.c":"mixed CanDrop(object who) { return 0; }
void create(){
mixed CanGet(object who) { return 0; }
int eventDestruct(){
mixed CanPut(object who) { return 0; }
mixed CanSell(object who) { return 0; }
void init(){
mapping GetStats(){
void heart_beat(){
mapping GetSkills(){
mapping SetSkills(mapping arg){
mapping SetStats(mapping arg){
mapping GetPoints(){
int SetBonusDuration(int i){
int GetBonusDuration(){
int RemoveBonuses(){
mixed CanGive(object who) { return 0; }
int SetBonuses(){
mapping SetPoints(mapping arg){
","/verbs/items/touch.c":"static void create() {
mixed can_touch_obj() {
mixed can_touch_str_word_obj() {
mixed do_touch_obj(object ob) {
mixed do_touch_str_word_obj(string str, object ob) {
","/verbs/creators/modify.c":"static void create() {
mixed can_modify_word_str(string str) { return can_modify_obj_str(\"foo\"); }
mixed do_modify_obj_str(object ob, string str) {
mixed do_modify_word_str(string wrd, string str) {
","/verbs/builders/modify.c":"static void create() {
mixed can_modify_obj_str(string str) {
mixed can_modify_word_str(string str) { return can_modify_obj_str(\"foo\"); }
mixed do_modify_obj_str(object ob, string str) {
mixed do_modify_word_str(string wrd, string str) {
","/lib/props/addstuff.c":"varargs int AddStuff(string array str, int q){
","/secure/sefun/reload.c":"varargs mixed reload(mixed ob, int recursive, int quiet){
","/lib/events/install.c":"varargs mixed eventUninstall(object what, object where){
varargs mixed eventInstall(object what, object where){
varargs mixed CanInstall(object who, object what){
varargs mixed CanUninstall(object who, object what){
int direct_install_obj(object target) {
int direct_uninstall_obj(object target) {
int direct_install_obj_word_obj(object thingus, object target){
int indirect_install_obj_word_obj(object target, object thingus){
int direct_uninstall_obj_word_obj(object thingus, object target){
int indirect_uninstall_obj_word_obj(object one, object two, object three){
","/verbs/items/eat.c":"static void create() {
void eventEat(object who, object what) {
mixed can_eat_obj() {
mixed do_eat_obj(object ob) {
","/verbs/items/steal.c":"static void create() {
static void eventSteal(object who, mixed what, object target) {
mixed can_steal_wrd_from_liv(string wrd) {
mixed can_steal_obj_from_liv() {
mixed do_steal_wrd_from_liv(string wrd, object liv) {
mixed do_steal_obj_from_liv(object item, object liv) {
mixed do_steal_obs_from_liv(mixed array res, object liv) {
","/lib/interface.c":"static void create() {
int Setup() {
int GetClient() { return Client; }
static string process_input(string str) {
varargs int eventPrint(string msg, mixed arg2, mixed arg3) {
string GetKeyName() { return 0; }
int array GetScreen() { return Screen; }
int GetBlocked(string type) { return (Blocked[\"all\"] || Blocked[type]); }
void receive_message(string msg_class, string msg) {
int eventFlushQueuedMessages(){
varargs int eventPauseMessages(int x, int exceptions){
static void terminal_type(string str) {
static void window_size(int width, int height) { SetScreen(width, height); }
static void receive_snoop(string str) { receive_message(\"snoop\", \"%\"+str); }
varargs int SetBlocked(string type, int flag) {
int SetClient(int x) {
int SetLogHarass(int x) {
int GetLogHarass() { return LogHarass; }
string SetTerminal(string terminal) {
string GetTerminal() { return Terminal; }
","/lib/props/deterioration.c":"int eventReceiveDamage(object agent, int type, int amt, int d, mixed array l) {
int GetBroken() {
int SetBroken(int x) {
int SetDamagePoints(int x) {
int GetDamagePoints() {
int GetDeterioration() {
string GetItemCondition() {
string array GetSave() {
","/lib/command.c":"string SetCommandFail(string str) {
static void create() {
int cmdDebugAll(string args) {
int eventForceQueuedCommand(string cmd){
int eventExecuteQueuedCommands(){
int eventQueueCommand(string line){
int DoneTrying(){
static string array GetCommandHist(){
string GetCurrentCommand(){
int GetMaxCommandHistSize(){
int SetMaxCommandHistSize(int i){
int SetPlayerPaused(int i){
int GetPlayerPaused(){
static int cmdAll(string args) {
int Setup() {
string array AddSearchPath(mixed val) {
string array RemoveSearchPath(mixed val) {
string array GetSearchPath() { return SearchPath; }
int GetClient() { return 0; }
string GetCommandFail() { return CommandFail; }
string GetLastCommand(){
int eventRetryCommand(string lastcmd){
int GetForced() { return Forced; }
int direct_force_liv_str() { return 1; }
int direct_force_liv_to_str() { return 1; }
static string process_input(string cmd) {
","/secure/lib/net/ftp.c":"void Destruct(){
static void create(int fd, object owner){
private void eventReadFtpData(mixed text){
nomask static int check_privs(string file, string oper) {
string GetKeyName(){ return Session->user; }
void StartService(){
private void eventCmdUser(string arg){
private void eventCmdRetr(string arg){
private void eventCmdStor(string arg){
private void eventCmdNlst(string arg){
private void eventCmdList(string arg){
private void eventCmdCdup(string arg){ eventCmdCwd(\"..\"); }
private void eventCmdQuit(string arg){
private void eventCmdType(string arg){
private void eventCmdPort(string arg){
void eventCmdNoop(string arg){
private void eventCmdDele(string arg){
private void eventCmdRnfr(string arg) {
private void eventCmdRnto(string arg) {
private void eventCmdStou(string arg){
private void eventCmdSyst(string arg) {
private void eventCmdMkd(string arg){
void eventCmdPwd(string arg){
private void eventCmdRmd(string arg) {
private string find_flags(string arg){
private string strip_flags(string arg){
string FindPrevDir( string path ) {
private void idle_time_out(){
private string GetFtpWelcomeMsg(){
string GetUniqueFileName(string arg){
private void eventDestructDataPipe(mixed f){
private void eventCmdPswd(string arg){
string RetrieveCmdCallback(object ob){
private void do_list( string arg, int ltype){
","/lib/cylinder.c":"void create(){
","/lib/events/close.c":"int GetOpen(){
int SetOpen(int x) {
mixed direct_close_obj(object target) {
mixed direct_open_obj(object target) {
mixed direct_open_obj_with_obj(object target, object tool) {
int SetClosed(int x) {
varargs mixed CanOpen(object who, object tool) {
mixed eventClose(object who) {
varargs mixed eventOpen(object who, object tool) {
varargs mixed CanClose(object who, string id) {
int inventory_visible() {
int inventory_accessible() {
int GetClosed() {
","/lib/events/shoot.c":"int direct_shoot_obj_at_obj(object shooter, object target){
int direct_shoot_obj_with_obj(object shooter, object target){
int MustWield(int i){
int eventShoot(mixed shooter, mixed target){
int CanShoot(object shooter, mixed target){
int direct_shoot_obj_at_str(object shooter, string target){
int indirect_shoot_obj_with_obj(mixed ob1,mixed ob2){
int indirect_shoot_obj_at_obj(mixed ob1,mixed ob2){
int MustCarry(int i){
","/lib/combatmsg.c":"static void eventSendMissMessages(object target, int x, string limb) {
mixed GetCombatVerbs(string type, int damage) {
mixed GetCombatMove(string type, int skill) {
static mixed GetMissData(object targ, int type, string limb) {
","/lib/events/listen.c":"mapping GetListenMap(){
varargs mixed SetListen(mixed array args...) {
mapping RemoveListen(string item) {
mixed direct_listen_obj() {
mixed direct_listen_to_obj() {
mixed direct_listen_to_str_word_obj(string str) {
string array GetListens() {
varargs mixed eventListen(object who, string str) {
","/verbs/items/give.c":"static void create() {
mixed do_give_obj_liv(object what, object target) {
mixed do_give_obs_liv(mixed array items, object target) {
mixed can_give_liv_obj() {
mixed can_give_obj_to_liv(mixed arg1, mixed arg2) {
mixed do_give_liv_obs(object target, mixed array items) {
mixed do_give_obs_to_liv(mixed array items, object target) {
mixed can_give_obj_liv(mixed arg1, mixed arg2) {
mixed can_give_liv_wrd_wrd(object targ, string num, string curr) {
mixed can_give_wrd_wrd_to_liv(string num, string curr, object targ) {
mixed do_give_liv_obj(object target, object what) {
mixed do_give_obj_to_liv(object what, object target) {
mixed do_give_liv_wrd_wrd(object target, string num, string curr) {
mixed do_give_wrd_wrd_to_liv(string num, string curr, object target) {
","/secure/sefun/get_cmds.c":"string array get_cmds(){
","/lib/props/damage.c":"int SetClass(int x) {
int GetClass() {
int eventStrike(object ob) {
int GetDamageType() {
int SetDamageType(int x ) {
int GetMaxClass() {
string array GetSave() {
","/verbs/rooms/cast.c":"static void create() {
string GetHelp(string str) {
mixed can_cast_obj(object ob) {
mixed do_cast_obj(object ob) {
","/verbs/players/drive.c":"static void create() {
mixed can_drive_str(string str) {
mixed can_drive_into_str(string str) {
mixed do_drive_str(string str) {
mixed do_drive_into_str(string str) {
","/verbs/items/throw.c":"static void create() {
void eventThrow(object who, object what, object where) {
mixed do_throw_obj_word_obj(object what, string word, object where) {
mixed can_throw_obj() {
mixed can_throw_obj_word_obj() {
","/lib/burn.c":"static void create() {
mixed eventLight(object who, object what) {
mixed direct_light_obj() {
static void heart_beat() {
mixed eventExtinguish(){
int GetBurning() {
int GetBurnRate() {
static int SetBurnRate(int x) {
int GetBurntValue() {
static int SetBurntValue(int x) {
int GetFuelRequired() {
static int SetFuelRequired(int x) {
int GetHeat() {
static int SetHeat(int x) {
int GetMinHeat() {
static int SetMinHeat(int x) {
mixed CanBurn(object who) {
mixed direct_burn_obj_with_obj() {
mixed indirect_burn_obj_with_obj(object target, object source) {
mixed indirect_burn_obs_with_obj(object array targets, object source) {
mixed direct_light_obj_with_obj() {
mixed indirect_light_obj_with_obj(object target, object source) {
mixed indirect_light_obs_with_obj(object array targets, object source) {
mixed CanExtinguish(object who) {
mixed direct_extinguish_obj(){
mixed eventBurnOut() {
","/lib/quest.c":"void create(){
int GetQuestPoints(){
int SetQuestPoints(int i){
","/secure/sefun/get_verbs.c":"string array get_verbs(){
","/secure/lib/net/web_client.c":"","/verbs/builders/copy.c":"static void create() {
mixed do_copy_obj_str(object ob, string str) {
mixed can_copy_obj_str(object ob, string str) { return 1; }
mixed can_copy_str(string str) { return 1; }
mixed do_copy_str(string str) {
","/verbs/items/fill.c":"static void create() {
mixed can_fill_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_fill_obj_from_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_fill_obj_with_obj(object to, object from) {
mixed do_fill_obj_from_obj(object to, object from) {
","/verbs/items/free.c":"static void create() {
mixed can_free_liv_from_obj() {
mixed do_free_liv_from_obj(object target, object tool) {
","/lib/flask.c":"static void create() {
string GetExternalDesc(){
mixed CanDrink(object who, string what){
varargs mixed eventDrink(object who, object target, string foo) {
mixed GetStrength() { return FlaskStrength; }
int GetMealType() { return MealType; }
varargs mixed eventEmpty(object who){
mixed eventPour(object who, object from){
int SetMealType(int x) { return (MealType = x); }
int SetStrength(int x) { return (FlaskStrength = x); }
mixed eventFill(object who, object from){
int indirect_fill_obj_with_obj(){ return 1;}
int indirect_fill_obj_from_obj(){ return 1;}
int indirect_pour_obj_into_obj() { return 1;}
int indirect_pour_from_obj_into_obj() { return 1;}
int direct_pour_obj_out() { return 1;}
int direct_pour_out_obj() { return 1;}
int direct_empty_obj() { return 1;}
mixed indirect_drink_from_obj() {
int CanFillMe(){
int CanFillOther(){
int SetFlaskUses(int x) { return (FlaskUses = x); }
int GetFlaskUses() { return FlaskUses; }
int SetEverFill(int x) { return (EverFill = x); }
int GetEverFill() { return EverFill; }
int SetMaxFlask(int x) { return (MaxFlask = x); }
int GetMaxFlask() { return MaxFlask; }
string GetFlaskContents() { return FlaskContents; }
string SetFlaskContents(string str) {
","/verbs/items/judge1.c":"static void create() {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
mixed can_judge_obj_to_obj() {
","/lib/round.c":"void create(){
int SetRifleType(string str) {rifletype=str; return 1; }
string GetRifleType() { return rifletype; }
string GetPistolType() { return pistoltype; }
int SetCaliber(int x) { caliber=x; return 1; }
int SetMillimeter(int x){ millimeter=x; return 1; }
int SetPistolType(string str) {pistoltype=str; return 1; }
int SetAmmoType(string str) {ammotype=str; return 1; }
int GetCaliber() { return caliber; }
int GetMillimeter() { return millimeter; }
string GetAmmoType() { return ammotype; }
","/secure/sefun/expand_keys.c":"mapping expand_keys(mapping mp) {
","/verbs/rooms/swim.c":"static void create() {
mixed can_swim_str(string str) {
mixed can_swim_into_str(string str) {
mixed do_swim_into_str(string str) {
int StaminaCost(){
mixed do_swim_str(string str) {
","/verbs/players/abandon.c":"static void create() {
mixed can_abandon_liv() { return 1; }
mixed do_abandon_liv(object ob) {
","/verbs/items/wear.c":"static void create() {
mixed can_wear_obj() {
mixed do_wear_obj_on_str(object ob, string str) {
mixed do_wear_obs(object array armors) {
mixed can_wear_obj_on_str(string str) {
","/lib/events/give.c":"mixed direct_give_obj_liv(){
mixed indirect_give_liv_obj(object target) {
mixed direct_give_obj_to_liv() {
","/lib/interactive.c":"string GetShort() {
int GetRadiantLight(int ambient) {
int eventDestruct() {
string SetShort(string str) {
string GetKeyName() { return object::GetKeyName(); }
string GetName() { return object::GetName(); }
string SetCapName(string str) {
string SetKeyName(string str) {
int id(string str) {
varargs string array SetId(string array bogus) {
string array GetId() { return UserId; }
varargs string GetLong() {
string SetLong(string str) {
varargs int GetInvis(object ob) { return object::GetInvis(ob); }
static void create() {
int Setup() {
string query_cwd() { return interface::query_cwd(); }
int eventMove(mixed dest) {
static void net_dead() {
void eventReconnect() {
string get_path() {
mixed array GetCommands() {
int cmdQuit() {
void SetLastError(mapping m) {
mapping GetLastError() {
mixed CanGet() {
void eventDescribeEnvironment(int brief) {
mixed CanDivorce() {
mixed CanMarry() {
mixed eventMarry(object who, object to_whom) {
int GetAge() {
int GetBirth() { return BirthTime - (YEAR array  18); }
void SetEmail(string str) {
string GetEmail() {
int GetLoginTime() { return LoginTime; }
void SetNews(string type, int sz) { News[type] = sz; }
int GetNews(string type) { return News[type]; }
void SetPassword(string str) {
string GetPassword() {
void SetRank(string str) { Rank = str; }
string GetRank() { return Rank; }
void SetRealName(string str) {
string GetRealName() { return RealName; }
int SetBriefMode(int x) { return (Brief = x); }
int GetBriefMode() { return Brief; }
int SetWhereBlock() { return (WhereBlock = !WhereBlock); }
int GetWhereBlock() { return WhereBlock; }
void move_or_destruct() {
string GetSpouse() {
int SetRescueBit(int i){
mixed eventDivorce() {
string GetHostSite() {
string GetWebPage() {
string SetWebPage(string page) {
","/secure/sefun/wipe_inv.c":"int wipe_inv(mixed dude){
","/secure/sefun/automap.c":"varargs string simple_map(mixed arg){
string query_door(object what, string direction){
","/secure/sefun/user_exists.c":"int user_exists(string str) { return (int)master()->player_exists(str); }
","/lib/events/wear.c":"mixed direct_remove_obj() {
mixed direct_wear_obj() {
mixed direct_wear_obj_on_str(object target, string str) {
","/verbs/creators/codesay.c":"static void create() {
string GetHelp(string str) {
mixed can_codesay() { return \"Say what?\"; }
mixed can_codesay_str(string str) {
varargs mixed do_codesay_str(string str) {
","/verbs/items/install.c":"static void create() {
mixed can_install() {
mixed can_install_obj(mixed foo) {
mixed can_install_obj_word_obj(mixed foo) {
mixed do_install() {
varargs mixed do_install_obj(mixed foo) {
varargs mixed do_install_obj_word_obj(mixed foo, mixed wort, mixed foo2) {
","/verbs/rooms/climb.c":"static void create() {
mixed do_climb_word_obj(string word, object ob) {
mixed can_climb_obj() {
mixed can_climb_word_obj() {
mixed do_climb_obj(object ob) {
mixed can_climb_out_of_obj() {
mixed do_climb_out_of_obj(object ob) {
","/lib/virtual/virt_sky.c":"mixed eventReceiveObject(object ob) {
varargs static void create(int x, int y,int z) {
mixed CanFly(object who, string dir) {
mixed CanGo(object who, string dir) {
mixed eventFly(object who, string dir) {
mixed eventGo(object who, string dir) {
varargs static void Setup(int x, int y,int z) {
string GetGround() {
string SetGround(string str) {
mixed GetPreventLand() {
mixed SetPreventLand(mixed val) {
","/secure/sefun/parse_objects.c":"object parse_objects(object where, string str) {
","/verbs/items/poison.c":"static void create() {
void eventPoison(object who, object target, object agent) {
mixed can_poison_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_poison_obj_with_obj(object target, object agent) {
","/verbs/rooms/fish.c":"static void create() {
mixed can_fish_with_obj() {
mixed do_fish_with_obj(object ob) {
","/lib/props/body_mass.c":"int AddBodyMass(int x) {
int GetMass(){
int GetBodyMass() {
int SetBodyMass(int x) {
int GetWeight() {
","/lib/events/activate.c":"int direct_activate_obj(object target) {
int direct_deactivate_obj(object target) {
int direct_activate_obj_on_obj(object target){
int direct_deactivate_obj_on_obj(object target){
","/secure/lib/net/socket.c":"int eventDestruct(){
static void create(int fd, object owner) {
varargs static int eventWrite(mixed data, int close) {
int GetDescriptor() {
int eventRead(mixed data) {
int eventSocketClosed() {
string GetAddress() {
static int eventCloseSocket() {
","/secure/sefun/translate.c":"string translate(string str, int prof) {
","/secure/sefun/local_time.c":"int valid_timezone(string str){
mixed local_time(mixed val){
string set_tz(string str){
mixed local_ctime(int i){
string query_tz(){
","/verbs/creators/initfix.c":"static void create() {
mixed can_initfix_obj(string str) {
mixed can_initfix_word(string str) { return can_initfix_obj(\"foo\"); }
mixed do_initfix_obj(object ob) {
mixed do_initfix_word(string wrd) {
","/lib/comp/holder.c":"varargs string GetInternalDesc() {
int GetOpacity(){
int SetOpacity(int x){
mixed inventory_visible() {
int CanReceive(object ob) {
int eventReceiveObject(object ob) {
int eventReleaseObject(object ob) {
static void eventLoadInventory() {
static void create() {
static mixed array AddSave(mixed array vars) {
int isBag() {
int SetSaveRecurse(int x) {
","/lib/door.c":"static void create() {
varargs mixed eventClose(object who) {
varargs int eventOpen(object who, object tool) {
string GetDefiniteShort() {
string array GetKeys(string side) { return ((class door_side)Sides[side])->Keys; }
mixed CanLock(object who, string foo) {
mixed eventUnlock(object who, object key) {
varargs mixed eventLock(object who, mixed key, mixed foo) {
mixed CanUnlock(object who) {
varargs string array SetKeys(string side, mixed array args...) {
int eventRegisterSide(string side) {
varargs string GetShort(string side) {
string GetLong(string side) {
varargs string array SetId(string side, mixed array args...) {
mixed SetLong(string side, mixed long) {
mixed SetShort(string side, mixed short) {
void SetSide(string side, mapping mp) {
string array GetId(string side) { return ((class door_side)Sides[side])->Ids; }
int GetHiddenDoor(){
int SetHiddenDoor(int i){
string array GetSides(){
int SetLockable(string side, int x) {
int GetLockable(string side) {
object array GetRooms(string side) { return ((class door_side)Sides[side])->Rooms; }
int get_closed() { return GetClosed(); }
","/lib/fish.c":"static void create() {
string GetFood() { return Food; }
int SetFight(int x) { return (Fight = x); }
int GetFight() { return Fight; }
string SetFood(string str) { return (Food = str); }
int eventCatch(object who) { return 1; }
","/lib/events/jump.c":"mixed eventJump(object who, string id, int type) {
mapping GetJumps() {
varargs mixed AddJump(string name, mixed saute, int type){
mixed CanJump(object who, string id, int type) {
mixed direct_jump_word_obj(string prep, object target, string id) {
varargs mixed direct_jump_word_word_obj(mixed args...) {
","/verbs/players/backstab.c":"static void create() {
mixed can_backstab_liv() {
mixed do_backstab_liv(object ob) {
int eventBackstab(object backstabber, object target) {
int eventStab(object backstabber, object target, object weapon) {
int eventPrintDamage(object backstabber, object target, object weapon, int percentDamage) {
","/lib/post_office.c":"int CanReceive(object ob) {
int eventReleaseObject(object foo) {
static void create() {
mixed CanMail(object who, string args) {
mixed eventMail(object who, string args) {
","/verbs/players/stealth.c":"static void create() {
mixed can_stealth() {
mixed can_stealth_wrd() {
mixed do_stealth() {
mixed do_stealth_wrd(string args) {
int eventStealth(object caster, string args, int skill) {
","/verbs/items/drop.c":"static void create() {
mixed can_drop_obj(object ob) { return this_player()->CanManipulate(); }
mixed can_drop_wrd_wrd(string num, string curr) {
mixed do_drop_obj(object ob) {
mixed do_drop_obs(mixed array res) {
mixed do_drop_wrd_wrd(string num, string curr) {
","/verbs/players/lead.c":"static void create() {
mixed do_lead_liv(object ob) {
mixed can_lead_liv() { return 1; }
","/lib/events/touch.c":"static void create() {
varargs string GetTouch(string str, object who) {
varargs mixed SetTouch(mixed array args...) {
string array GetTouches() {
varargs mixed eventTouch(object who, string str) {
mixed direct_touch_obj() {
mixed direct_touch_str_word_obj(string str) {
mapping RemoveTouch(string item) {
","/verbs/players/sit.c":"static void create() {
mixed can_sit_down() {
mixed can_sit_up() {
mixed can_sit_word_obj() {
mixed can_sit_down_word_obj() {
mixed do_sit(){
mixed do_sit_down() {
mixed do_sit_up() {
mixed do_sit_word_obj(string word, object target) {
mixed do_sit_down_word_obj(string word, object target) {
","/lib/std/daemon.c":"int eventDestruct() {
static void create() {
string GetSaveFile() {
static string SetSaveFile(string str) {
varargs int eventRestore(int do_not_zero_out) {
varargs int eventSave(int save_zero_values) {
","/lib/sentient.c":"static void create() {
static void heart_beat() {
static int ContinueHeart() {
mixed eventTalkRespond(object who, object targ, int cls, string msg, string lang) {
mapping SetTalkResponses(mapping mp) {
int SetSpellChance(int i){
int GetSpellChance(){
varargs int SetWander(int speed, mixed array path, int recurse) {
mixed array GetWanderPath() {
mixed array SetWanderPath(mixed array path) {
int GetWanderRecurse() {
int SetWanderRecurse(int x) {
int GetWanderSpeed() {
int SetWanderSpeed(int x) {
int SetPermitLoad(mixed i){
int GetPermitLoad(){
mixed eventAsk(object who, string str) {
varargs mixed eventReceiveEmote(object who, string verb, string info) {
mixed eventRequest(object who, string str) {
mixed eventWander() {
mixed AddCommandResponse(string str, mixed val) {
mapping GetCommandResponses() {
int RemoveCommandResponse(string str) {
mapping SetCommandResponses(mapping mp) {
mixed AddEmoteResponse(string verb, mixed val) {
mapping GetEmoteResponses() {
int RemoveEmoteResponse(string verb) {
mapping SetEmoteResponses(mapping mp) {
mixed AddRequestResponse(string str, mixed val) {
mapping GetRequestResponses() {
int RemoveRequestResponse(string str) {
mapping SetRequestResponses(mapping mp) {
mixed AddTalkResponse(string str, mixed val) {
int RemoveTalkResponse(string str) {
mapping GetTalkResponses() {
","/verbs/items/wield.c":"static void create() {
mixed can_wield_obj() {
mixed can_wield_obj_word_str() {
mixed do_wield_obj(object ob) {
mixed do_wield_obj_word_str(object ob, string word, string str) {
mixed do_wield_obs(mixed array targs) {
string array GetFreeLimbs(object who) {
","/secure/sefun/wild_card.c":"varargs string array wild_card(string str) {
nomask int remove_dots(string str){
","/lib/trainer.c":"static void create() {
static void init() {
int eventTrain(object who, string verb, string skill) {
int SetNoSpells(int i){
mixed AddTrainingSkills(string array args){
int eventComplete(object who, string skill) {
string array GetTrainingSkills() { return copy(TrainingSkills); }
mixed RemoveTrainingSkills(string array args) {
static int ContinueTraining(object who, string skill, int x) {
int GetNoSpells(){
mapping GetStudents() { return copy(Students); }
int eventHelp(object who, string unused) {
int eventStart(object who, string skill) {
int eventContinue(object who, string skill, int x) {
string Expertise(){
","/lib/props/carry.c":"int CanCarry(int amount) {
int AddCarriedMass(int x) {
int GetCarriedMass() {
int GetCarriedWeight() {
int GetMaxCarry() {
int GetLivingMaxCarry() {
int SetMaxCarry(int x) {
","/lib/meal.c":"string GetShort() { return item::GetShort(); }
static void create() {
int eventDestruct() { return item::eventDestruct(); }
static mixed AddSave(mixed array vars) { return item::AddSave(vars); }
int GetValue() {
int eventPoison(object who, object agent, int x) {
int GetStrength() { return MealStrength; }
int GetMealType() { return MealType; }
mixed eventDrink(object who) {
mixed eventEat(object who) {
int SetMealType(int x) {
int SetStrength(int x) { return (MealStrength = x); }
mixed array GetMealMessages() { return ({ MyMessage, OtherMessage }); }
string SetEmptyItem(string file) { return (EmptyItem = file); }
string GetEmptyItem() { return EmptyItem; }
string SetEmptyName(string str) { return (EmptyName = str); }
string GetEmptyName() { return EmptyName; }
mixed SetEmptyShort(mixed val) { return (EmptyShort = val); }
mixed GetEmptyShort() { return EmptyShort; }
mixed SetEmptyLong(mixed val) { return (EmptyLong = val); }
mixed GetEmptyLong() { return EmptyLong; }
varargs void SetMealMessages(mixed array val...) {
mixed direct_eat_obj() {
mixed direct_drink_obj() {
mixed direct_drink_from_obj() {
","/secure/lib/net/telnet_client.c":"static void create()
void init()
string help()
void write_callback( int fd )
void read_callback( int fd, mixed message )
void close_callback( int fd )
int do_connect(string args)
int do_reset( string args )
int do_reconnect()
int parse_comm( string str )
","/verbs/items/open.c":"static void create() {
mixed can_open_obj(string verb, string id) {
mixed can_open_obj_with_obj(string verb, string id1, string id2) {
varargs mixed do_open_obj(object ob, mixed array args...) {
varargs mixed do_open_obj_with_obj(object ob, object with, mixed array args...) {
","/lib/std/table.c":"int CanGet(object who){
void create(){
void init(){
","/lib/props/inventory.c":"static void eventLoadInventory() {
varargs void reset() {
static void eventLoadItem(string file, mixed args, int count) {
mapping GetInventory() {
mapping SetInventoryCheck(mapping newmap){
void heart_beat(){
","/lib/events/drop.c":"mixed CanDrop(object who) {
mixed GetPreventDrop() {
mixed SetPreventDrop(mixed val) {
int GetDestructOnDrop() {
int SetDestructOnDrop(int val) {
mixed direct_drop_obj(object target) {
","/lib/domesticate.c":"mixed direct_befriend_liv(){
mixed direct_abandon_liv(){
mixed direct_train_liv(){
int CanTrain(){
mixed direct_train_liv_to_str(){
mixed direct_untrain_liv(){
mixed direct_untrain_liv_to_str(){
mixed direct_command_liv(){
mixed direct_command_liv_to_str(){
object SetMountOwner(object who){
int SetCanBefriend(int i){
int CanAbandon(object who){
int SetCanTrain(int i){
int CanUnTrain(){
int SetCanCommand(int i){
int eventBefriend(object who){
int eventAbandon(object who){
varargs int eventTrainLiving(object who, string what){
varargs int eventUnTrainLiving(object who, string what){
string array GetTrainedSkilles(){
string array SetTrainedSkills(string array skills){
string eventCommandNPC(object who, string cmd){
object GetMountOwner(){
","/lib/events/dig.c":"mixed eventDig(object who, object tool) {
int RemoveDig() {
mixed SetDig(mixed val) {
mixed CanDig(object who) {
mixed direct_dig_obj_with_obj() {
mixed GetDig() {
","/verbs/builders/initfix.c":"static void create() {
mixed can_initfix_obj(string str) {
mixed can_initfix_word(string str) { return can_initfix_obj(\"foo\"); }
mixed do_initfix_obj(object ob) {
mixed do_initfix_word(string wrd) {
","/verbs/items/put.c":"static void create() {
mixed eventCheckLight(object who) {
mixed can_put_obj_word_obj(object target, string wrd, object storage) {
mixed do_put_obj_word_obj(object what, string wrd, object storage) {
mixed do_put_obs_word_obj(mixed array res, string wrd, object storage) {
mixed can_put_obs_word_obj(object array foo1, string wrd, object foo2) {
mixed can_put_obs_obj(object array foo1, string wrd, object foo2){
mixed can_put_obj_obj(object target, string wrd, object storage){
mixed do_put_obj_obj(object what, object storage){
mixed do_put_obs_obj(mixed array res, object storage){
mixed can_put_wrd_wrd_word_obj(string num, string curr,string wrd, mixed container) {
mixed do_put_wrd_wrd_word_obj(string num, string curr, mixed wort, object ob) {
","/secure/sefun/dummy.c":"","/lib/bank.c":"static void create() {
void init() {
mixed teller_check(){
int HandleTeller(string str){
","/lib/pager.c":"static void Page(class page_file file) {
static void cmdPage(string str, class page_file file) {
varargs static private void RazzleDazzle(mixed args...) {
static private string GetPagerPrompt(class page_file file) {
mixed more(mixed val, string cl, function f, mixed args) {
string GetHelp(string str) {
varargs mixed eventPage(mixed val, mixed msg_class, function f,mixed args...) {
","/verbs/players/stand.c":"static void create() {
mixed can_stand_up() {
mixed do_stand_up() {
","/verbs/items/donate.c":"static void create() {
mixed can_donate_str_str(string amount, string currency){
mixed can_donate_str_str_to_str(string amount, string currency, string foo){
mixed do_donate_str_str(string amount, string currency) {
mixed do_donate_str_str_to_str(string amount, string currency, string foo){
","/lib/flashlight.c":"int CanReceive(object ob) {
void heart_beat(){
void create(){
void init(){
int eventTurnOn(object ob){
varargs mixed eventTurnOff(string str){
int eventDie(){
int eventUse(int i){
mixed eventLight(){
mixed eventExtinguish(){
string GetCellType() { return celltype; }
int SetDrainRate(int i){
int SetCellType(string str) {celltype=str; return 1; }
void SetLightLevel(int i){
int eventRadiate(int i){
int SetHB(int i){
int GetHB(){
int SetMaxCells(int i){ maxcells = i; return i; }
int GetMaxCells() { return maxcells; }
int SetMinCells(int i){ mincells = i; return i; }
int GetMinCells() { return mincells; }
int flicker(){
int CheckPower(){
int GetLightLevel(){
void regetID(){
","/lib/lvs/level.c":"int collect_moduli(int mod, int array range){
varargs int ChangeLevel(int i){
","/verbs/creators/pulsecheck.c":"static void create() {
mixed can_pulsecheck_liv(string str) {
mixed do_pulsecheck_liv(object ob){
mixed do_pulsecheck_lvs(object array obs) {
","/verbs/players/pray.c":"static void create() {
mixed can_pray_for_str(string spell) {
mixed do_pray_for_str(string spell) {
mixed can_pray_for_str_against_str(string spell) {
mixed can_pray_for_str_for_obj(string spell) {
mixed can_pray_for_str_against_str_for_liv(string spell) {
mixed do_pray_for_str_against_str(string spell, string ag) {
mixed do_pray_for_str_for_obj(string spell, object ob) {
mixed do_pray_for_str_against_str_for_liv(string spell, string ag, object tg) {
","/secure/sefun/sefun.c":"varargs string read_file(string file, int start_line, int number_of_lines){
string debug_info(int debuglevel, mixed arg){
function functionify(string str){
object find_object( string str ){
object find_player( string str ){
varargs mixed objects(mixed arg1, mixed arg2){
int sefun_exists(string str){
varargs string socket_address(mixed arg, int foo){
int destruct(object ob) {
int exec(object target, object src) {
object array livings() {
void set_eval_limit(int i){
object query_snooping(object ob) {
string array query_local_functions(mixed arg){
void set_privs(object ob, string str) { return; }
varargs void shutdown(int code) {
void write(string str) {
string array groups(){
string array efuns(){
string array sefuns(){
mixed array users(){
void reset_eval_cost(){
string query_ip_name(object ob){
int valid_snoop(object snooper, object target){
void notify_fail(string str) {
string capitalize(mixed str) {
","/secure/sefun/findobs.c":"mixed find_inheritors(mixed arg){
mixed find_deep_inheritors(mixed arg){
mixed array findobs(mixed arg){
","/secure/lib/net/h_ftpd.c":"void Destruct(){
static void create(int fd, object owner){
private void eventReadFtpData(mixed text){
nomask static int check_privs(string file, string oper) {
string GetKeyName(){ return Session->user; }
void StartService(){
private void eventCmdPasv(string arg)
private void eventCmdUser(string arg){
private void eventCmdRetr(string arg){
private void eventCmdStor(string arg){
private void eventCmdNlst(string arg){
private void eventCmdList(string arg){
private void eventCmdCdup(string arg){ eventCmdCwd(\"..\"); }
private void eventCmdQuit(string arg){
private void eventCmdType(string arg){
private void eventCmdPort(string arg){
void eventCmdNoop(string arg){
private void eventCmdDele(string arg){
private void eventCmdRnfr(string arg) {
private void eventCmdRnto(string arg) {
private void eventCmdStou(string arg){
private void eventCmdSyst(string arg) {
private void eventCmdMkd(string arg){
void eventCmdPwd(string arg){
private void eventCmdRmd(string arg) {
private string find_flags(string arg){
private string strip_flags(string arg){
string FindPrevDir( string path ) {
private void idle_time_out(){
private string GetFtpWelcomeMsg(){
string GetUniqueFileName(string arg){
private void eventDestructDataPipe(mixed f){
private void eventCmdPswd(string arg){
string RetrieveCmdCallback(object ob){
private void do_list( string arg, int ltype){
","/lib/props/value.c":"int GetDestroyOnSell() {
int SetDestroyOnSell(int x) {
varargs int GetValue(string str) {
int SetValue(mixed y) {
varargs mixed SetBaseCost(mixed arg, int i){
int GetVendorType() {
int SetVendorType(int x) {
int SetDollarCost(int x){
int GetBaseCost(string str){
string array GetSave() {
","/verbs/items/roll.c":"static void create() {
mixed can_roll() {
mixed can_roll_obj_here() {
varargs mixed can_roll_obj_on_obj(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed can_roll_obj_on_str(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed can_roll_str_on_obj(string foo, object where, string arg1, string arg2) {
mixed do_roll() {
varargs mixed do_roll_obj(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed do_roll_obj_here(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed do_roll_obj_on_obj(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed do_roll_obs(mixed arg1, mixed arg2, mixed arg3, mixed arg4){
varargs mixed do_roll_obs_here(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed do_roll_obs_on_obj(mixed arg1, mixed arg2, mixed arg3, mixed arg4){
varargs mixed do_roll_obj_on_str(mixed arg1, mixed arg2, mixed arg3, mixed arg4) {
varargs mixed do_roll_obs_on_str(mixed arg1, mixed arg2, mixed arg3, mixed arg4){
varargs mixed do_roll_str_on_obj(string foo, object where, string arg1, string arg2) {
","/verbs/players/cast.c":"static void create() {
mixed can_cast_str(string spell) {
mixed can_cast_str_on_obj(string spell) {
mixed can_cast_str_on_str(string spell) {
mixed can_cast_str_against_str(string spell) {
mixed can_cast_str_on_str_of_str(string spell) {
mixed do_cast_str(string spell) {
mixed do_cast_str_on_obj(string spell, object target) {
mixed do_cast_str_against_str(string spell, object target) {
mixed do_cast_str_on_str(string spell, string limb) {
mixed do_cast_str_on_str_of_obj(string spell, string limb, object target) {
","/lib/torch.c":"static void create() {
string GetShort() {
varargs string GetLong(string unused) {
int GetRadiantLight(int ambient) {
int direct_pray_for_str_for_obj() { return 1; }
","/secure/sefun/domains.c":"int domain_exists(string dmn) {
object domain_master(mixed val) {
","/lib/mount.c":"mixed direct_ride_str(){
int GetMount(){ return Mount; }
object array RemoveRider(object ob){
int SetMount(int x) {
mixed eventMount(object who){
mixed eventDismount(object who){
mixed eventBuck(object who){
mixed direct_ride_word_str(){
mixed direct_mount_liv(){
mixed direct_dismount_liv(){
mixed direct_dismount_from_liv(){
int eventRide(string direction){
object array AddRider(object ob){
object array GetRiders(){
","/lib/history.c":"static void create() {
static string eventHistory(string str) {
nomask private static string Push(string cmd) {
private string GetHistory(mixed val) {
int GetCommandNumber() {
string array GetHistoryList() {
int SetHistorySize(int x) {
","/verbs/items/pull.c":"static void create() {
mixed can_pull_obj() {
mixed can_pull_str_on_obj() {
mixed do_pull_obj(object target) {
varargs mixed do_pull_str_on_obj(string thing, object target) {
","/verbs/players/describe.c":"static void create() {
mixed can_describe_str(string str) {
mixed do_describe_str(string str) {
","/lib/std/room.c":"string GetInternalDesc() {
int inventory_visible() {
int CanReceive(object ob){
int eventReceiveObject(object ob){
static void create() {
mixed CanFly(object who, string dest){
object array GetDummyItems() {
varargs void reset(int count) {
void heart_beat(){
varargs void AddItem(mixed item, mixed val, mixed adjectives) {
mapping GetItemsMap(){
mapping RemoveItem(mixed item) {
mapping SetItems(mixed items) {
string GetLong() {
string SetLong(string str) {
varargs int eventShow(object who, string args) {
mixed SetProperties(mapping mp) {
mixed SetProperty(string prop, mixed val) {
int GetAmbientLight() {
void RemoveRead(mixed item) {
varargs void SetRead(mixed items, mixed arg) {
varargs int eventPrint(string msg, mixed arg2, mixed arg3) {
int GetNightLight() {
int GetDayLight() {
int GetShade() {
mixed direct_delete_exit_str(){
mixed indirect_delete_exit_str(){
void CheckActions(){
void SetAction(int chance, mixed val) {
mapping GetActionsMap(){
mapping SetActionsMap(mapping ActMap){
int SetFrequency(int tick){
int GetFrequency(){
int GetTerrainType(){
int SetTerrainType(int i){
int AddTerrainType(int i){
int RemoveTerrainType(int i){
function GetBury() {
function SetBury(function what) {
static string GetExtraLong() {
string SetDayLong(string str) { return (DayLong = str); }
string GetDayLong() { return DayLong; }
string SetNightLong(string str) { return (NightLong = str); }
string GetNightLong() { return NightLong; }
string SetClimate(string str) {
float SetGravity(float h) { return (Gravity = h); }
float GetGravity() { return Gravity; }
string GetClimate() { return Climate; }
int GetResetNumber() {
mapping GetSmellMap(){
mapping GetListenMap(){
mapping QueryMap(string str){
varargs void SetSmell(mixed items, mixed arg) {
varargs void SetListen(mixed items, mixed arg) {
varargs void AddListen(mixed item, mixed val) {
varargs void RemoveListen(mixed item) {
int GetMedium() {
int SetNoReplace(int x) { return (NoReplace = x); }
int GetNoReplace() { return NoReplace; }
int GetPlayerKill() {
int SetPlayerKill(int x) {
int AddPoisonGas(int x) {
int GetPoisonGas() {
int SetPoisonGas(int x) {
void AddRead(mixed item, mixed val) {
static int SetShade(int x) {
varargs void AddSearch(mixed item, mixed val) {
varargs void SetSearch(mixed items, mixed arg) {
varargs mixed GetSearch() {
varargs void RemoveSearch(mixed item) {
varargs void AddSmell(mixed item, mixed val) {
varargs void RemoveSmell(mixed item) {
varargs void AddTouch(mixed item, mixed val) {
int SetNoObviousExits(int i){
varargs void SetTouch(mixed items, mixed arg) {
static int SetNightLight(int x) {
static int SetDayLight(int x) {
varargs void RemoveTouch(mixed item) {
string GetTown() { return Town; }
string SetTown(string town) { return (Town = town); }
int CanAttack( object attacker, object who ) {
mixed eventBuryItem(object who, object tool, object what) {
varargs mixed eventHearTalk(object who, object target, int cls, string verb,
int inventory_accessible() {
int SetNoDefaultExits(int i){
int SetDefaultExits(int i){
int SetCanFly(int i){
int GenerateObviousExits(){
static void init() {
int eventMove() { return 0; }
string array GetId() { return ({}); }
","/lib/std/book.c":"void create(){
void init(){
void SetTitle(string title){
void SetSource(string source){
void LoadBook(){
mixed GetTitle(){
string GetSource(){
string array eventExtractChapterName(string path){
mapping array eventLoadChapters(){
string eventLoadIndex(){
","/secure/lib/net/echo_server.c":"void create(){
static mixed read_callback(int fd, mixed data){
static void close_callback(int fd){
void StartServer(){
static void listen_callback(int fd){
","/verbs/common/body.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
varargs void eventCheckBody(object ob, object receiver) {
mixed can_body() {
mixed can_body_liv() {
mixed do_body() {
mixed do_body_liv(object ob) {
","/lib/spell.c":"static void create() {
string GetErrorMessage() {
static int SetMorality(int x) {
varargs string array GetMessage(int damage, int healing) {
string array GetRules() {
int GetMorality() {
varargs static string array SetRules(mixed args...) {
string array GetSkills() {
int GetDamageType() {
varargs int eventCast(object who, int level, mixed limb, object array targets) {
varargs int CanCast(object who, int level, string limb, object array targets) {
string GetVerb() {
string GetSpell() {
int GetRequiredMagic() {
int GetRequiredStamina() {
varargs mixed eventParse(object who, mixed array args...) {
varargs object array GetTargets(object who, mixed args...) {
int GetAutoHeal() {
int GetSpellType() {
int GetRequiredSkill(string skill) {
static string SetVerb(string verb) {
static mapping SetSkills(mapping mp) {
int GetAutoDamage() {
static int SetAutoDamage(int x) {
static int SetAutoHeal(int x) {
string GetConjure() {
static string SetConjure(string str) {
varargs static void SetDamage(int type, mixed array rest...) {
int GetDifficulty() {
static int SetDifficulty(int x) {
int GetHealing() {
static varargs int array SetHealing(mixed args...) {
int GetMagicCost() {
static varargs int array SetMagicCost(mixed args...) {
static mixed array SetMessages(mixed array messages) {
string array GetReligions() {
varargs static string array SetReligions(string array religions...) {
int GetRemoteTargets() {
static int SetRemoteTargets(int x) {
static int SetRequiredMagic(int x) {
static int SetRequiredStamina(int x) {
static string SetSpell(string str) {
static int SetSpellType(int x) {
int GetStaminaCost() {
static varargs int array SetStaminaCost(mixed args...) {
static int SetTrainingModifier(int modifier) {
int GetTrainingModifier() {
static int CanSpellAttack(object who, object array enemies, int power) {
","/verbs/items/listen.c":"static void create() {
mixed can_listen() {
mixed can_listen_obj() {
mixed can_listen_to_obj() {
mixed can_listen_to_str_word_obj() {
mixed do_listen() {
mixed do_listen_obj(object ob) {
mixed do_listen_to_obj(object ob) {
mixed do_listen_to_str_word_obj(string str, object ob) {
","/lib/events/dig_with.c":"mixed eventBuryWith(object who, object what) {
varargs mixed eventDigWith(object who, object what) {
varargs mixed CanBuryWith(object who, object what) {
varargs mixed CanDigWith(object who, object what) {
mixed direct_bury_str_with_obj(string str) {
mixed direct_dig_with_obj() {
mixed direct_dig_str_with_obj(string what) {
mixed indirect_bury_obj_with_obj(object what) {
mixed indirect_dig_obj_with_obj(object what) {
","/verbs/items/deactivate.c":"static void create() {
mixed can_deactivate() {
mixed can_deactivate_obj(mixed foo) {
mixed can_deactivate_obj_on_obj(mixed foo) {
mixed do_deactivate() {
varargs mixed do_deactivate_obj(mixed foo, mixed foo2) {
varargs mixed do_deactivate_obj_on_obj(mixed foo, mixed foo2) {
","/secure/sefun/query_names.c":"string array query_names(object whom) {
int answers_to(string name, object what){
","/lib/events/search.c":"varargs mixed SetSearch(mixed array args...) {
varargs string GetSearch(string str, object who) {
mapping RemoveSearch(string item) {
string array GetSearches() {
varargs mixed eventSearch(object who, string str) {
mixed direct_search_obj() {
mixed direct_search_str_word_obj(string str) {
","/lib/events/roll.c":"mixed direct_roll_obj_on_str(object target, string where) {
mixed direct_roll_obj_here(object target) {
mixed indirect_roll_obj_on_obj(object target, object where){
mixed indirect_roll_obs_on_obj(mixed target, object where){
varargs mixed eventRoll(object ob){
varargs mixed CanRoll(object target, object where){
varargs mixed eventResults(mixed args){
","/lib/creator.c":"int inventory_visible() { return 1; }
static int Destruct() {
string GetName() {
varargs string GetLong(string str) {
varargs int eventShow(object who, string str, string on_id) {
mixed direct_look_obj() { return 1; }
mixed direct_look_at_obj() { return 1; }
static void create() {
int Setup() {
static void net_dead() {
void eventReconnect() {
int eventForce(string cmd) {
void eventDescribeEnvironment(int verbose) {
int inventory_accessible() { return 1; }
int CanCarry(int amount) { return 1; }
int is_living() { return 1; }
mixed direct_give_liv_obj() {
mixed indirect_give_obs_to_liv(object array item) {
mixed direct_marry_liv_to_liv() {
mixed indirect_marry_liv_to_liv() {
mixed indirect_give_obj_to_liv(object item) {
mixed direct_verb_rule(string verb) {
mixed direct_give_liv_obs() {
int GetCreatorAge() {
int GetCreatorBirth() { return CreatorBirth; }
","/lib/die.c":"int eventMove(mixed dest){
static void create() {
string SetLong(string str){
void init(){
varargs mixed eventRoll(object where){
varargs mixed eventResults(mixed args){
varargs mixed eventShake(object dude, string foo){
varargs mixed CanShake(object who, string component){
varargs mixed eventConsult(object dude, string foo){
varargs mixed CanConsult(object who, string component){
int SetDenominator(int denom){
int doRoll(){
","/lib/events/pull.c":"varargs mixed eventPull(object who, string component) {
string array GetPulls() {
mapping RemovePull(string item) {
varargs mapping SetPull(mixed key, mixed desc) {
varargs mixed CanPull(object who, string component) {
mixed direct_pull_obj(object target) {
mixed direct_pull_str_on_obj(string str, object target) {
","/lib/std/barkeep.c":"static void create() {
int CanCarry(int cmt) {
int indirect_sell_obj_to_liv() {
mixed CanSell(object who, string item) {
string SetLocalCurrency(string str) {
mapping SetMenuItems(mapping mp) {
mapping GetMenuItems() {
mixed eventSell(object who, string args) {
string GetLocalCurrency() {
int GetCost(string array item) {
mapping AddMenuItem(mixed item, string file) {
mapping RemoveMenuItem(string item) {
mixed eventBuyItem(object who, string cmd, string item) {
int eventList(object who, string cmd, string args) {
","/lib/currency.c":"static void create() {
int GetCurrency(string type) { return Currency[type]; }
int GetBank(string bank, string type) {
mapping GetAccountInfo(string bank) {
varargs int GetNetWorth(string benjamins) {
void ResetBank() { Bank = ([]); }
void ResetCurrency() { Currency = ([]); }
string array GetCurrencies() { return keys(Currency); }
int AddCurrency(string type, int amount) {
mapping GetCurrencyMap() { return copy(Currency); }
varargs int GetCurrencyMass(string type) {
int AddBank(string bank, string type, int amount) {
","/spells/cure.c":"static void create() {
int eventCast(object who, int level, mixed limbs, object array targets) {
","/secure/sefun/this_agent.c":"varargs object this_agent(mixed val) {
","/lib/clerk.c":"void create(){
int performDivorce(object ob1){
int MarriageRequest(mixed arg1, mixed arg2, mixed arg3){
int eventRequestDivorce(mixed arg1, mixed arg2, mixed arg3){
mixed performMarriage(object spouse1, object spouse2) {
","/lib/blank.c":"","/lib/clay.c":"void create(){
void init(){
varargs string SetComposition(string comp, string name, string array nouns, string array adjs, string
void InitComposition(){
","/secure/sefun/native_version.c":"string native_version() { return \"2.8.2\"; }
","/verbs/items/shake.c":"static void create() {
mixed can_shake_str_on_obj() {
mixed can_shake_obj() {
mixed do_shake_obj(object target) {
varargs mixed do_shake_str_on_obj(string thing, object target) {
","/secure/sefun/get_object.c":"varargs object get_object( string str, object player )
varargs mixed get_objects( string str, object player, int no_arr )
","/lib/virtual/virtual.c":"int GetVirtualSky(){
int GetVirtualSea(){
","/verbs/players/ignore.c":"static void create() {
mixed can_ignore(){ return 1; }
mixed can_ignore_liv() { return 1; }
mixed do_ignore(){
mixed do_ignore_liv(object ob) {
mixed do_ignore_lvs(mixed array targets) {
","/secure/sefun/rooms.c":"int query_night_light(object ob){
int query_day_light(object ob){
int query_ambient_light(object ob){
string opposite_dir(string str){
int reload_room(object ob){
","/lib/light.c":"static void create() {
string GetShort() {
varargs mixed eventLight(object who, object tool) {
static int SetLit(int x) {
mixed CanLight(object who) {
mixed direct_light_obj() {
mixed eventDarken() {
int GetLit() {
","/lib/used_meal.c":"static void create() {
","/verbs/players/ride.c":"static void create() {
mixed can_ride_str(string str) {
mixed can_ride_into_str(string str) {
mixed do_ride_str(string str) {
mixed do_ride_into_str(string str) {
","/lib/virtual/virt_map.c":"varargs static void create(string virt_file) {
int SetVirtFile( string file){
varargs string array BaseMap(){ //override with actual map
int array GetLocations(string str){return Location[str]; }
varargs mixed SetAreaMap(int y,int x ,int z, string str){
varargs void InitializeLocations(string tmp){
void SwitchLocations(){
int AddLocation(string str, int array where){
int RemoveLocation(string str){
varargs mixed GetAreaMap(int x, int y, int z){
","/secure/sefun/generic.c":"varargs int true(mixed args...){
varargs int false(mixed args...){
","/lib/help.c":"string GetHelp(string topic) {
static mapping SetHelp(mixed val) {
","/lib/events/wield.c":"mixed direct_unwield_obj() {
mixed direct_wield_obj() {
mixed direct_wield_obj_word_str(object target, string wrd, string limb) {
","/verbs/items/strike.c":"static void create() {
mixed do_strike_obj(object ob) {
mixed can_strike_obj() {
","/spells/meditate.c":"static void create() {
int eventCast(object who, int level) {
","/verbs/rooms/fly.c":"static void create() {
mixed can_fly_str(string str) {
mixed can_fly_into_str(string str) {
mixed do_fly_str(string str) {
mixed do_fly_into_str(string str) {
","/lib/teacher.c":"static void create() {
static void init() {
string SetLocalCurrency(string str){
int eventComplete(object who, string language) {
string GetLocalCurrency(){
int eventTeachLanguage(object who, string verb, string language) {
mixed AddTeachingLanguages(string array args){
mixed RemoveTeachingLanguages(string array args...) {
mapping GetStudents() { return copy(Students); }
string array GetTeachingLanguages() { return copy(TeachingLanguages); }
int eventHelp(object who, string unused) {
static int ContinueTeaching(object who, string language, int x) {
int eventStart(object who, string language) {
int eventContinue(object who, string language, int x) {
int SetAllLanguages(int i){
int GetAllLanguages(){
int GetCommercial(){
int SetCommercial(int i){
int GetTeachingFee(){
int SetTeachingFee(int i){
string Expertise(){
","/lib/events/fly.c":"mixed direct_fly_str(string str) {
mixed direct_fly_into_str(string str) {
","/lib/verb.c":"static void create() {
string GetErrorMessage() { return ErrorMessage; }
string array GetVerbs() { return ({ Verb }); }
string array GetRules() { return copy(Rules); }
varargs static string array SetRules(mixed array args...) {
static string SetErrorMessage(string str) { return (ErrorMessage = str); }
static string SetVerb(string str) {
varargs static string array SetSynonyms(mixed array args...) {
string array GetSynonyms() { return copy(Synonyms); }
","/verbs/items/unwield.c":"static void create() {
mixed can_unwield_obj(string verb) {
mixed do_unwield_obj(object ob) {
mixed do_unwield_obs(mixed array targs) {
","/verbs/items/get.c":"static void create() {
mixed can_get_wrd_wrd_from_obj(string num, string curr) {
mixed do_get_obj(object ob) {
mixed do_get_wrd_wrd_out_of_obj(string num, string curr, object pile) {
mixed do_get_wrd_wrd_from_obj(string num, string curr, object pile) {
mixed do_get_obj_out_of_obj(object ob, object storage) {
mixed do_get_obj_from_obj(object ob, object storage) {
mixed do_get_obj_obj(object ob, object storage) {
mixed eventCheckLight(object who) {
mixed can_get_obj(string verb) {
varargs mixed can_get_obj_out_of_obj(string verb, string rule, object item, object container, mixed poo) {
mixed can_get_obj_obj(string verb, string rule, object item, object container) {
mixed can_get_obj_from_obj(string verb, string rule, object item, object container) {
mixed can_get_wrd_wrd_out_of_obj(string num, string curr) {
mixed do_get_obs(mixed array targs) {
mixed do_get_obs_out_of_obj(mixed array targs, object storage) {
mixed do_get_obs_from_obj(mixed array obs, object storage) {
mixed do_get_obs_obj(mixed array obs, object storage) {
","/lib/events/bait_with.c":"mixed eventBait(object who, object pole) {
int SetBaitStrength(int x) {
mixed indirect_bait_obj_with_obj() {
int GetBaitStrength() {
","/secure/sefun/absolute_path.c":"string absolute_path(string curr, string newp) {
","/secure/lib/connect.c":"varargs int eventPrint(string msg, mixed cl, mixed arg3) {
int array GetScreen() {
string GetCapName() {
static void create(int binary) {
string GetKeyName() {
void eventDestruct() {
void SetLastError(mapping m) {
mapping GetLastError() {
static void eventCreatePlayer(string cap) {
static void terminal_type(string str) {
static void window_size(int width, int height) {
static void InputName(string namen, string kill_me) {
static void InputPassword(string pass, string cap) {
static void ConfirmName(string ans, string cap) {
static void eventReEnterGame(string cap) {
static void ConfirmReconnect(string ans, string cap) {
static int CanLogin() {
static private void eventEnterGame() {
static void CreatePassword(string pass, string cap) {
static void ConfirmPassword(string control, string cap, string pass) {
static void InputGender(string str, string cap) {
static void InputCapName(string name, string cap) {
static void InputEmail(string email) {
static void InputRealName(string rname) {
static void InputRace(string str) {
static void cmdHelp(string args) {
static void cmdList() {
static void cmdPick(string args) {
static void eventTimeout() {
static void CreateGuest() {
static void GetGuestName(string nom) {
int eventCheckPending(string str){
void eventCompleteChar(){
void InputCre(string str){
int CheckIp(){
varargs static void logon(mixed foo) {
static void AgeCheck(string ans, string cap) {
","/lib/language.c":"string GetNativeLanguage() {
int GetNextLevel(string lang, int curr_level) {
mapping RemoveLanguage(string lang) {
mapping SetNativeLanguage(string lang){
varargs void SetLanguageComprehension(function check, int time, function end) {
mixed SetDefaultLanguage(string str){
static void heart_beat() {
int GetStatLevel(string stat) { return 0; }
int GetLanguageLevel(string lang) {
int GetPolyglot(){
string GetDefaultLanguage(){
string GetLanguageName(string lang) {
int AddLanguagePoints(string lang, int points) {
int GetLanguagePoints(string lang) {
string array GetLanguages() {
int SetPolyglot(int i){
","/secure/lib/connect.first.c":"string GetKeyName() { return Name; }
static void InputName(string str) {
static void InputPassword(string str) {
static void ConfirmPassword(string str) {
static void InputGender(string str) {
static void InputCapName(string str) {
static void InputEmail(string str) {
static void InputRealName(string str) {
static void logon() {
","/verbs/common/mail.c":"static void create() {
string GetHelp(string str) {
mixed can_mail() { return can_mail_str(\"\"); }
mixed do_mail() { return do_mail_str(0); }
","/lib/exits.c":"static void create() {
string SetGoMessage(string str) {
string GetObviousExits() {
string SetObviousExits(string str) {
string GetSky() {
string SetSky(string str) {
string ResolveObjectName(string file) {
varargs string CreateDoor(string dir, string odir, string long, string locked, string key){
mapping GetEnterMap(){
mapping GetFullExitData() {
mapping GetExitMap() {
string array GetDoors() {
mixed CanGo(object who, string str) {
mixed eventGo(object who, string str) {
string SetDoor(string dir, string file) {
string GetDirection(string dest) {
object GetDummyItem(mixed id) {
varargs void AddEnter(string dir, string dest, function pre, function post) {
static mapping GetEnterData(string dir) {
varargs string array GetEnters(int i) {
void RemoveEnter(string dir) {
void SetEnters(mapping mp) {
string GetEnterMessage() {
string SetEnterMessage(string str) {
varargs mapping AddExit(string dir, string dest, function pre, function post) {
mapping GetExitData(string str) {
mapping RemoveExit(string dir) {
mapping SetExits(mapping mp) {
string GetGoMessage() {
string array GetExits() {
","/verbs/creators/wizlock.c":"static void create() {
mixed can_wizlock_obj(string str) {
mixed do_wizlock_obj(object ob){
","/lib/events/sit.c":"mixed eventReceiveSit(object who) {
object array GetSitters() {
int GetMaxSitters() {
static int SetMaxSitters(int x) {
mixed direct_sit_word_obj() {
int CanGet(object who){
mixed direct_sit_down_word_obj() {
mixed eventReleaseStand(object who) {
","/secure/sefun/files.c":"int mkdir_recurse(string path){
int file_exists(string str) {
int directory_exists(string str) { return (file_size(str) == -2); }
string save_file(string who) {
int indent_file(string filename){
mixed lpc_file(string str){
","/secure/lib/net/uptime_server.c":"void create(){
static mixed read_callback(int fd, mixed data){
static void close_callback(int fd){
void StartServer(){
int SendUptime(int fd){
static void listen_callback(int fd){
","/secure/sefun/visible.c":"varargs int visible( object detectee_obj, object detector_obj ) {
","/lib/npc.c":"static void create() {
int eventDestruct() {
void eventReconnect() { }
static int cmdAll(string arg) {
string GetCommandFail() { return \"What?\"; }
string GetShort(){
int GetRadiantLight(int ambient) {
int CanReceive(object ob) { return CanCarry((int)ob->GetMass()); }
int eventReceiveObject(object who) {
int eventReleaseObject(object who) {
int AddCarriedMass(int x) { return living::AddCarriedMass(x); }
varargs int eventPrint(string msg, mixed arg2, mixed arg3) {
string GetName() { return object::GetName(); }
static void heart_beat() {
mixed eventTurn(object who) {
string GetCapName() { return object::GetCapName(); }
void SetAction(int chance, mixed val) {
mixed GetAction() { return Action; }
varargs int eventMoveLiving(mixed dest, string omsg, string imsg) {
mixed array GetCommands() { return commands(); }
static int ContinueHeart() {
varargs string SetRace(string race, mixed extra) {
string SetClass(string cls) {
int SetLevel(int x) {
int SetHealthPoints(int x) {
int SetMaxHealthPoints(int x) {
int SetMagicPoints(int x) {
float SetStaminaPoints(float x) {
float SetMaxStaminaPoints(float x) {
varargs void SetCurrency(mixed val, int amount) {
mixed SetEncounter(mixed val) { return (Encounter = val); }
string array AddEncounter(string nom) {
string array RemoveEncounter(string nom) {
mixed GetEncounter() { return Encounter; }
varargs string GetLong(string str) {
int GetUnique() { return Unique; }
mapping SetInventory(mapping mp ) { return (Inventory = mp); }
string SetKeyName(string nom) {
int GetLevel() { return NPCLevel; }
varargs int eventShow(object who, string str) {
varargs int eventDie(mixed agent) {
int eventCompleteMove(mixed dest) {
void eventEnemyDied(object ob) {
mixed SetDie(mixed val) { return (Die = val); }
mixed GetDie() { return Die; }
mixed GetCombatAction() { return CombatAction; }
int SetUnique(int x) {
string array GetEnemyNames() { return EnemyNames; }
static void init() {
void SetCombatAction(int chance, mixed val) {
varargs int GetMaxHealthPoints(string limb){
int array GetScreen() { return ({ 80, 24 }); }
int AddEnemy(object ob) {
void CheckEncounter(){
mapping GetInventory() { return copy(Inventory); }
int SetAutoStand(int i){
int GetCustomXP(){
int SetCustomXP(int i){
int GetAutoStand(){ return AutoStand; }
mixed CanGet(object who) { return GetName() + \" is a living being!\"; }
int SetMaxMagicPoints(int x) {
mixed SetAggressive(mixed val){
int eventExtraAction(){ return 1; }
void eventDescribeEnvironment(int brief) {
string GetPlainShort(){
","/lib/editor.c":"static void create() {
static string process_input(string str) {
varargs void eventEdit(string file, function callback) {
","/lib/battery.c":"void create(){
void init(){
void heart_beat(){
int eventUse(int i){
int Spent(){
int GetCharge() { return charge; }
string GetPowerType() { return powertype; }
string GetCellType() { return celltype; }
int SetRechargeable(int i) { rechargeable = i; return i;}
int GetRechargeable() { return rechargeable;}
int SetDrainable(int i) { drainable = i; return i; }
int GetDrainable() { return drainable; }
int SetDrainRate(int i) { drainrate = i; return i; }
int GetDrainRate() { return drainrate; }
int ModCharge(int i) {
int eventDrain(int i){
int eventCharge(int i){
int SetPowerType(string str) {powertype=str; return 1; }
int SetCellType(string str) {celltype=str; return 1; }
int SetCharge(int i) {charge = i; fullcharge = i; return 1; }
","/lib/teach.c":"int direct_teach_str_to_liv(){ return 1;}
int direct_teach_liv_to_str(){ return 1;}
int CanTeach(){
int eventOfferTeaching(object who, string what){
int eventTeach(object who, string what){
","/secure/sefun/make_workroom.c":"varargs int make_workroom(mixed dude, int cre) {
","/secure/sefun/atomize.c":"string array atomize_string(string str){
string array atomize_array(string array temp_arr){
","/verbs/creators/zap.c":"static void create() {
mixed can_zap_liv(string str) {
mixed do_zap_liv(object ob){
mixed do_zap_lvs(object array obs) {
","/secure/daemon/imc2.c":"void create(){
void finger(string args, object towho) {
void Setup(){
int command(string str){
int level(object ob){
int clean_up(){ return 0; }
void mudlist(object towho) {
void heart_beat(){
void mudinfo(string args,object towho) {
string pinkfish_to_imc2(string str){
string imc2_to_pinkfish(string str){
string escape(string str){
string unescape(string str){
mapping string_to_mapping(string str){
string main_help(){
void send_packet(string sender, string packet_type, string target, string destination, string data){
private void send_text(string text){
private void got_packet(string info){
void start_logon(){
varargs void send_is_alive(string origin){
void channel_in(string fromname, string frommud, mapping data){
void tell_in(string sender, string origin, string target, mapping data){
private void beep_in(string sender, string origin, string target, mapping data){
private void who_reply_in(string origin, string target, mapping data){
private void whois_in(string fromname, string frommud, string targ, mapping data){
private void whois_reply_in(string targ,string fromname,string frommud,mapping data){
void ping_reply_in(string sender,string origin,string target,mapping data){
void chanwho_reply_in(string origin, string target, mapping data){
void send_keepalive_request(){
int chan_perm_allowed(object user, string chan){
string localize_channel(string str){
void chan_who_in(string fromname, string frommud, mapping data){
void send_ice_refresh(){ send_packet(\"*\",\"ice-refresh\",\"*\",\"*\",\"\"); }
void resolve_callback( string address, string resolved, int key ) {
int can_use(object user){ return 1; } // Is this person allowed to use IMC2 at all?  This function determines if tells can be sent to the person and such.
string chan_perm_desc(int i){
void write_callback(int fd){
void read_callback(int socket, mixed info){
private int close_callback(object socket){
void remove(){
int getonline() {
void channel_out(string user,string chan,string msg,int emote){
varargs void tell_out(object from, string targname, string targmud, string msg, int reply, int emote){
void beep_out(object from, string targname, string targmud){
void ping_out(string from,string targmud){ send_packet(from,\"ping\",\"*\",targmud,\"\"); }
varargs void who_out(string from,string targmud,string type){ send_packet(from,\"who\",\"*\",targmud,(type ? sprintf(\"type=\\\"%s\\\"\",type) : \"type=who\")); }
void chanwho_out(object from,string chan,string mud){
string find_mud(string str){
mapping getmudinfo() {
void mudwho(string mudname,object towho) {
mixed pingmud(string mudname,object towho) {
void getstatus(object towho) {
void interbeep(string args, object towho) {
void getremotemudinfo(string args, object towho) {
void allchans(string args, object towho) {
void chancmd(string args, object towho) {
string html(string str){
void forget_user(string str){ map_delete(tells,str); }
void eventChangeIMC2Passwords(){
","/verbs/items/drink.c":"static void create() {
varargs void eventDrink(object who, object what, string id) {
mixed can_drink_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_drink_from_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_drink_obj(object ob) {
mixed do_drink_from_obj(object ob, string id) {
","/lib/stargate.c":"void create(){
void init(){
string status(){
int eventEnter(object who){
void eventConnect(string destination){
string GetOrigin(){
int eventDisconnect(){
string displayLong(){
string displayShort(){
mixed cmdDial(string s){
int cmdEnter(string what){
void SetOrigin(string o, string d){
","/verbs/items/buy.c":"static void create() {
mixed can_buy_str_from_liv(string str) {
mixed do_buy_str_from_liv(string str, object vendor) {
","/verbs/players/attack.c":"static void create() {
mixed do_attack_liv(object target) {
varargs mixed do_attack_lvs(mixed array targets, int exclusive) {
mixed can_attack_only_liv(object target){
mixed can_attack_liv_only(object target){
mixed do_attack_only_liv(object target){
mixed do_attack_liv_only(object target){
","/spells/restoration.c":"static void create() {
varargs int eventCast(object who, int level, string limb, object array targs) {
varargs int CanCast(object who, int level, string limb, object array targs) {
int GetMagicCost() {
","/secure/sefun/ascii.c":"mixed convert_into_ascii(string str){
string convert_ascii(int i){
string old_convert_ascii(int i){
","/secure/sefun/numbers.c":"int bool_reverse(mixed arg){
int atoi(string str){
string itoa(int i){
int bitshiftedp(int x){
int array roll(string alea){
","/secure/sefun/persist.c":"int query_reset_number() { return (int)master()->GetResetNumber(); }
object unique(string fn, int rare) {
","/lib/comp/object.c":"static int Destruct() {
static void create() {
mixed direct_dest_obj() { return CanDest(); }
mixed indirect_dest_obj() { return CanDest(); }
","/secure/sefun/flat_map.c":"string flat_map(mapping mp) {
","/secure/sefun/absolute_value.c":"int absolute_value(int x) {
","/secure/sefun/get_stack.c":"varargs string get_stack( int x) {
","/lib/chapel.c":"static void create() {
string array SetReligion(string adj, string noun) {
varargs string GetReligion(int flag) { return Religion[flag]; }
mixed CanSacrifice(object who, object what, string deus) {
mixed CanMarry(object who, object spouse1, object spouse2) {
mixed eventMarry(object who, object spouse1, object spouse2) {
string array GetClasses() { return Classes; }
string array SetClasses(string array rc) { return (Classes = rc); }
string array SetDeities(string array deities) {
string array GetDeities() { return Deities; }
int SetSacrificeType(int x) { return (SacrificeType = x); }
int AddSacrificeType(int x) { return (SacrificeType |= x); }
int GetSacrificeType() { return SacrificeType; }
mixed eventSacrifice(object who, object what, string deus) {
int SetAllowSacrifice(int x) { return (AllowSacrifice = x); }
int GetAllowSacrifice() { return AllowSacrifice; }
","/lib/events/shake.c":"varargs mixed eventShake(object who, string component) {
string array GetShakes() {
mapping RemoveShake(string item) {
varargs mapping SetShake(mixed key, mixed desc) {
varargs mixed CanShake(object who, string component) {
mixed direct_shake_obj(object target) {
mixed direct_shake_str_on_obj(string str, object target) {
","/verbs/rooms/go.c":"static void create() {
mixed can_go_str(string str) {
mixed can_go_into_str(string str) {
mixed do_go_str(string str) {
mixed do_go_into_str(string str) {
","/verbs/players/mount.c":"static void create() {
mixed can_mount_liv() {
mixed do_mount_liv(object ob) {
","/lib/std/chair.c":"int CanGet(object who){
void create(){
","/verbs/players/withdraw.c":"static void create() {
mixed can_withdraw() {
mixed do_withdraw() {
","/lib/events/climb.c":"varargs mixed eventClimb(object who, int type, string where) {
mapping GetClimbs() {
int SetCanClimbCarried(int i) {
int GetCanClimbCarried() {
varargs static mapping SetClimb(mixed val, int type) {
mixed direct_climb_word_obj(string word, object ob) {
mixed direct_climb_obj(object ob) {
mixed direct_climb_out_of_obj(object ob) {
","/lib/trap.c":"static void heart_beat() {
static void create() {
mixed eventFree(object who, string target) {
mixed eventCapture(object who, object target) {
mixed CanFree(object who, object target) {
mixed eventEscape() {
mixed indirect_capture_liv_word_obj(object target) {
mixed indirect_free_liv_from_obj(object target) {
object array GetCaptives() {
int GetEscapeChance() {
int SetEscapeChance(int x) {
int GetMaxCapture() {
int SetMaxCapture(int x) {
mixed CanCapture(object who, object target) {
","/verbs/creators/dest.c":"static void create() {
mixed can_dest_obj(string str) {
mixed can_dest_str(){
mixed do_dest_obj(object ob){
mixed do_dest_obs(object array obs) {
mixed do_dest_str(string str){
","/verbs/items/capture.c":"static void create() {
mixed can_capture_liv_word_obj() {
mixed do_capture_liv_word_obj(object target, string word, object tool) {
","/lib/poison.c":"static void create() {
mixed eventSpreadPoison(object who, object target) {
int GetPoisonUses() { return PoisonUses; }
int SetPoisonStrength(int x) { return (PoisonStrength = x); }
mixed indirect_poison_obj_with_obj() {
mixed GetPoisonStrength() { return PoisonStrength; }
int SetPoisonUses(int x) { return (PoisonUses = x); }
","/secure/sefun/arrays.c":"mixed array scramble_array(mixed array arr){
mixed array distinct_array(mixed array arr) {
mixed array singular_array(mixed array arr) {
","/verbs/creators/add.c":"static void create() {
mixed do_add_obj_to_obj(object ob, object ob2) {
mixed can_add_obj_to_obj(string one, string two){
mixed can_add_obj_to_here(string one) { return 1; }
mixed can_add_obj_to_room(string one) { return 1; }
mixed do_add_obj_to_here(object ob){
mixed do_add_obj_to_room(object ob){
","/verbs/players/wake.c":"static void create() {
mixed can_wake() {
mixed do_wake() {
","/verbs/items/search.c":"static void create() {
mixed do_search_obj(object ob) {
mixed do_search_str_word_obj(string str, object ob) {
mixed can_search() {
mixed can_search_obj() {
mixed can_search_str_word_obj() {
","/verbs/items/light.c":"static void create() {
mixed can_light_obj() {
mixed can_light_obj_with_obj() {
mixed do_light_obj(object target) {
mixed do_light_obj_with_obj(object target, object source) {
mixed do_light_obs(mixed array targs) {
mixed do_light_obs_with_obj(mixed array targs, object source) {
","/lib/comp/weapon.c":"int eventStrike(object target) {
string array GetSave() {
mixed eventEquip(object who, string array limbs) {
mixed eventUnequip(object who) {
mixed CanEquip(object who, string array limbs) {
int GetHands() {
int eventDeteriorate(int type) {
string GetWeaponType() {
string GetEquippedShort() {
varargs string GetEquippedDescription(object who) {
int SetHands(int x) {
string SetWeaponType(string str) {
int GetWielded(){
mixed SetWield(mixed val) {
mixed direct_remove_obj() {
mixed direct_wear_obj() {
","/lib/std/story.c":"static void create() {
void PickTale( string taletotell ) {
void TellTale( int part ) {
string SetTalesDir(string dir) {
string GetTalesDir() { return TalesDir; }
string SetNoTaleMessage(string notalemessage) {
string GetNoTaleMessage() { return NoTaleMessage; }
int GetTellingTale() { return AlreadyTellingTale; }
","/lib/body.c":"mixed eventFall() {
varargs int eventReceiveDamage(mixed agent, int type, int x, int internal,
void eventCompleteHeal(int x) {
varargs int GetHealthPoints(string limb) {
void NewBody(string race) {
string GetName() { return 0; }
static void heart_beat() {
string GetRace() { return 0; }
string GetCapName() { return 0; }
static void create() {
string GetLong(string nom) {
varargs int eventDie(mixed agent) {
int GetMass(){
int GetExperiencePoints() { return ExperiencePoints; }
int AddAlcohol(int x) { return (Alcohol += x); }
int GetAlcohol() { return Alcohol; }
int AddCaffeine(int x) { return (Caffeine += x); }
int GetCaffeine() { return Caffeine; }
int AddFood(int x) { return (Food += x); }
int GetFood() { return Food; }
int AddDrink(int x) { return (Drink += x); }
int GetDrink() { return Drink; }
int AddPoison(int x) {
int GetPoison() { return Poison; }
int GetDying() { return Dying; }
string GetResistance(int type) { return \"none\"; }
int GetHeartRate() {
int GetHealRate() {
mixed SetProtect(function f) { return (Protect = f); }
function GetProtect() { return Protect; }
int GetHeartModifier() {
varargs int AddHeartModifier(int x, int t) {
int AddHP(int hp){
string GetAffectLong(){
int CanFly(){
int SetRespiration(int i){
int SetBodyType(int i){
int GetEncumbrance(){
string SetBodyComposition(string str){
string GetBodyComposition(){
int GetPacifist(){
int SetPacifist(int i){
int SetCanBite(int i){
int GetCanBite(){
string array SetExtraChannels(string array chans){
mixed direct_turn_liv() {
int eventCollapse() {
void ParseHook(string str){
mixed CanRemoveItem(object ob) { return 1; }
private void checkCollapse() {
string array GetEquippedLimbs(){
int HealLimb(string limb){
string GetMissingLimbParent(string limb) { return MissingLimbs[limb][\"parent\"]; }
string array GetMissingLimbParents(string limb) {
int eventCompareLimbs(string limb1, string limb2){
int AddLead(string ammo,int number){
int GetLead(string ammo){
int AddExperiencePoints(mixed x) {
int AddQuestPoints(mixed x) {
int SetMelee(int i) { melee = i; return melee; }
int GetMelee() { return melee; }
int GetSleeping() { return Sleeping; }
void eventCheckHealing() {
varargs mixed eventBuy(mixed arg1, mixed arg2, mixed arg3){
int GetSize(){
int GetRespiration(){
int GetBodyType(){
int SetMass(int i){
int SetSize(int i){
void eventReconnect() {
string array GetExtraChannels(){
string array AddExtraChannels(string array chans){
int GetDeathEvents(){
int SetDeathEvents(int i){
int GetQuestPoints() { return QuestPoints; }
varargs int eventHealDamage(int x, int internal, mixed limbs) {
int eventCheckProtection(object agent, int type, int damage) {
mixed eventReceiveThrow(object who, object what) {
int eventRemoveItem(object ob) {
int eventWear(object ob, mixed limbs) {
mixed CanWear(object ob, string array limbs) {
varargs int AddLimb(string limb, string parent, int classes, int array armors) {
varargs int RestoreLimb(string limb, int recurse) {
varargs string array GetMissingLimbs(int not_default) {
int DestLimb(string limb) {
int RemoveLimb(string limb, mixed agent) {
string GetLimbParent(string limb) { return Limbs[limb][\"parent\"]; }
string GetRandomLimb(string targ) {
string GetTorso() {
string array GetLimbs() {
int GetLimbClass(string limb) { return Limbs[limb][\"class\"]; }
string array GetLimbChildren(string limb) {
string array GetWieldingLimbs() {
varargs int AddFingers(string limb, int x) {
int GetFingers(string limb) {
varargs object array GetWorn(string limb) {
varargs mixed GetWielded(string limb) {
varargs static int AddHealthPoints(int x, string limb, mixed agent) {
varargs int GetMaxHealthPoints(string limb) { return 0; }
int AddMagicPoints(int x) {
int GetMagicPoints() { return MagicPoints; }
int GetMaxMagicPoints() { return 0; }
float AddStaminaPoints(mixed x) {
int GetStaminaPoints() { return to_int(StaminaPoints); }
float GetMaxStaminaPoints() {  return 0; }
int AddMagicProtection(class MagicProtection cl) {
int RemoveMagicProtection(int i) {
int SetSleeping(int x) { return (Sleeping = x); }
string array RemoveExtraChannels(string array chans){
string GetHealthShort() {
mixed CanManipulate(){
","/lib/leader.c":"static void create() {
int eventPreAttack(object ob) {
mixed eventAsk(object who, string str) {
void eventJoin(object who, string args) {
void eventConvert(object who, string args) {
void eventPreview(object who, string args) {
int eventTeachPlayer(object who, string spell) {
","/lib/props/uniqueness.c":"int GetUnique() {
int array SetRarity(int count, int days) {
int array GetRarity() {
int SetUnique(int x) {
","/lib/props/radiance.c":"int SetRadiantLight(int x) {
int GetRadiantLight(int ambient) {
int GetBaseRadiance(int foo){
","/secure/sefun/ordinal.c":"string ordinal(int x) {
","/secure/lib/net/generic.c":"void create(){
static void read_callback(int fd, buffer data){
static void close_callback(int fd){
void StartServer(){
static void listen_callback(int fd){
","/lib/lvs/position.c":"mixed eventFall(){
mixed eventStand() {
varargs mixed eventLay(object target) {
varargs mixed eventSit(object target) {
int GetPosition() {
mixed eventLand(){
string GetFurnitureName(){
mixed eventFly(){
int SetPosition(int x) {
","/lib/bot.c":"static void create() {
string GetLong(string nom) {
varargs int eventDie(object agent) {
","/verbs/players/evade.c":"static void create() {
mixed can_evade_liv() { return 1; }
mixed do_evade_liv(object ob) {
","/lib/std/storage.c":"int GetOpacity() {
int SetOpacity(mixed arg){
varargs mixed CanShowInterior(object who, object target) {
int inventory_visible() {
int GetRadiantLight(int ambient) {
int eventReceiveObject(object ob) {
mixed CanGetFrom(object who, object item) {
mixed CanPutInto(object who, object what) {
int inventory_accessible() {
void create() {
static mixed array AddSave(mixed array vars) {
int SetSaveRecurse(int x) {
string array GetSave() {
mixed CanOpen(object who, string id) {
mixed CanClose(object who, string id) {
mixed CanLock(object who, string id) {
mixed CanPick(object who, string id) {
mixed CanUnlock(object who, string id, object key) {
void PutCheck(){
int GetMaxRecurseDepth(){
int SetMaxRecurseDepth(int i){
int GetCanClose() {
int SetCanClose(int x) {
int GetCanLock() {
int SetCanLock(int x) {
void SetKey(string key) {
int GetRecurseDepth(){
int AddRecurseDepth(int i){
int SetRecurseDepth(int i){
","/lib/pile.c":"string GetShort() {
int eventMove(mixed dest) {
static void create() {
int GetMass() {
string array GetId() {
void init(){
void SetPile(string str, int amt) {
void SetCurrency(string str, int amt) {
mixed eventGetMoney(object who, int amount, string curr) {
string GetPileType() { return PileType; }
int GetPileAmount() { return PileAmount; }
mixed direct_get_wrd_wrd_out_of_obj(string num, string curr) {
mixed direct_get_wrd_wrd_from_obj(string amt, string curr) {
","/verbs/players/bump.c":"static void create() {
mixed can_bump_liv() {
mixed do_bump_liv(object ob) {
void MoveBack(object ob, string where) {
","/lib/learn.c":"int eventLearn(object who, string what){
int direct_learn_str_from_liv(){ return 1;}
int direct_learn_to_str_from_liv(){ return 1;}
int CanLearn(){
","/verbs/items/sell.c":"static void create() {
mixed can_sell_obj_to_liv() {
mixed can_sell_liv_obs() {
mixed do_sell_obj_to_liv(object ob, object vendor) {
mixed do_sell_liv_obj(object vendor, object item) {
mixed do_sell_obs_to_liv(object array items, object vendor) {
mixed do_sell_liv_obs(object vendor, object array items) {
","/lib/events/get_from.c":"mixed CanGetFrom(object who, object item) {
mixed eventPutInto(object who, object what) {
mixed eventPutOnto(object who, object what) {
mixed indirect_get_obj_from_obj(object item, object container) {
mixed indirect_get_obj_out_of_obj(object item, object container) {
mixed indirect_get_obj_obj(object item, object container) {
mixed indirect_get_obs_from_obj(object array items, object storage) {
mixed indirect_get_obs_out_of_obj(object array items, object storage) {
mixed indirect_get_obs_obj(object array items, object storage) {
mixed indirect_put_obj_word_obj(object what, string word, object storage) {
mixed indirect_put_obj_obj(object what, string word, object storage) {
mixed indirect_put_obs_word_obj(object array items, string wrd, object storage) {
mixed indirect_put_obs_obj(object array items, string wrd, object storage) {
int inventory_visible() {
mixed CanPutOnto(object who, object item) {
mixed eventGetFrom(object who, object array what) {
mixed CanPutInto(object who, object item) {
int inventory_accessible() {
","/verbs/players/sink.c":"static void create() {
mixed can_sink_down() {
mixed do_sink_down(){
","/lib/pistol.c":"int CanReceive(object ob){
int CanRelease(object ob){
mixed CanGetFrom(object who, object item) {
mixed CanPutInto(object who, object what) {
static void create(){
int eventShoot(object ob, mixed target){
void init(){
int SetMaxAmmo(int x) { MaxAmmo=x; return 1; }
string GetPistolType() { return PistolType; }
int SetCaliber(int x) { Caliber=x; return 1; }
int SetMillimeter(int x) { Millimeter=x; return 1; }
int SetPistolType(string str) { PistolType=str; return 1; }
int SetAmmoType(string str) { AmmoType=str; return 1; }
int GetCaliber() { return Caliber; }
int GetMillimeter() { return Millimeter; }
string GetAmmoType() { return AmmoType; }
int GetMag() { return mag; }
int SetMag(int i) { mag=i; return 1; }
int SetLoaded(int i) { loaded=i; return 1; }
int GetLoaded() { return loaded; }
int doMagUnload(){
int startLoad(string str){
int startUnload(string str){
int eventFire(string str){
int InitRevolver(string array arr){
int GetMaxAmmo() { return MaxAmmo; }
int CalculateAmmoSize(){
int missed_shot(){
int LoadRevolver(string str){
int LoadAuto(string str){
int doRevolverUnload(string what, string num){
int SetAmmoFile(string str) { AmmoFile=str; return 1; }
","/secure/sefun/load_object.c":"int update(string file){
object load_object(string str) {
","/lib/shop.c":"static void create() {
void init() {
int list(string str) {
int show(string str) {
int price(string str) {
int appraise(string str) {
","/secure/sefun/morality.c":"int moral_act(object agent, object target, int amount) {
","/verbs/items/press.c":"static void create() {
mixed can_press_obj() {
mixed can_press_str_on_obj() {
mixed do_press_obj(object target) {
varargs mixed do_press_str_on_obj(string thing, object target) {
","/lib/chat.c":"static void create() {
int eventDestruct() {
static void net_dead() {
string array AddChannel(mixed val) {
void eventReconnect() {
string array RemoveChannel(mixed val) {
string array GetChannels() { return keys(Channels); }
string array RestrictChannel(mixed val) {
string array UnrestrictChannel(mixed val) {
string array GetRestrictedChannels() { return (RestrictedChannels + ({})); }
mapping returnChannels(){
static string chat_command(string str) {
int GetNoChanColors(){
int SetNoChanColors(int x){
","/lib/money.c":"int AddMoney(string type, int amount) {
varargs void SetMoney(mixed val, int amount) {
mapping GetMoneyMap() { return copy(Money); }
","/verbs/players/crawl.c":"static void create() {
mixed can_crawl_str(string str) {
mixed do_crawl_into_str(string str) {
mixed can_crawl_into_str(string str) {
mixed do_crawl_str(string str) {
","/lib/shadow_hook.c":"nomask int AddShadow(object sombra){
nomask int RemoveShadow(object sombra){
nomask mapping GetShadows(){
","/verbs/players/party.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_party_wrd(string cmd) {
mixed can_party_wrd_wrd(string cmd, string party) {
mixed can_party_wrd_liv(string cmd) {
mixed do_party_wrd(string cmd) {
mixed do_party_wrd_wrd(string cmd, string party) {
mixed do_party_wrd_liv(string cmd, object targ) {
","/secure/sefun/compare_array.c":"int compare_array(mixed array arr1, mixed array arr2){
int arrcmp(mixed array arr1, mixed array arr2){
","/verbs/common/whisper.c":"static void create() {
mixed can_whisper_to_liv(object target) {
mixed can_whisper_in_wrd(string lang) {
mixed can_whisper_in_wrd_to_liv(string wrd, object ob) {
mixed can_whisper_to_liv_str(object targ, string str) {
mixed can_whisper_in_wrd_to_liv_str(string lang, object targ, string str) {
mixed can_whisper_to_liv_in_wrd_str(object targ, string lang, string str) {
mixed do_whisper() { return 1; }
mixed do_whisper_to_liv(object ob) { return 1; }
mixed do_whisper_in_wrd(string wrd) { return 1; }
mixed do_whisper_in_wrd_to_liv(string str, object ob) { return 1; }
mixed do_whisper_to_liv_str(object targ, string str) {
mixed do_whisper_in_wrd_to_liv_str(string lang, object targ, string str) {
mixed do_whisper_to_liv_in_wrd_str(object targ, string lang, string str) {
","/lib/events/sell.c":"mixed direct_sell_obj_to_liv() {
mixed indirect_sell_liv_obj() {
mixed CanSell(object seller) {
","/secure/sefun/user_path.c":"string user_path(string name){
","/lib/std/dummy.c":"static int Destruct() {
varargs static void create(string array id, mixed long, string array adj) {
varargs string array SetId(mixed ids...) {
varargs int GetInvis(object ob) {
int isDummy() {
mixed eventMove(mixed dest) {
","/verbs/players/lie.c":"static void create() {
mixed can_lie_down() {
mixed can_lie_word_obj() {
mixed can_lie_down_word_obj() {
mixed do_lie_down() {
mixed do_lie_word_obj(string word, object target) {
mixed do_lie_down_word_obj(string word, object target) {
","/verbs/items/ring.c":"static void create() {
mixed do_ring_obj(object target) {
mixed do_ring_str_on_obj(string str, object target) {
mixed can_ring_obj() {
mixed can_ring_str_on_obj() {
mixed can_ring_obj_with_obj() {
mixed can_ring_str_on_obj_with_obj() {
mixed do_ring_obj_with_obj(object target, object tool) {
mixed do_ring_str_on_obj_with_obj(string str, object target, object tool) {
","/lib/donate.c":"static void create() {
string GetLong(string str) {
static void init() {
int eventDonate(string amt, string type) {
string SetLocalCurrency(string currency) {
string GetOwner() {return Owner;}
string SetOwner(string owner) {return (Owner = owner);}
int GetAssets() {return TotalAssets;}
string GetLocalCurrency() {return LocalCurrency;}
int AddAssets(int amount) {
","/lib/events/drink.c":"varargs mixed CanDrink(object who, string substance) {
varargs mixed eventDrink(object who, string substance) {
mixed direct_drink_obj() {
mixed direct_drink_from_obj() {
mixed direct_drink_str_from_obj(string str) {
","/lib/virtual/virt_land.c":"varargs static void create(int x, int y,int z) {
int GetMedium() {
mapping GetDirectionMap(){
void SetVirtualExits(int x, int y, int z){
varargs void SetLongAndItems(int x, int y, int z) {
int SetMasterMap(mixed map_name){
int SetVirtFile( string file ){
string SetResetMessage(mixed str){ Reset_Message = str;}
void SetCoordinates(int x, int y, int z) {
int SetMedium(int medium){ return Medium = medium;}
string GetReverseDirection(string dir){
varargs mixed GetMapType(int x, int y, int z){
mapping SetSurroundAreas(int x, int y, int z){
void ResetSurroundExits(){
void ResetLocation(){
string GetAreaType(){ return AreaType;}
varargs mixed GetCoordinates(int level) {
object GetMasterMap(){ return Map_Master;}
varargs string array GetNonExits(string array extra){
mapping GetSurroundAreas(){ return Surrounding_Areas; }
void PreAddEnter(mixed dir, string file){
","/verbs/items/read.c":"static void create() {
mixed can_read_obj() {
mixed can_read_str_word_obj() {
mixed do_read_obj(object ob) {
mixed do_read_str_on_obj(string str, object ob) {
mixed do_read_str_in_obj(string str, object ob) {
mixed do_read_str_of_obj(string str, object ob) {
mixed do_read_str_from_obj(string str, object ob) {
","/lib/shell.c":"void create(){
string GetPistolType() { return pistoltype; }
int SetCaliber(int x) { caliber=x; return 1; }
int SetMillimeter(int x){ millimeter=x; return 1; }
int SetPistolType(string str) {pistoltype=str; return 1; }
int SetAmmoType(string str) {ammotype=str; return 1; }
int GetCaliber() { return caliber; }
int GetMillimeter() { return millimeter; }
string GetAmmoType() { return ammotype; }
","/lib/talk.c":"int direct_ask_liv_str() { return 1; }
mixed eventTalkRespond(object who, object targ, int cls, string msg, string lang) {
varargs mixed eventSpeak(object target, int cls, string msg, string lang) {
int direct_ask_liv_to_str() { return 1; }
int direct_request_str_from_liv() { return 1; }
int direct_say_to_liv() { return 1; }
int direct_say_to_liv_str() { return 1; }
int direct_whisper_to_liv() { return 1; }
int direct_whisper_in_wrd_to_liv() { return 1; }
int direct_whisper_to_liv_str() { return 1; }
int direct_whisper_in_wrd_to_liv_str() { return 1; }
int direct_whisper_to_liv_in_wrd_str() { return 1; }
string SetSpeakColor(string str){
varargs mixed CanSpeak(object target, string verb, string msg, string lang) {
string GetSpeakColor() { return SpeakColor; }
int eventTellHist(string str){
string array GetTellHistory(){
varargs mixed eventHearTalk(object who, object target, int cls, string verb,
","/verbs/players/request.c":"static void create() {
mixed can_request_str_from_liv() {
mixed do_request_str_from_liv(string str, object who) {
","/verbs/items/activate.c":"static void create() {
mixed can_activate() {
mixed can_activate_obj(mixed foo) {
mixed can_activate_obj_on_obj(mixed foo) {
mixed do_activate() {
varargs mixed do_activate_obj(mixed foo, mixed foo2) {
varargs mixed do_activate_obj_on_obj(mixed foo, mixed foo2) {
","/verbs/creators/resurrect.c":"static void create() {
mixed can_resurrect_obj(string str) {
mixed do_resurrect_obj(object ob) {
","/lib/potion.c":"void create(){
mixed eventDrink(object who) {
mapping GetStats(){
mapping GetSkills(){
mapping SetSkills(mapping arg){
mapping SetStats(mapping arg){
mapping GetPoints(){
mapping SetPoints(mapping arg){
int SetDuration(int i){
int GetDuration(){
","/verbs/players/marry.c":"static void create() {
mixed do_marry_liv_to_liv(object spouse1, object spouse2) {
mixed can_marry_liv_to_liv() {
","/verbs/creators/copy.c":"static void create() {
mixed do_copy_obj_str(object ob, string str) {
mixed can_copy_obj_str(object ob, string str) { return 1; }
mixed can_copy_str(string str) { return 1; }
mixed do_copy_str(string str) {
","/lib/mayor.c":"static void create() {
static string SetLocalCurrency(string str) {
static void EvaluateCitizenshipRequest() {
mixed CanRequestCitizenship(object who) {
mixed eventRequestCitizenship(object who) {
string GetLocalCurrency() {
int GetTax() {
static int SetTax(int x) {
","/spells/buffer.c":"static void create() {
int eventCast(object who, int level, string race, object array targets) {
int hitCallback(object who, object agent, int x, class MagicProtection cl) {
void endCallback(object who) {
",])
