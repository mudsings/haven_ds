#/secure/daemon/function.c
FileSize (["/verbs/items/use.c":711,"/verbs/players/bump.c":5146,"/verbs/creators/createfix.c":1658,"/verbs/items/touch.c":950,"/verbs/items/eat.c":1070,"/spells/missile.c":1216,"/verbs/items/buy.c":1119,"/verbs/players/evade.c":793,"/verbs/items/drop.c":2697,"/verbs/rooms/fly.c":2477,"/verbs/common/whisper.c":2532,"/verbs/rooms/cast.c":1202,"/verbs/items/pour.c":1819,"/verbs/items/press.c":1052,"/spells/restoration.c":2629,"/verbs/items/look.c":4529,"/verbs/items/ring.c":1466,"/secure/lib/net/client.c":3278,"/secure/lib/net/socket.c":1355,"/secure/lib/net/h_ftpd.c":30350,"/verbs/items/wield.c":3069,"/verbs/players/learn.c":1322,"/verbs/items/shake.c":896,"/verbs/creators/copy.c":4347,"/verbs/players/describe.c":919,"/verbs/items/give.c":4484,"/verbs/items/strike.c":587,"/verbs/creators/echo.c":1962,"/verbs/players/ignore.c":2026,"/verbs/rooms/go.c":1816,"/verbs/players/withdraw.c":876,"/verbs/items/bury.c":1838,"/secure/lib/net/ftp_client.c":4271,"/verbs/items/shoot.c":1169,"/secure/lib/net/http.c":2303,"/verbs/items/close.c":936,"/verbs/items/empty.c":413,"/verbs/items/search.c":1600,"/verbs/rooms/enter.c":1198,"/verbs/items/capture.c":941,"/verbs/players/sleep.c":1012,"/spells/fireball.c":1442,"/verbs/items/judge.c":3918,"/spells/buffer.c":2808,"/verbs/players/backstab.c":6453,"/verbs/players/news.c":1018,"/verbs/items/put.c":4723,"/verbs/players/request.c":1303,"/verbs/creators/dest.c":1728,"/verbs/common/shout.c":1906,"/verbs/players/dismount.c":1376,"/verbs/items/consult.c":961,"/verbs/items/unwield.c":1326,"/verbs/items/steal.c":3910,"/verbs/rooms/jump.c":2919,"/secure/lib/net/telnet_client.c":4786,"/verbs/players/wake.c":953,"/verbs/items/donate.c":1121,"/secure/lib/std/access.c":2986,"/verbs/items/sell.c":1867,"/verbs/items/throw.c":2163,"/verbs/creators/pulsecheck.c":1018,"/verbs/creators/reload.c":4859,"/verbs/items/drink.c":1481,"/verbs/creators/zap.c":1227,"/verbs/players/befriend.c":555,"/verbs/players/ride.c":2044,"/verbs/players/lead.c":1004,"/verbs/items/get.c":3946,"/spells/cure.c":2042,"/verbs/players/vote.c":925,"/verbs/items/fill.c":718,"/secure/lib/file.c":5431,"/verbs/items/listen.c":1827,"/verbs/common/say.c":1755,"/verbs/items/unlock.c":1001,"/verbs/items/light.c":2819,"/secure/lib/connect.first.c":5001,"/verbs/players/stealth.c":2223,"/verbs/items/lock.c":1109,"/verbs/common/mail.c":1910,"/secure/lib/net/remote.c":5248,"/verbs/players/sit.c":1835,"/verbs/players/teach.c":1478,"/verbs/players/crawl.c":1788,"/verbs/players/cast.c":2018,"/verbs/items/remove.c":2214,"/verbs/items/smell.c":1582,"/verbs/creators/add.c":3194,"/verbs/items/judge1.c":3918,"/verbs/players/target.c":2523,"/verbs/common/ask.c":2725,"/verbs/items/equate.c":3918,"/verbs/items/move.c":845,"/verbs/items/extinguish.c":1261,"/verbs/items/open.c":1448,"/verbs/players/abandon.c":496,"/secure/lib/bboard.c":8490,"/verbs/players/lie.c":1311,"/verbs/players/attack.c":3083,"/verbs/common/yell.c":1571,"/verbs/items/turn.c":1383,"/verbs/items/bait.c":929,"/verbs/players/party.c":3982,"/verbs/creators/resurrect.c":1504,"/verbs/creators/initfix.c":2157,"/verbs/rooms/climb.c":1950,"/spells/meditate.c":1326,"/verbs/players/nominate.c":933,"/verbs/players/follow.c":2509,"/verbs/common/body.c":3481,"/verbs/items/pull.c":913,"/verbs/creators/delete.c":4582,"/verbs/items/balance.c":2815,"/verbs/items/wear.c":1863,"/verbs/creators/modify.c":3947,"/secure/lib/net/ftp.c":25390,"/verbs/items/dig.c":2282,"/verbs/players/stand.c":1128,"/verbs/rooms/stop.c":864,"/verbs/items/free.c":827,"/verbs/common/speak.c":2362,"/verbs/items/pick.c":2712,"/secure/lib/net/ftp_data_connection.c":5278,"/verbs/rooms/fish.c":1061,"/verbs/players/mount.c":599,"/verbs/creators/codesay.c":1855,"/verbs/items/poison.c":1424,"/verbs/items/read.c":1359,"/verbs/players/pray.c":1701,"/verbs/players/marry.c":1605,"/secure/lib/connect.c":17579,"/secure/lib/net/server.c":8356,])
FunctionCache (["/verbs/items/use.c":"static void create() {
mixed can_use_obj_to_str(string str) { return 1; }
mixed do_use_obj_to_str(object ob, string str) {
","/verbs/players/bump.c":"static void create() {
mixed do_bump_liv(object ob) {
void MoveBack(object ob, string where) {
mixed can_bump_liv() {
","/verbs/creators/createfix.c":"static void create() {
mixed can_createfix_obj(string str) {
mixed can_createfix_word(string str) { return can_createfix_obj(\"foo\"); }
mixed do_createfix_obj(object ob) {
mixed do_createfix_word(string wrd) {
","/verbs/items/touch.c":"static void create() {
mixed can_touch_obj() {
mixed can_touch_str_word_obj() {
mixed do_touch_obj(object ob) {
mixed do_touch_str_word_obj(string str, object ob) {
","/verbs/items/eat.c":"static void create() {
void eventEat(object who, object what) {
mixed can_eat_obj() {
mixed do_eat_obj(object ob) {
","/spells/missile.c":"static void create() {
","/verbs/items/buy.c":"static void create() {
mixed can_buy_str_from_liv(string str) {
mixed do_buy_str_from_liv(string str, object vendor) {
","/verbs/players/evade.c":"static void create() {
mixed can_evade_liv() { return 1; }
mixed do_evade_liv(object ob) {
","/verbs/items/drop.c":"static void create() {
mixed can_drop_obj(object ob) { return this_player()->CanManipulate(); }
mixed can_drop_wrd_wrd(string num, string curr) {
mixed do_drop_obj(object ob) {
mixed do_drop_obs(mixed array res) {
mixed do_drop_wrd_wrd(string num, string curr) {
","/verbs/rooms/fly.c":"static void create() {
mixed can_fly_str(string str) {
mixed can_fly_into_str(string str) {
mixed do_fly_str(string str) {
mixed do_fly_into_str(string str) {
","/verbs/common/whisper.c":"static void create() {
mixed can_whisper_to_liv(object target) {
mixed can_whisper_in_wrd(string lang) {
mixed can_whisper_in_wrd_to_liv(string wrd, object ob) {
mixed can_whisper_to_liv_str(object targ, string str) {
mixed can_whisper_in_wrd_to_liv_str(string lang, object targ, string str) {
mixed can_whisper_to_liv_in_wrd_str(object targ, string lang, string str) {
mixed do_whisper() { return 1; }
mixed do_whisper_to_liv(object ob) { return 1; }
mixed do_whisper_in_wrd(string wrd) { return 1; }
mixed do_whisper_in_wrd_to_liv(string str, object ob) { return 1; }
mixed do_whisper_to_liv_str(object targ, string str) {
mixed do_whisper_in_wrd_to_liv_str(string lang, object targ, string str) {
mixed do_whisper_to_liv_in_wrd_str(object targ, string lang, string str) {
","/verbs/rooms/cast.c":"static void create() {
string GetHelp(string str) {
mixed can_cast_obj(object ob) {
mixed do_cast_obj(object ob) {
","/verbs/items/pour.c":"static void create() {
mixed can_pour_obj_into_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_in_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_onto_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_on_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_out(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_out_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_from_obj_into_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_pour_from_obj_into_obj(object from, object to) {
mixed do_pour_from_obj_in_obj(object from, object to) {
mixed do_pour_obj_onto_obj(object from, object to) {
mixed do_pour_obj_on_obj(object from, object to) {
mixed do_pour_obj_in_obj(object from, object to) {
mixed do_pour_obj_into_obj(object from, object to) {
mixed do_pour_obj_out(object from) {
mixed do_pour_out_obj(object from) {
","/verbs/items/press.c":"static void create() {
mixed can_press_obj() {
mixed can_press_str_on_obj() {
mixed do_press_obj(object target) {
varargs mixed do_press_str_on_obj(string thing, object target) {
","/spells/restoration.c":"static void create() {
varargs int CanCast(object who, int level, string limb, object array targs) {
varargs int eventCast(object who, int level, string limb, object array targs) {
int GetMagicCost() {
","/verbs/items/look.c":"static void create() {
mixed can_look() {
mixed can_look_at_str(string str, string verb) {
mixed can_look_at_obj(string verb, string id) {
mixed can_look_in_obj(string verb, string id) {
mixed can_look_inside_obj(string verb, string id) {
mixed can_look_at_obj_word_obj(string verb, string targ, string store) {
mixed can_look_at_str_on_obj(string targ, string verb, string id1, string id2){
varargs mixed do_look_obj(object ob, mixed array args...) {
mixed do_look_str(string str) {
varargs mixed do_look_at_obj(object ob, mixed arg) {
mixed do_look_at_str(string str) {
mixed do_look_in_obj(object ob, mixed arg){
mixed do_look_inside_obj(object ob,mixed arg) {
mixed do_look_at_obj_word_obj(object target, object storage, mixed arg) {
varargs mixed do_look_at_str_on_obj(string id, object ob) {
mixed can_look_str(string str, string verb) {
mixed can_look_obj(string verb, string id) {
mixed can_look_at_obj_on_obj(object targ, object where, string id1, string id2){
","/verbs/items/ring.c":"static void create() {
mixed can_ring_obj() {
mixed can_ring_str_on_obj() {
mixed can_ring_obj_with_obj() {
mixed can_ring_str_on_obj_with_obj() {
mixed do_ring_obj(object target) {
mixed do_ring_str_on_obj(string str, object target) {
mixed do_ring_obj_with_obj(object target, object tool) {
mixed do_ring_str_on_obj_with_obj(string str, object target, object tool) {
","/secure/lib/net/client.c":"int eventDestruct() {
function SetRead(function f) { return (Read = f); }
static void eventReadCallback(int fd, mixed val) {
static void eventClose(class client sock) {
static void eventWriteCallback(int fd) {
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
static void eventSocketClose() { }
static void eventSocketError(string str, int x) {
int SetSocketType(int type) { return (SocketType = type); }
","/secure/lib/net/socket.c":"static void create(int fd, object owner) {
int eventRead(mixed data) {
varargs static int eventWrite(mixed data, int close) {
int GetDescriptor() {
static int eventCloseSocket() {
int eventSocketClosed() {
string GetAddress() {
","/secure/lib/net/h_ftpd.c":"void Destruct(){
static void create(int fd, object owner){
private void eventReadFtpData(mixed text){
nomask static int check_privs(string file, string oper) {
string GetKeyName(){ return Session->user; }
private void eventCmdPasv(string arg)
private void eventCmdUser(string arg){
private void eventCmdRetr(string arg){
private void eventCmdStor(string arg){
private void eventCmdNlst(string arg){
private void eventCmdList(string arg){
private void eventCmdCdup(string arg){ eventCmdCwd(\"..\"); }
private void eventCmdQuit(string arg){
private void eventCmdType(string arg){
private void eventCmdPort(string arg){
void eventCmdNoop(string arg){
private void eventCmdDele(string arg){
private void eventCmdRnfr(string arg) {
private void eventCmdRnto(string arg) {
private void eventCmdStou(string arg){
private void eventCmdSyst(string arg) {
private void eventCmdMkd(string arg){
void eventCmdPwd(string arg){
private void eventCmdRmd(string arg) {
private string find_flags(string arg){
private string strip_flags(string arg){
string FindPrevDir( string path ) {
private void idle_time_out(){
private string GetFtpWelcomeMsg(){
string GetUniqueFileName(string arg){
void StartService(){
private void eventDestructDataPipe(mixed f){
private void eventCmdPswd(string arg){
string RetrieveCmdCallback(object ob){
private void do_list( string arg, int ltype){
","/verbs/items/wield.c":"static void create() {
string array GetFreeLimbs(object who) {
mixed can_wield_obj() {
mixed can_wield_obj_word_str() {
mixed do_wield_obj(object ob) {
mixed do_wield_obj_word_str(object ob, string word, string str) {
mixed do_wield_obs(mixed array targs) {
","/verbs/players/learn.c":"static void create()
mixed can_learn_str_from_liv(string str, object ob)
mixed can_learn_to_str_from_liv(string str, object ob){
mixed do_learn_str_from_liv(string spell, object target){
mixed do_learn_to_str_from_liv(string spell, object target){
","/verbs/items/shake.c":"static void create() {
mixed can_shake_obj() {
mixed can_shake_str_on_obj() {
mixed do_shake_obj(object target) {
varargs mixed do_shake_str_on_obj(string thing, object target) {
","/verbs/creators/copy.c":"static void create() {
mixed do_copy_obj_str(object ob, string str) {
mixed can_copy_obj_str(object ob, string str) { return 1; }
mixed can_copy_str(string str) { return 1; }
mixed do_copy_str(string str) {
","/verbs/players/describe.c":"static void create() {
mixed can_describe_str(string str) {
mixed do_describe_str(string str) {
","/verbs/items/give.c":"static void create() {
mixed can_give_liv_obj() {
mixed can_give_obj_to_liv(mixed arg1, mixed arg2) {
mixed can_give_liv_wrd_wrd(object targ, string num, string curr) {
mixed can_give_wrd_wrd_to_liv(string num, string curr, object targ) {
mixed do_give_liv_obj(object target, object what) {
mixed do_give_obj_to_liv(object what, object target) {
mixed do_give_liv_wrd_wrd(object target, string num, string curr) {
mixed do_give_wrd_wrd_to_liv(string num, string curr, object target) {
mixed do_give_liv_obs(object target, mixed array items) {
mixed do_give_obs_to_liv(mixed array items, object target) {
","/verbs/items/strike.c":"static void create() {
mixed can_strike_obj() {
mixed do_strike_obj(object ob) {
","/verbs/creators/echo.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_echo() {
mixed can_echo_to_liv_str(object ob, string str) {
mixed can_echo_str(string str) {
mixed do_echo() { return 1; }
mixed do_echo_to_liv_str(object who, string what) {
mixed do_echo_str(string str) {
void eventEcho(object array targs, string str) {
","/verbs/players/ignore.c":"static void create() {
mixed can_ignore(){ return 1; }
mixed can_ignore_liv() { return 1; }
mixed do_ignore(){
mixed do_ignore_liv(object ob) {
mixed do_ignore_lvs(mixed array targets) {
","/verbs/rooms/go.c":"static void create() {
mixed can_go_str(string str) {
mixed can_go_into_str(string str) {
mixed do_go_str(string str) {
mixed do_go_into_str(string str) {
","/verbs/players/withdraw.c":"static void create() {
mixed can_withdraw() {
mixed do_withdraw() {
","/verbs/items/bury.c":"static void create() {
static void eventBury(object who, object tool, object what, object check) {
varargs static void eventPrepareBury(object who, object tool, object what) {
mixed can_bury_str_with_obj() {
mixed can_bury_obj_with_obj() {
mixed do_bury_str_with_obj(string str, object tool) {
mixed do_bury_obj_with_obj(object what, object tool) {
","/secure/lib/net/ftp_client.c":"int eventDestruct() {
function SetRead(function f) { return (Read = f); }
static void eventReadCallback(int fd, mixed val) {
varargs static int eventClose(class client sock, int aborted) {
static void eventWriteCallback(int fd) {
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
static void eventSocketClose() { }
static void eventSocketError(string str, int x) {
int SetSocketType(int type) { return (SocketType = type); }
function SetClose(function f) { return (Close = f); }
function SetWrite(function f) { return (Write = f); }
int eventWriteDestruct() {
","/verbs/items/shoot.c":"static void create() {
mixed can_shoot_obj_with_obj(mixed target,mixed shooter) {
mixed can_shoot_obj_at_obj(mixed shooter,mixed target) {
mixed can_shoot_obj_at_str(object shooter, string target) {
varargs mixed do_shoot_obj_at_obj(mixed shooter,mixed target) {
varargs mixed do_shoot_obj_at_str(object shooter, string target) {
varargs mixed do_shoot_obj_with_obj(mixed target,mixed shooter) {
","/secure/lib/net/http.c":"int eventRead(buffer data) {
private static void eventError(string name) {
private static mixed eventGetFile(string name) {
","/verbs/items/close.c":"static void create() {
varargs mixed do_close_obj(object ob, mixed array args...) {
mixed can_close_obj(string verb) {
","/verbs/items/empty.c":"static void create() {
mixed can_empty_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_empty_obj(object from) {
","/verbs/items/search.c":"static void create() {
mixed can_search() {
mixed can_search_obj() {
mixed can_search_str_word_obj() {
mixed do_search() {
mixed do_search_obj(object ob) {
mixed do_search_str_word_obj(string str, object ob) {
","/verbs/rooms/enter.c":"static void create() {
mixed can_enter_obj() {
mixed can_enter_into_obj() {
mixed do_enter_obj(object targ, string what) {
mixed do_enter_into_obj(object targ, string what) {
","/verbs/items/capture.c":"static void create() {
mixed can_capture_liv_word_obj() {
mixed do_capture_liv_word_obj(object target, string word, object tool) {
","/verbs/players/sleep.c":"static void create() {
mixed can_sleep() {
mixed do_sleep() {
","/spells/fireball.c":"static void create() {
","/verbs/items/judge.c":"static void create() {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed can_judge_obj_to_obj() {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
","/spells/buffer.c":"static void create() {
int eventCast(object who, int level, string race, object array targets) {
int hitCallback(object who, object agent, int x, class MagicProtection cl) {
void endCallback(object who) {
","/verbs/players/backstab.c":"static void create() {
mixed can_backstab_liv() {
mixed do_backstab_liv(object ob) {
int eventBackstab(object backstabber, object target) {
int eventStab(object backstabber, object target, object weapon) {
int eventPrintDamage(object backstabber, object target, object weapon, int percentDamage) {
","/verbs/players/news.c":"static void create() {
mixed can_news_str(string str) {
mixed do_news() { return do_news_str(\"general\"); }
","/verbs/items/put.c":"static void create() {
mixed can_put_obj_word_obj(object target, string wrd, object storage) {
mixed do_put_obj_word_obj(object what, string wrd, object storage) {
mixed do_put_obs_word_obj(mixed array res, string wrd, object storage) {
mixed eventCheckLight(object who) {
mixed can_put_obs_word_obj(object array foo1, string wrd, object foo2) {
mixed can_put_wrd_wrd_word_obj(string num, string curr,string wrd, mixed container) {
mixed do_put_wrd_wrd_word_obj(string num, string curr, mixed wort, object ob) {
","/verbs/players/request.c":"static void create() {
mixed can_request_str_from_liv() {
mixed do_request_str_from_liv(string str, object who) {
","/verbs/creators/dest.c":"static void create() {
mixed can_dest_obj(string str) {
mixed can_dest_str(){
mixed do_dest_obj(object ob){
mixed do_dest_obs(object array obs) {
mixed do_dest_str(string str){
","/verbs/common/shout.c":"static void create() {
string GetHelp(string str) {
mixed can_shout() { return \"Shout what?\"; }
mixed can_shout_str(string str) {
mixed can_shout_in_wrd_str(string lang, string str) {
mixed do_shout() { return 1; }
mixed do_shout_str(string str) {
mixed do_shout_in_wrd_str(string lang, string str) {
","/verbs/players/dismount.c":"static void create() {
mixed can_dismount_liv() {
mixed can_dismount_from_liv() {
mixed do_dismount_liv(object ob) {
mixed do_dismount_from_liv(object ob) {
","/verbs/items/consult.c":"static void create() {
mixed can_consult_obj() {
mixed can_consult_str_on_obj() {
mixed do_consult_obj(object target) {
varargs mixed do_consult_str_on_obj(string thing, object target) {
","/verbs/items/unwield.c":"static void create() {
mixed can_unwield_obj(string verb) {
mixed do_unwield_obj(object ob) {
mixed do_unwield_obs(mixed array targs) {
","/verbs/items/steal.c":"static void create() {
static void eventSteal(object who, mixed what, object target) {
mixed can_steal_wrd_from_liv(string wrd) {
mixed can_steal_obj_from_liv() {
mixed do_steal_wrd_from_liv(string wrd, object liv) {
mixed do_steal_obj_from_liv(object item, object liv) {
mixed do_steal_obs_from_liv(mixed array res, object liv) {
","/verbs/rooms/jump.c":"static void create() {
mixed can_jump_word_obj() {
mixed can_jump_word_word_obj() {
varargs mixed do_jump_in_obj(object ob, mixed array args...) {
varargs mixed do_jump_into_obj(object ob, mixed array args...) {
varargs mixed do_jump_off_obj(object ob, mixed array args...) {
varargs mixed do_jump_from_obj(object ob, mixed array args...) {
varargs mixed do_jump_through_obj(object ob, mixed array args...) {
varargs mixed do_jump_across_obj(object ob, mixed array args...) {
varargs mixed do_jump_over_obj(object ob, mixed array args...) {
varargs mixed do_jump_onto_obj(object ob, mixed array args...) {
varargs mixed do_jump_on_obj(object ob, mixed array args...) {
varargs mixed do_jump_off_of(object ob, mixed array args...) {
","/secure/lib/net/telnet_client.c":"static void create()
void init()
string help()
void read_callback( int fd, mixed message )
void close_callback( int fd )
void write_callback( int fd )
int do_connect(string args)
int do_reset( string args )
int do_reconnect()
int parse_comm( string str )
","/verbs/players/wake.c":"static void create() {
mixed can_wake() {
mixed do_wake() {
","/verbs/items/donate.c":"static void create() {
mixed can_donate_str_str(string amount, string currency){
mixed can_donate_str_str_to_str(string amount, string currency, string foo){
mixed do_donate_str_str(string amount, string currency) {
mixed do_donate_str_str_to_str(string amount, string currency, string foo){
","/secure/lib/std/access.c":"void create() {
nomask int check_access(object ob, string fun, string file, string oper) {
nomask int grant_access(string type, string file, string who) {
nomask int remove_access(string type, string file, string who) {
static void set_access(string type, function f) {
mapping query_access(string type) {
","/verbs/items/sell.c":"static void create() {
mixed can_sell_obj_to_liv() {
mixed can_sell_liv_obs() {
mixed do_sell_obj_to_liv(object ob, object vendor) {
mixed do_sell_liv_obj(object vendor, object item) {
mixed do_sell_obs_to_liv(object array items, object vendor) {
mixed do_sell_liv_obs(object vendor, object array items) {
","/verbs/items/throw.c":"static void create() {
void eventThrow(object who, object what, object where) {
mixed do_throw_obj_word_obj(object what, string word, object where) {
mixed can_throw_obj() {
mixed can_throw_obj_word_obj() {
","/verbs/creators/pulsecheck.c":"static void create() {
mixed can_pulsecheck_liv(string str) {
mixed do_pulsecheck_liv(object ob){
mixed do_pulsecheck_lvs(object array obs) {
","/verbs/creators/reload.c":"static void create() {
mixed do_reload_str_word(string wrd1, string wrd2) {
mixed do_reload_every_str(string str){
mixed can_reload_obj(string str) {
mixed can_reload_every_str(string str){
mixed can_reload_str_obj(string str) {
mixed can_reload_word(string str) {
mixed can_reload_str_word(string str, string str2) {
mixed do_reload_obj(object ob) {
mixed do_reload_str_obj(string str, object ob) {
mixed do_reload_word(string wrd) {
","/verbs/items/drink.c":"static void create() {
varargs void eventDrink(object who, object what, string id) {
mixed can_drink_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_drink_from_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_drink_obj(object ob) {
mixed do_drink_from_obj(object ob, string id) {
","/verbs/creators/zap.c":"static void create() {
mixed can_zap_liv(string str) {
mixed do_zap_liv(object ob){
mixed do_zap_lvs(object array obs) {
","/verbs/players/befriend.c":"static void create() {
mixed can_befriend_liv() { return 1; }
mixed do_befriend_liv(object ob) {
","/verbs/players/ride.c":"static void create() {
mixed can_ride_str(string str) {
mixed can_ride_into_str(string str) {
mixed do_ride_str(string str) {
mixed do_ride_into_str(string str) {
","/verbs/players/lead.c":"static void create() {
mixed can_lead_liv() { return 1; }
mixed do_lead_liv(object ob) {
","/verbs/items/get.c":"static void create() {
mixed eventCheckLight(object who) {
mixed can_get_obj(string verb) {
varargs mixed can_get_obj_out_of_obj(string verb, string rule, object item, object container, mixed poo) {
mixed can_get_obj_from_obj(string verb, string rule, object item, object container) {
mixed can_get_wrd_wrd_out_of_obj(string num, string curr) {
mixed can_get_wrd_wrd_from_obj(string num, string curr) {
mixed do_get_obj(object ob) {
mixed do_get_wrd_wrd_out_of_obj(string num, string curr, object pile) {
mixed do_get_wrd_wrd_from_obj(string num, string curr, object pile) {
mixed do_get_obj_out_of_obj(object ob, object storage) {
mixed do_get_obj_from_obj(object ob, object storage) {
mixed do_get_obs(mixed array targs) {
mixed do_get_obs_out_of_obj(mixed array targs, object storage) {
mixed do_get_obs_from_obj(mixed array obs, object storage) {
","/spells/cure.c":"static void create() {
int eventCast(object who, int level, mixed limbs, object array targets) {
","/verbs/players/vote.c":"static void create() {
mixed can_vote_for_str() {
mixed do_vote_for_str( string str ) {
","/verbs/items/fill.c":"static void create() {
mixed can_fill_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_fill_obj_from_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_fill_obj_with_obj(object to, object from) {
mixed do_fill_obj_from_obj(object to, object from) {
","/secure/lib/file.c":"int eventDestruct() {
varargs static void create(string file) {
int GetSize() {
mixed eventDelete() {
mixed eventWrite(mixed val) {
int isDirectory() {
int isFile() {
int isTemporary() {
string GetCharacters(int start, int length) {
string array GetDirectoryList() {
mixed array GetDirectoryShort() {
string GetFileName() {
int GetLastModified() {
string GetLine() {
varargs string GetLines(int arg1, int arg2) {
string GetString() {
mixed eventCreateDirectory() {
varargs mixed eventRename(string name, int clobber) {
","/verbs/items/listen.c":"static void create() {
mixed can_listen() {
mixed can_listen_obj() {
mixed can_listen_to_obj() {
mixed can_listen_to_str_word_obj() {
mixed do_listen() {
mixed do_listen_obj(object ob) {
mixed do_listen_to_obj(object ob) {
mixed do_listen_to_str_word_obj(string str, object ob) {
","/verbs/common/say.c":"static void create() {
string GetHelp(string str) {
mixed can_say_to_liv(object ob) {
mixed can_say_to_liv_str(object targ, string str) {
mixed can_say_str(string str) {
mixed do_say_to_liv(object ob) { return 1; }
mixed do_say_to_liv_str(object targ, string str) {
mixed do_say_str(string str) { return do_say_to_liv_str(0, str); }
","/verbs/items/unlock.c":"static void create() {
mixed can_unlock_obj_with_obj() {
mixed do_unlock_obj_with_obj(object target, object key) {
","/verbs/items/light.c":"static void create() {
mixed can_light_obj() {
mixed can_light_obj_with_obj() {
mixed do_light_obj(object target) {
mixed do_light_obj_with_obj(object target, object source) {
mixed do_light_obs(mixed array targs) {
mixed do_light_obs_with_obj(mixed array targs, object source) {
","/secure/lib/connect.first.c":"string GetKeyName() { return Name; }
static void logon() {
static void InputName(string str) {
static void InputPassword(string str) {
static void ConfirmPassword(string str) {
static void InputGender(string str) {
static void InputCapName(string str) {
static void InputEmail(string str) {
static void InputRealName(string str) {
","/verbs/players/stealth.c":"static void create() {
mixed can_stealth_wrd() {
mixed do_stealth_wrd(string args) {
int eventStealth(object caster, string args, int skill) {
","/verbs/items/lock.c":"static void create() {
mixed can_lock_obj_with_obj(string verb) {
varargs mixed do_lock_obj_with_obj(object target, object key, mixed array words...) {
","/verbs/common/mail.c":"static void create() {
string GetHelp(string str) {
mixed can_mail() { return can_mail_str(\"\"); }
mixed do_mail() { return do_mail_str(0); }
","/secure/lib/net/remote.c":"static void create(int fd, object owner){
void eventRead(string str) {
static void eventSocketClosed(int fd) {
static private void eventProcess(int fd, string str) {
","/verbs/players/sit.c":"static void create() {
mixed can_sit_down() {
mixed can_sit_up() {
mixed can_sit_word_obj() {
mixed can_sit_down_word_obj() {
mixed do_sit(){
mixed do_sit_down() {
mixed do_sit_up() {
mixed do_sit_word_obj(string word, object target) {
mixed do_sit_down_word_obj(string word, object target) {
","/verbs/players/teach.c":"static void create()
mixed can_teach_str_to_liv(string str, object ob)
mixed can_teach_liv_to_str(object ob, string str){
mixed do_teach_str_to_liv(string spell, object target){
mixed do_teach_liv_to_str(object target, string spell){
","/verbs/players/crawl.c":"static void create() {
mixed can_crawl_str(string str) {
mixed can_crawl_into_str(string str) {
mixed do_crawl_str(string str) {
mixed do_crawl_into_str(string str) {
","/verbs/players/cast.c":"static void create() {
mixed can_cast_str(string spell) {
mixed can_cast_str_on_obj(string spell) {
mixed can_cast_str_on_str(string spell) {
mixed can_cast_str_against_str(string spell) {
mixed can_cast_str_on_str_of_str(string spell) {
mixed do_cast_str(string spell) {
mixed do_cast_str_on_obj(string spell, object target) {
mixed do_cast_str_against_str(string spell, object target) {
mixed do_cast_str_on_str(string spell, string limb) {
mixed do_cast_str_on_str_of_obj(string spell, string limb, object target) {
","/verbs/items/remove.c":"static void create() {
mixed can_remove_obj() {
mixed can_remove_obj_out_of_obj() {
mixed can_remove_obj_from_obj() {
mixed do_remove_obj(object ob) {
mixed do_remove_obs(mixed array res) {
mixed do_remove_obj_out_of_obj(object targ, object container) {
mixed do_remove_obj_from_obj(object targ, object container) {
mixed do_remove_obs_out_of_obj(mixed array res, object container) {
mixed do_remove_obs_from_obj(mixed array res, object container) {
","/verbs/items/smell.c":"static void create() {
mixed can_smell_obj() {
mixed can_smell_str_word_obj() {
mixed do_smell() {
mixed do_smell_obj(object ob) {
mixed do_smell_str_word_obj(string str, object ob) {
","/verbs/creators/add.c":"static void create() {
mixed do_add_obj_to_obj(object ob, object ob2) {
mixed can_add_obj_to_obj(string one, string two){
mixed can_add_obj_to_here(string one) { return 1; }
mixed can_add_obj_to_room(string one) { return 1; }
mixed do_add_obj_to_here(object ob){
mixed do_add_obj_to_room(object ob){
","/verbs/items/judge1.c":"static void create() {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed can_judge_obj_to_obj() {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
","/verbs/players/target.c":"static void create() {
mixed do_target_liv_only(object target){
mixed can_target_liv(object target) {
varargs mixed do_target_lvs(mixed array targets, int exclusive) {
mixed can_target_only_liv(object target){
mixed can_target_liv_only(object target){
mixed do_target_only_liv(object target){
","/verbs/common/ask.c":"static void create() {
mixed do_ask_liv_to_str(object ob, string str) {
mixed do_ask_liv_for_str(object ob, string str) {
mixed do_ask_liv_str(object ob, string str) {
mixed can_ask_str(string str) {
mixed do_ask_str(string str) {
mixed can_ask_liv_to_str(string str) { return 1; }
mixed can_ask_liv_for_str(string str) { return 1; }
mixed can_ask_liv_str(string str) {
","/verbs/items/equate.c":"static void create() {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed can_judge_obj_to_obj() {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
","/verbs/items/move.c":"static void create() {
mixed can_move_str_on_obj() {
mixed do_move_obj(object target) {
varargs mixed do_move_str_on_obj(string thing, object target) {
mixed can_move_obj() {
","/verbs/items/extinguish.c":"static void create() {
mixed can_extinguish_obj() {
mixed do_extinguish_obj(object target) {
mixed do_extinguish_obs(mixed array targs) {
","/verbs/items/open.c":"static void create() {
mixed can_open_obj(string verb, string id) {
mixed can_open_obj_with_obj(string verb, string id1, string id2) {
varargs mixed do_open_obj(object ob, mixed array args...) {
varargs mixed do_open_obj_with_obj(object ob, object with, mixed array args...) {
","/verbs/players/abandon.c":"static void create() {
mixed can_abandon_liv() { return 1; }
mixed do_abandon_liv(object ob) {
","/secure/lib/bboard.c":"void create() {
string GetExternalDesc() {
void init() {
int cmd_remove(string str) {
static private int valid_edit(string author) {
int cmd_post(string str) {
static void begin_post(string cmd, string subj, string file, function f) {
void continue_post(string subj, string file) {
void end_post(string subj, string mail) {
int cmd_read(string str) {
int cmd_followup_and_respond(string str) {
void continue_followup(mapping post, string subj, string file) {
void continue_mail(mapping post, string subj, string file) {
static void check_include_text(string ans, string subj, string file, mapping
int cmd_edit(string str) {
void end_edit(string subj, int num) {
void set_board_id(string str) { __BoardID = str; }
string query_board_id() { return __BoardID; }
string query_board_time(int x) {
","/verbs/players/lie.c":"static void create() {
mixed can_lie_down() {
mixed can_lie_word_obj() {
mixed can_lie_down_word_obj() {
mixed do_lie_down() {
mixed do_lie_word_obj(string word, object target) {
mixed do_lie_down_word_obj(string word, object target) {
","/verbs/players/attack.c":"static void create() {
varargs mixed can_attack_liv(object target) {
mixed do_attack_liv(object target) {
varargs mixed do_attack_lvs(mixed array targets, int exclusive) {
mixed can_attack_only_liv(object target){
mixed can_attack_liv_only(object target){
mixed do_attack_only_liv(object target){
mixed do_attack_liv_only(object target){
","/verbs/common/yell.c":"static void create() {
string GetHelp(string str) {
mixed can_yell() { return \"Yell what?\"; }
mixed can_yell_str(string str) {
mixed can_yell_in_wrd_str(string lang, string str) {
mixed do_yell() { return 1; }
mixed do_yell_str(string str) {
mixed do_yell_in_wrd_str(string lang, string str) {
","/verbs/items/turn.c":"static void create() {
mixed can_turn() {
mixed can_turn_obj(mixed foo) {
mixed can_turn_on_obj(mixed foo) {
mixed can_turn_off_obj(mixed foo) {
mixed do_turn() {
varargs mixed do_turn_obj(mixed foo, mixed foo2) {
varargs mixed do_turn_on_obj(mixed foo, mixed foo2) {
mixed do_turn_off_obj(mixed foo) {
mixed do_turn_on_obj_word_obj(mixed foo, mixed foo2) {
","/verbs/items/bait.c":"static void create() {
mixed can_bait_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_bait_obj_with_obj(object pole, object bait) {
","/verbs/players/party.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_party_wrd(string cmd) {
mixed can_party_wrd_wrd(string cmd, string party) {
mixed can_party_wrd_liv(string cmd) {
mixed do_party_wrd(string cmd) {
mixed do_party_wrd_wrd(string cmd, string party) {
mixed do_party_wrd_liv(string cmd, object targ) {
","/verbs/creators/resurrect.c":"static void create() {
mixed can_resurrect_obj(string str) {
mixed do_resurrect_obj(object ob) {
","/verbs/creators/initfix.c":"static void create() {
mixed do_initfix_word(string wrd) {
mixed can_initfix_obj(string str) {
mixed can_initfix_word(string str) { return can_initfix_obj(\"foo\"); }
mixed do_initfix_obj(object ob) {
","/verbs/rooms/climb.c":"static void create() {
mixed do_climb_word_obj(string word, object ob) {
mixed can_climb_obj() {
mixed can_climb_word_obj() {
mixed can_climb_out_of_obj() {
mixed do_climb_obj(object ob) {
mixed do_climb_out_of_obj(object ob) {
","/spells/meditate.c":"static void create() {
int eventCast(object who, int level) {
","/verbs/players/nominate.c":"static void create() {
mixed can_nominate_str() {
mixed do_nominate_str( string str ) {
","/verbs/players/follow.c":"static void create() {
mixed can_follow() { return 1; }
mixed do_follow() {
mixed can_follow_liv() { return 1; }
mixed do_follow_liv(object ob) {
","/verbs/common/body.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
varargs void eventCheckBody(object ob, object receiver) {
mixed can_body() {
mixed can_body_liv() {
mixed do_body() {
mixed do_body_liv(object ob) {
","/verbs/items/pull.c":"static void create() {
mixed can_pull_obj() {
mixed can_pull_str_on_obj() {
mixed do_pull_obj(object target) {
varargs mixed do_pull_str_on_obj(string thing, object target) {
","/verbs/creators/delete.c":"static void create() {
mixed do_delete_exit_str(string str) {
mixed do_delete_enter_str(string str) {
mixed do_delete_room_str(string str) {
mixed do_delete_obj(object ob){
mixed do_delete_obj_from_obj(object ob1, object ob2){
mixed do_delete_obj_from_room(object ob){
mixed do_delete_obj_from_here(object ob){
int eventDeleteExit(string str){
int eventDeleteObject(object ob1, object ob2){
mixed can_delete_exit_str(string str) {
mixed can_delete_enter_str(string str) {
mixed can_delete_room_str(string str) {
mixed can_delete_obj(object ob){
mixed can_delete_obj_from_obj(object ob1, object ob2){
mixed can_delete_obj_from_here(object ob){
mixed can_delete_obj_from_room(object ob){
","/verbs/items/balance.c":"static void create() {
int eventBalance(object caster, object obj1, object obj2) {
mixed can_balance_obj_to_obj() {
mixed do_balance_obj_to_obj(object obj1, object obj2) {
","/verbs/items/wear.c":"static void create() {
mixed can_wear_obj() {
mixed can_wear_obj_on_str(string str) {
mixed do_wear_obj(object ob) {
mixed do_wear_obj_on_str(object ob, string str) {
mixed do_wear_obs(object array armors) {
","/verbs/creators/modify.c":"static void create() {
mixed can_modify_obj_str(string str) {
mixed can_modify_word_str(string str) { return can_modify_obj_str(\"foo\"); }
mixed do_modify_obj_str(object ob, string str) {
mixed do_modify_word_str(string wrd, string str) {
","/secure/lib/net/ftp.c":"void Destruct(){
static void create(int fd, object owner){
private void eventReadFtpData(mixed text){
nomask static int check_privs(string file, string oper) {
string GetKeyName(){ return Session->user; }
private void eventCmdUser(string arg){
private void eventCmdRetr(string arg){
private void eventCmdStor(string arg){
private void eventCmdNlst(string arg){
private void eventCmdList(string arg){
private void eventCmdCdup(string arg){ eventCmdCwd(\"..\"); }
private void eventCmdQuit(string arg){
private void eventCmdType(string arg){
private void eventCmdPort(string arg){
void eventCmdNoop(string arg){
private void eventCmdDele(string arg){
private void eventCmdRnfr(string arg) {
private void eventCmdRnto(string arg) {
private void eventCmdStou(string arg){
private void eventCmdSyst(string arg) {
private void eventCmdMkd(string arg){
void eventCmdPwd(string arg){
private void eventCmdRmd(string arg) {
private string find_flags(string arg){
private string strip_flags(string arg){
string FindPrevDir( string path ) {
private void idle_time_out(){
private string GetFtpWelcomeMsg(){
string GetUniqueFileName(string arg){
void StartService(){
private void eventDestructDataPipe(mixed f){
private void eventCmdPswd(string arg){
string RetrieveCmdCallback(object ob){
private void do_list( string arg, int ltype){
","/verbs/items/dig.c":"static void create() {
mixed can_dig_str_with_obj() {
mixed can_dig_obj_with_obj() {
mixed do_dig_with_obj(object ob) {
mixed do_dig_str_with_obj(string str, object ob) {
mixed do_dig_obj_with_obj(object what, object ob, string id) {
mixed can_dig_with_obj() {
static void eventDig(object who, object tool, object what, object check) {
varargs static void eventPrepareDig(object who, object tool, object what) {
","/verbs/players/stand.c":"static void create() {
mixed can_stand_up() {
mixed do_stand_up() {
","/verbs/rooms/stop.c":"static void create() {
string GetHelp(string str) {
mixed can_stop_str(string str) {
mixed do_stop_str(string str) {
","/verbs/items/free.c":"static void create() {
mixed can_free_liv_from_obj() {
mixed do_free_liv_from_obj(object target, object tool) {
","/verbs/common/speak.c":"static void create() {
string GetHelp(string str) {
mixed can_speak() { return \"Speak what? In what language?\"; }
mixed can_speak_in_wrd(string str) {
mixed can_speak_str(string str) {
mixed can_speak_in_wrd_str(string lang, string str) {
mixed do_speak() { return 1; }
mixed do_speak_in_wrd(string str) {
mixed do_speak_str(string str) {
mixed do_speak_in_wrd_str(string lang, string str) {
","/verbs/items/pick.c":"static void create() {
mixed can_pick_str_on_obj(string str) {
mixed can_pick_str_on_obj_with_obj(string str) {
mixed do_pick_str_on_obj(string wrd, object ob, mixed array args...) {
mixed do_pick_str_on_obj_with_obj(string wrd, object ob, object tool,
mixed do_pick_obj(object ob, string id) {
mixed can_pick_obj() {
","/secure/lib/net/ftp_data_connection.c":"int eventDestruct() {
function SetRead(function f) { return (Read = f); }
static void eventReadCallback(int fd, mixed val) {
varargs static int eventClose(class data_conn sock, int aborted) {
static void eventWriteCallback(int fd) {
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
static void eventSocketClose() { }
static void eventSocketError(string str, int x) {
int SetSocketType(int type) { return (SocketType = type); }
function SetClose(function f) { return (Close = f); }
function SetWrite(function f) { return (Write = f); }
int eventWriteDestruct() {
int SetPassiveMode(int x) { return (PassiveMode = x); }
static void eventListenCallback(int fd)
","/verbs/rooms/fish.c":"static void create() {
mixed can_fish_with_obj() {
mixed do_fish_with_obj(object ob) {
","/verbs/players/mount.c":"static void create() {
mixed can_mount_liv() {
mixed do_mount_liv(object ob) {
","/verbs/creators/codesay.c":"static void create() {
string GetHelp(string str) {
mixed can_codesay() { return \"Say what?\"; }
mixed can_codesay_str(string str) {
varargs mixed do_codesay_str(string str) {
","/verbs/items/poison.c":"static void create() {
void eventPoison(object who, object target, object agent) {
mixed can_poison_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_poison_obj_with_obj(object target, object agent) {
","/verbs/items/read.c":"static void create() {
mixed can_read_obj() {
mixed can_read_str_word_obj() {
mixed do_read_str_on_obj(string str, object ob) {
mixed do_read_str_in_obj(string str, object ob) {
mixed do_read_str_of_obj(string str, object ob) {
mixed do_read_str_from_obj(string str, object ob) {
mixed do_read_obj(object ob) {
","/verbs/players/pray.c":"static void create() {
mixed can_pray_for_str(string spell) {
mixed can_pray_for_str_against_str(string spell) {
mixed can_pray_for_str_for_obj(string spell) {
mixed can_pray_for_str_against_str_for_liv(string spell) {
mixed do_pray_for_str(string spell) {
mixed do_pray_for_str_against_str(string spell, string ag) {
mixed do_pray_for_str_for_obj(string spell, object ob) {
mixed do_pray_for_str_against_str_for_liv(string spell, string ag, object tg) {
","/verbs/players/marry.c":"static void create() {
mixed can_marry_liv_to_liv() {
mixed do_marry_liv_to_liv(object spouse1, object spouse2) {
","/secure/lib/connect.c":"varargs int eventPrint(string msg, mixed cl, mixed arg3) {
int array GetScreen() {
string GetKeyName() {
void eventDestruct() {
static void create(int binary) {
void SetLastError(mapping m) {
mapping GetLastError() {
string GetCapName() {
static void eventCreatePlayer(string cap) {
static void terminal_type(string str) {
static void window_size(int width, int height) {
varargs static void logon(mixed foo) {
static void InputName(string namen, string kill_me) {
static void InputPassword(string pass, string cap) {
static void ConfirmName(string ans, string cap) {
static void eventReEnterGame(string cap) {
static void ConfirmReconnect(string ans, string cap) {
static int CanLogin() {
static private void eventEnterGame() {
static void CreatePassword(string pass, string cap) {
static void ConfirmPassword(string control, string cap, string pass) {
static void InputGender(string str, string cap) {
static void InputCapName(string name, string cap) {
static void InputEmail(string email) {
static void InputRealName(string rname) {
static void InputRace(string str) {
static void cmdHelp(string args) {
static void cmdList() {
static void cmdPick(string args) {
static void eventTimeout() {
static void CreateGuest() {
static void GetGuestName(string nom) {
int eventCheckPending(string str){
void eventCompleteChar(){
void InputCre(string str){
int CheckIp(){
","/secure/lib/net/server.c":"int eventDestruct() {
varargs static void create(int port, int type, string socket_obj) {
static int eventClose(mixed sock) {
int eventShutdown() {
varargs int eventWrite(object owner, mixed val, int close) {
static int SetDestructOnClose(int x) {
int eventCreateSocket(int port) {
static void eventSocketError(string msg, int code) {
static int SetSocketType(int x ) {
int GetDestructOnClose() {
int GetSocketType() {
static void eventServerReadCallback(int fd, mixed val) {
static void eventServerAbortCallback(int fd) {
static void eventNewConnection(object socket) {
static void eventServerWriteCallback(int fd) {
static void eventServerListenCallback(int fd) {
",])
