#/secure/daemon/function.c
FileSize (["/lib/chapel.c":3432,"/lib/events/dig_with.c":2405,"/secure/sefun/user_exists.c":240,"/lib/events/get.c":2278,"/verbs/items/give.c":4424,"/lib/door.c":10518,"/secure/sefun/files.c":1121,"/lib/quest.c":181,"/lib/std/dummy.c":2622,"/spells/globe.c":2954,"/secure/lib/std/access.c":2986,"/lib/undead.c":2539,"/secure/sefun/persist.c":342,"/lib/std/item.c":8574,"/secure/sefun/visible.c":145,"/secure/sefun/communications.c":3861,"/lib/files.c":1060,"/verbs/items/drop.c":2716,"/lib/std/storage.c":4627,"/verbs/items/poison.c":1443,"/lib/props/inventory.c":1654,"/verbs/items/get.c":3946,"/lib/std/table.c":344,"/verbs/creators/modify.c":3966,"/lib/props/damage.c":917,"/verbs/items/wear.c":1863,"/verbs/items/capture.c":941,"/lib/player.c":23470,"/secure/sefun/english.c":9932,"/verbs/items/eat.c":1089,"/lib/props/addstuff.c":394,"/lib/events/search.c":2554,"/verbs/items/put.c":4723,"/secure/sefun/path_file.c":660,"/lib/battery.c":2314,"/lib/events/wield.c":1196,"/verbs/common/ask.c":2744,"/verbs/items/ring.c":1466,"/lib/events/sit.c":1861,"/lib/std/bane.c":211,"/lib/std/worn_storage.c":14349,"/lib/std/bot_limb.c":987,"/secure/lib/connect.c":17519,"/verbs/creators/delete.c":4582,"/lib/events/look_in.c":2700,"/verbs/common/shout.c":2015,"/verbs/creators/dest.c":1747,"/secure/sefun/get_object.c":5467,"/verbs/items/pull.c":913,"/lib/clay.c":1809,"/lib/match.c":1068,"/lib/props/description.c":3404,"/verbs/common/say.c":2009,"/lib/currency.c":2975,"/secure/sefun/absolute_path.c":1776,"/lib/virtual/virt_std.c":1405,"/lib/domesticate.c":3909,"/verbs/items/unlock.c":1001,"/verbs/players/describe.c":971,"/lib/events/sell.c":518,"/lib/verb.c":1879,"/verbs/items/balance.c":2815,"/verbs/items/touch.c":950,"/lib/props/equip.c":1933,"/verbs/items/donate.c":1121,"/lib/teacher.c":6298,"/verbs/items/extinguish.c":1261,"/verbs/items/consult.c":961,"/lib/events/climb.c":3257,"/lib/detect.c":3205,"/verbs/creators/reload.c":4191,"/lib/lvs/abilities.c":8438,"/lib/flask.c":5129,"/lib/events/smell.c":3005,"/lib/events/get_from.c":4970,"/verbs/players/sit.c":1835,"/lib/blank.c":38,"/lib/help.c":565,"/secure/sefun/user_path.c":69,"/lib/props/deterioration.c":1216,"/lib/race.c":5778,"/secure/sefun/tail.c":305,"/lib/props/save.c":62,"/lib/magic.c":4451,"/lib/combat.c":26176,"/lib/events/look.c":6234,"/lib/std/armor.c":10463,"/verbs/items/move.c":845,"/verbs/players/bump.c":5165,"/verbs/players/pray.c":1701,"/verbs/rooms/stop.c":917,"/verbs/common/body.c":3558,"/verbs/players/withdraw.c":895,"/verbs/items/free.c":827,"/secure/sefun/ascii.c":7246,"/lib/events/drop.c":1747,"/lib/events/put.c":2761,"/lib/events/dig.c":1141,"/secure/sefun/numbers.c":554,"/secure/sefun/make_workroom.c":2261,"/verbs/creators/pulsecheck.c":1037,"/verbs/players/abandon.c":515,"/verbs/items/strike.c":587,"/secure/sefun/events.c":1023,"/verbs/items/sell.c":1867,"/lib/std/limb.c":2007,"/lib/manycoins.c":233,"/verbs/players/stand.c":1128,"/secure/sefun/copy.c":626,"/verbs/items/remove.c":2173,"/verbs/items/throw.c":2163,"/lib/events/touch.c":2458,"/lib/potion.c":906,"/verbs/players/news.c":1037,"/verbs/items/turn.c":1383,"/lib/teller.c":10651,"/verbs/items/bury.c":1838,"/lib/genetics.c":8720,"/secure/sefun/get_stack.c":135,"/lib/comp/seal.c":1314,"/lib/nmsh.c":14715,"/verbs/players/ride.c":2063,"/lib/pole.c":2473,"/lib/editor.c":927,"/secure/sefun/morality.c":1121,"/spells/meditate.c":1326,"/lib/chat.c":3217,"/spells/buffer.c":2808,"/verbs/items/steal.c":3929,"/verbs/items/wield.c":3069,"/secure/lib/file.c":5431,"/verbs/items/buy.c":1119,"/verbs/items/drink.c":1500,"/lib/clip.c":1965,"/lib/trap.c":3552,"/verbs/items/smell.c":1582,"/secure/sefun/economy.c":1822,"/secure/lib/connect.first.c":5175,"/secure/sefun/local_time.c":1877,"/lib/std/bot_corpse.c":1057,"/lib/pistol.c":15221,"/verbs/rooms/go.c":1835,"/lib/std/vendor.c":15881,"/verbs/players/attack.c":3083,"/lib/lead.c":3946,"/lib/events/lock.c":5639,"/lib/props/value.c":2070,"/lib/events/lock_with.c":1496,"/lib/shell.c":826,"/verbs/items/pick.c":2712,"/verbs/players/stealth.c":2262,"/lib/props/carry.c":1234,"/lib/virtual/virt_land.c":5405,"/lib/trainer.c":7067,"/secure/lib/net/ftp_client.c":4271,"/lib/meal.c":5859,"/verbs/rooms/enter.c":1198,"/lib/virtual/virt_map.c":4585,"/secure/sefun/format_page.c":446,"/lib/props/move.c":2040,"/verbs/players/mount.c":599,"/secure/lib/net/telnet_client.c":4786,"/verbs/items/look.c":3484,"/verbs/players/sleep.c":1012,"/verbs/rooms/fish.c":1080,"/lib/comp/object.c":994,"/lib/talk.c":7162,"/lib/props/mass.c":765,"/secure/sefun/time.c":1586,"/secure/sefun/ordinal.c":407,"/lib/blank_pile.c":724,"/lib/events/bait.c":875,"/verbs/players/marry.c":1624,"/lib/std/barkeep.c":5094,"/lib/lvs/position.c":3879,"/verbs/players/target.c":2523,"/verbs/players/wake.c":953,"/lib/interactive.c":20398,"/lib/fish.c":639,"/secure/sefun/parse_objects.c":527,"/secure/sefun/percent.c":579,"/secure/sefun/base_name.c":568,"/lib/std/story.c":2926,"/lib/events/give.c":1035,"/lib/std/bed.c":317,"/lib/std/book.c":2455,"/secure/sefun/sefun.c":8262,"/lib/comp/surface.c":141,"/verbs/items/judge.c":3918,"/lib/exits.c":7332,"/lib/language.c":4036,"/lib/events/listen.c":2879,"/secure/sefun/absolute_value.c":268,"/secure/sefun/singular_array.c":169,"/verbs/items/judge1.c":3918,"/lib/shadow.c":352,"/secure/sefun/interface.c":233,"/verbs/items/lock.c":1109,"/lib/sentient.c":8133,"/spells/restoration.c":2626,"/lib/fuel.c":1501,"/lib/pile.c":3355,"/secure/sefun/distinct_array.c":349,"/lib/props/poisoning.c":195,"/verbs/common/mail.c":1988,"/lib/events/buy.c":380,"/lib/events/bait_with.c":1018,"/lib/events/read.c":3540,"/verbs/common/yell.c":1678,"/lib/user/autosave.c":1913,"/lib/creator.c":4250,"/secure/sefun/wild_card.c":759,"/verbs/creators/add.c":3213,"/lib/events/poison.c":861,"/lib/body.c":47856,"/secure/sefun/values.c":562,"/verbs/items/fill.c":737,"/secure/sefun/load_object.c":1086,"/lib/events/fly.c":109,"/verbs/items/press.c":1052,"/secure/lib/bboard.c":8490,"/lib/props/clean.c":2248,"/secure/sefun/get_livings.c":1641,"/lib/bot.c":2211,"/secure/sefun/legacy.c":3605,"/verbs/items/equate.c":3918,"/lib/spell.c":17284,"/lib/torch.c":736,"/spells/cure.c":2042,"/lib/clerk.c":4086,"/spells/fireball.c":1442,"/lib/persist.c":3268,"/lib/props/getlivings.c":319,"/lib/mount.c":2870,"/lib/living.c":18667,"/secure/sefun/messaging.c":11309,"/verbs/common/speak.c":2501,"/secure/sefun/mappings.c":1979,"/secure/sefun/wipe_inv.c":875,"/verbs/players/dismount.c":1376,"/lib/events/crawl.c":113,"/lib/events/drink.c":619,"/secure/sefun/get_cmds.c":925,"/lib/events/shake.c":1912,"/lib/lamp.c":1379,"/lib/events/close.c":1755,"/verbs/players/cast.c":2018,"/verbs/creators/copy.c":4366,"/lib/combatmsg.c":6876,"/secure/sefun/log_file.c":794,"/lib/follow.c":1406,"/lib/npc.c":22252,"/secure/sefun/compare_array.c":540,"/secure/sefun/dump_socket_status.c":362,"/verbs/creators/zap.c":1246,"/lib/command.c":7365,"/lib/events/bury.c":271,"/secure/lib/net/http.c":2303,"/verbs/creators/resurrect.c":1523,"/spells/globo.c":2941,"/lib/props/ambiance.c":377,"/secure/lib/net/server.c":6947,"/secure/sefun/light.c":1792,"/lib/mayor.c":2055,"/secure/lib/net/client.c":3278,"/verbs/items/read.c":1359,"/verbs/creators/echo.c":2073,"/lib/stargate.c":7176,"/secure/sefun/query_invis.c":878,"/lib/clan.c":5176,"/secure/lib/net/ftp.c":25390,"/secure/sefun/this_agent.c":447,"/lib/events/turn.c":681,"/verbs/items/shake.c":896,"/verbs/players/crawl.c":1807,"/verbs/items/listen.c":1827,"/lib/light.c":1371,"/secure/sefun/pointers.c":2604,"/lib/shop.c":818,"/secure/sefun/findobs.c":1376,"/verbs/items/close.c":936,"/secure/sefun/security.c":2774,"/verbs/items/search.c":1600,"/lib/events/shoot.c":1363,"/verbs/items/shoot.c":1075,"/lib/leader.c":5015,"/lib/round.c":908,"/verbs/players/vote.c":944,"/verbs/players/nominate.c":952,"/secure/sefun/disable.c":639,"/verbs/creators/initfix.c":1653,"/lib/steal.c":891,"/secure/sefun/mud_info.c":1271,"/secure/sefun/strings.c":17200,"/lib/comp/weapon.c":4677,"/lib/events/wear.c":943,"/lib/bonus.c":2020,"/lib/std/room.c":21913,"/secure/sefun/to_object.c":3098,"/lib/events/manipulate.c":2008,"/verbs/players/backstab.c":6453,"/verbs/rooms/cast.c":1255,"/verbs/items/dig.c":2282,"/lib/events/pull.c":1888,"/secure/sefun/generic.c":58,"/lib/comp/holder.c":2676,"/lib/flashlight.c":4691,"/verbs/items/light.c":2819,"/lib/post_office.c":1249,"/verbs/rooms/fly.c":2477,"/lib/events/press.c":2132,"/verbs/rooms/climb.c":1969,"/secure/lib/net/socket.c":1190,"/secure/sefun/convert_name.c":349,"/secure/sefun/dummy.c":105,"/spells/missile.c":1216,"/lib/props/uniqueness.c":629,"/secure/sefun/flat_map.c":819,"/verbs/players/party.c":4001,"/secure/sefun/query_time_of_day.c":226,"/lib/donate.c":1991,"/lib/props/radiance.c":514,"/secure/sefun/identify.c":1416,"/verbs/players/lie.c":1311,"/lib/std/daemon.c":1241,"/secure/sefun/duplicates.c":1290,"/verbs/items/empty.c":432,"/verbs/items/open.c":1448,"/secure/sefun/reaper.c":1742,"/lib/virtual/virt_sky.c":2857,"/verbs/common/whisper.c":2532,"/lib/interface.c":5931,"/lib/used_meal.c":174,"/lib/events/lie.c":1602,"/secure/sefun/expand_keys.c":425,"/verbs/players/lead.c":1023,"/secure/sefun/translate.c":3123,"/lib/std/chair.c":511,"/verbs/players/ignore.c":2045,"/secure/sefun/custom_path.c":539,"/verbs/creators/createfix.c":1677,"/verbs/common/codesay.c":1989,"/lib/fishing.c":5775,"/lib/money.c":617,"/secure/lib/net/ftp_data_connection.c":5278,"/verbs/players/request.c":1303,"/verbs/players/follow.c":2528,"/lib/messages.c":1799,"/lib/history.c":4571,"/verbs/items/unwield.c":1326,"/verbs/players/evade.c":812,"/lib/std/corpse.c":2726,"/secure/sefun/reload.c":2319,"/lib/events/jump.c":3289,"/lib/burn.c":4011,"/verbs/items/bait.c":948,"/lib/poison.c":1351,"/lib/classes.c":3405,"/lib/events/consult.c":1960,"/secure/sefun/get_verbs.c":568,"/secure/sefun/query_carrying.c":295,"/lib/comp/container.c":1185,"/verbs/items/pour.c":1838,"/secure/sefun/rooms.c":1617,"/lib/bboard.c":8327,"/lib/std/germ.c":7343,"/lib/props/properties.c":1005,"/lib/events/smoke.c":681,"/secure/sefun/query_names.c":1497,"/verbs/items/use.c":730,"/lib/props/id.c":2569,"/lib/enter.c":3714,"/lib/pager.c":10028,"/secure/sefun/timestamp.c":831,"/secure/sefun/domains.c":1135,"/verbs/players/befriend.c":574,"/verbs/rooms/jump.c":2938,])
FunctionCache (["/lib/chapel.c":"static void create() {
string array GetClasses() { return Classes; }
string array SetReligion(string adj, string noun) {
varargs string GetReligion(int flag) { return Religion[flag]; }
mixed CanSacrifice(object who, object what, string deus) {
mixed CanMarry(object who, object spouse1, object spouse2) {
mixed eventMarry(object who, object spouse1, object spouse2) {
mixed eventSacrifice(object who, object what, string deus) {
int SetAllowSacrifice(int x) { return (AllowSacrifice = x); }
int GetAllowSacrifice() { return AllowSacrifice; }
string array SetClasses(string array rc) { return (Classes = rc); }
string array SetDeities(string array deities) {
string array GetDeities() { return Deities; }
int SetSacrificeType(int x) { return (SacrificeType = x); }
int AddSacrificeType(int x) { return (SacrificeType |= x); }
int GetSacrificeType() { return SacrificeType; }
","/lib/events/dig_with.c":"varargs mixed eventDigWith(object who, object what) {
mixed eventBuryWith(object who, object what) {
mixed indirect_dig_obj_with_obj(object what) {
mixed indirect_bury_obj_with_obj(object what) {
mixed direct_dig_str_with_obj(string what) {
mixed direct_bury_str_with_obj(string str) {
mixed direct_dig_with_obj() {
varargs mixed CanBuryWith(object who, object what) {
varargs mixed CanDigWith(object who, object what) {
","/secure/sefun/user_exists.c":"int user_exists(string str) { return (int)master()->player_exists(str); }
","/lib/events/get.c":"mixed CanGet(object who) {
static void create() {
mixed direct_get_obj(object target) {
mixed direct_get_obj_from_obj(object target, object src) {
mixed direct_get_obj_out_of_obj(object target, object src) {
mixed GetPreventGet() {
mixed SetPreventGet(mixed val) {
","/verbs/items/give.c":"static void create() {
mixed can_give_liv_wrd_wrd(object targ, string num, string curr) {
mixed can_give_wrd_wrd_to_liv(string num, string curr, object targ) {
mixed can_give_liv_obj() {
mixed can_give_obj_to_liv(mixed arg1, mixed arg2) {
mixed do_give_obj_to_liv(object what, object target) {
mixed do_give_liv_wrd_wrd(object target, string num, string curr) {
mixed do_give_wrd_wrd_to_liv(string num, string curr, object target) {
mixed do_give_liv_obs(object target, mixed array items) {
mixed do_give_obs_to_liv(mixed array items, object target) {
mixed do_give_liv_obj(object target, object what) {
","/lib/door.c":"static void create() {
varargs int eventOpen(object who, object tool) {
varargs mixed eventClose(object who) {
string GetDefiniteShort() {
string array GetKeys(string side) { return ((class door_side)Sides[side])->Keys; }
mixed CanLock(object who) {
mixed CanUnlock(object who) {
varargs mixed eventLock(object who, mixed key, mixed foo) {
mixed eventUnlock(object who, object key) {
varargs string array SetKeys(string side, mixed array args...) {
int eventRegisterSide(string side) {
mixed SetLong(string side, mixed long) {
varargs string GetShort(string side) {
void SetSide(string side, mapping mp) {
string GetLong(string side) {
varargs string array SetId(string side, mixed array args...) {
string array GetId(string side) { return ((class door_side)Sides[side])->Ids; }
mixed SetShort(string side, mixed short) {
int GetHiddenDoor(){
int SetHiddenDoor(int i){
string array GetSides(){
int SetLockable(string side, int x) {
int GetLockable(string side) {
object array GetRooms(string side) { return ((class door_side)Sides[side])->Rooms; }
int get_closed() { return GetClosed(); }
","/secure/sefun/files.c":"int file_exists(string str) {
string save_file(string who) {
int indent_file(string filename){
int directory_exists(string str) { return (file_size(str) == -2); }
","/lib/quest.c":"void create(){
int GetQuestPoints(){
int SetQuestPoints(int i){
","/lib/std/dummy.c":"static int Destruct() {
varargs static void create(string array id, mixed long, string array adj) {
varargs string array SetId(mixed ids...) {
varargs int GetInvis(object ob) {
int isDummy() {
mixed eventMove(mixed dest) {
","/spells/globe.c":"int eventDestruct()
static void create()
int eventCast(object who, int level, mixed limbs, object array targets)
int hitCallback(object who, object agent, int x, class MagicProtection cl)
void endCallback(object who)
","/secure/lib/std/access.c":"void create() {
nomask int check_access(object ob, string fun, string file, string oper) {
mapping query_access(string type) {
nomask int grant_access(string type, string file, string who) {
nomask int remove_access(string type, string file, string who) {
static void set_access(string type, function f) {
","/lib/undead.c":"string GetUndeadType() {
string SetUndeadType(string str) {
mixed eventBite(object target) {
mixed eventTurn(object who) {
static void heart_beat() {
int GetGhost(){
","/secure/sefun/persist.c":"int query_reset_number() { return (int)master()->GetResetNumber(); }
object unique(string fn, int rare) {
","/lib/std/item.c":"string array GetSave() {
string GetItemCondition() {
void eventDeteriorate(int type) {
int eventMove(mixed dest) {
static void create() {
varargs mixed direct_get_obj_from_obj(object item, mixed gamma,mixed alfa, mixed beta, mixed epsilon){
static int Destruct() {
string GetExternalDesc() {
mixed eventShow(object who, string component) {
static mixed array AddSave(mixed array vars) {
mixed CanSteal(object who) {
void init() { }
mixed direct_cast_str_on_obj() {
mixed direct_cast_str_on_str_of_obj() {
int eventBless(int amount, int time) {
mixed eventThrow(object who, object target) {
varargs mixed eventRepair(object who, int strength, int type) {
mixed indirect_balance_obj_to_obj() {
mixed direct_compare_obj_to_obj() {
mixed indirect_compare_obj_to_obj() {
mixed indirect_judge_obj_to_obj() {
mixed direct_use_obj_to_str() {
mixed direct_throw_obj_word_obj() {
mixed indirect_throw_obj_into_obj() {
int direct_sacrifice_obj_to_str(string deus) {
mixed direct_bless_obj() {
mixed direct_curse_obj() {
int SetNoCondition(int i){
string SetQuestId(string name){
string GetQuestId(){
int SetRetainOnDeath(int x) {
mixed CanRepair(object who) {
varargs mixed CanThrow(object who, object target) {
void eventRemoveBlessing() {
int GetRetainOnDeath() {
","/secure/sefun/visible.c":"varargs int visible( object detectee_obj, object detector_obj ) {
","/secure/sefun/communications.c":"varargs void say(mixed str, mixed ob) {
varargs void shout(mixed str, mixed exclude) {
void tell_object(object ob, mixed str) { ob->eventPrint(str, MSG_CONV); }
varargs void tell_room(mixed ob, mixed str, mixed exclude) {
void tell_player(mixed player, string msg){
varargs void tc(string str, string col, object dude){
varargs int debug(mixed msg, mixed val, string color){
varargs int tell_creators(string msg, string color){
varargs int tn(string str, string col, object room){
varargs int trr(string str, string col){
","/lib/files.c":"string array wild_card(string str) {
nomask static int remove_dots(string str) { return !(str[0] == '.'); }
string query_cwd() { return DIR_TMP; }
","/verbs/items/drop.c":"static void create() {
mixed can_drop_wrd_wrd(string num, string curr) {
mixed do_drop_obj(object ob) {
mixed do_drop_obs(mixed array res) {
mixed do_drop_wrd_wrd(string num, string curr) {
mixed can_drop_obj(object ob) { return this_player()->CanManipulate(); }
","/lib/std/storage.c":"int inventory_visible() {
int GetOpacity() {
int SetOpacity(mixed arg){
varargs mixed CanShowInterior(object who, object target) {
int GetRadiantLight(int ambient) {
int eventReceiveObject(object ob) {
mixed CanPutInto(object who, object what) {
int inventory_accessible() {
mixed CanGetFrom(object who, object item) {
void create() {
static mixed array AddSave(mixed array vars) {
int SetSaveRecurse(int x) {
mixed CanOpen(object who, string id) {
private int CanClose = 0;
private int CanLock  = 0;
mixed CanPick(object who, string id) {
mixed CanUnlock(object who, string id, object key) {
int SetMaxRecurseDepth(int i){
int GetCanClose() {
int SetCanClose(int x) {
int GetCanLock() {
int SetCanLock(int x) {
void SetKey(string key) {
void PutCheck(){
int GetMaxRecurseDepth(){
int GetRecurseDepth(){
int AddRecurseDepth(int i){
int SetRecurseDepth(int i){
","/verbs/items/poison.c":"static void create() {
void eventPoison(object who, object target, object agent) {
mixed can_poison_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_poison_obj_with_obj(object target, object agent) {
","/lib/props/inventory.c":"mapping GetInventory() {
static void eventLoadInventory();
static void eventLoadItem(string file, mixed args, int count);
varargs void reset(int count) {
mapping SetInventory(mapping mp) {
","/verbs/items/get.c":"static void create() {
mixed can_get_wrd_wrd_from_obj(string num, string curr) {
mixed can_get_obj_from_obj(string verb, string rule, object item, object container) {
mixed do_get_wrd_wrd_out_of_obj(string num, string curr, object pile) {
mixed eventCheckLight(object who) {
mixed do_get_obj(object ob) {
mixed do_get_obj_from_obj(object ob, object storage) {
mixed do_get_obs(mixed array targs) {
mixed do_get_obs_out_of_obj(mixed array targs, object storage) {
mixed do_get_obs_from_obj(mixed array obs, object storage) {
mixed do_get_obj_out_of_obj(object ob, object storage) {
mixed do_get_wrd_wrd_from_obj(string num, string curr, object pile) {
mixed can_get_wrd_wrd_out_of_obj(string num, string curr) {
varargs mixed can_get_obj_out_of_obj(string verb, string rule, object item, object container, mixed poo) {
","/lib/std/table.c":"int CanGet(object who){
void create(){
void init(){
","/verbs/creators/modify.c":"static void create() {
mixed can_modify_obj_str(string str) {
mixed can_modify_word_str(string str) { return can_modify_obj_str(\"foo\"); }
mixed do_modify_obj_str(object ob, string str) {
mixed do_modify_word_str(string wrd, string str) {
","/lib/props/damage.c":"string array GetSave() {
int GetMaxClass() {
int SetClass(int x) {
int GetDamageType() {
int eventStrike(object ob) {
int SetDamageType(int x ) {
int GetClass() {
","/verbs/items/wear.c":"static void create() {
mixed do_wear_obj_on_str(object ob, string str) {
mixed do_wear_obs(object array armors) {
mixed can_wear_obj_on_str(string str) {
","/verbs/items/capture.c":"static void create() {
mixed do_capture_liv_word_obj(object target, string word, object tool) {
mixed can_capture_liv_word_obj() {
","/lib/player.c":"int CanReceive(object ob) { return CanCarry((int)ob->GetMass()); }
int eventReceiveObject() {
int eventReleaseObject() {
static int Destruct() {
string SetShort(string irrelevant) {
string GetName() {
string GetCapName() { return interactive::GetCapName(); }
varargs string GetLong(string str) {
varargs int eventShow(object who, string str) {
static void create() {
int Setup() {
static void heart_beat() {
int eventMove(mixed dest) {
static void net_dead() {
void eventReconnect() {
void eventLoadObject(mixed array value, int recurse) { }
varargs mixed GetEffectiveVision(mixed location, int raw_score) {
int SetUndead(int x) {
mixed eventTurn(object who) {
varargs int eventDie(mixed agent) {
string SetClass(string str) {
varargs int eventMoveLiving(mixed dest, string omsg, string imsg) {
varargs static int AddHealthPoints(int x, string limb, object agent) {
int GetLanguageLevel(string lang) {
int ResetLevel() {
void eventKillEnemy(object ob) {
int AddBank(string bank, string type, int amount) {
int AddCurrency(string type, int amount) {
string array GetMuffed(){
mixed eventAsk(object who, string what) {
void eventRevive() {
static mixed eventUse(object used, string cmd) {
mixed CanUse(object used, string cmd) { return 1; }
string array SetTitles(string array titles) {
string array AddTitle(string title) {
string array RemoveTitle(string title) {
string array GetTitles() { return Titles; }
void AddQuest(string title, string desc) {
mixed array GetQuests() {
mapping array GetDeaths() {
int GetTrainingPoints() { return TrainingPoints; }
int AddTrainingPoints(int x) {
int RemoveTrainingPoints(int x) {
int eventDisplayStatus() {
static void eventDestroyUndead(object agent) {
string array SetMuffed(string array muffed){
string array AddMuffed(string muffed){
string array RemoveMuffed(string unmuffed){
int SetTitleLength(int x) {
int GetTitleLength() { return TitleLength; }
void AddPartyQuest(string title, string desc) {
void AddQuestSkillPoints(string skill, int amount) {
void AddQuestStatPoints(string stat, int amount) {
void AddQuestCurrency(string type, int amount) {
varargs int eventTrain(string skill, int points) {
","/secure/sefun/english.c":"varargs string add_article(string str, int def) {
string cardinal(int x) {
varargs string conjunction(mixed expressions, string coordinator) {
string consolidate(int x, string str) {
varargs string item_list(mixed array items...) {
string nominative(mixed val) {
string objective(mixed val) {
string possessive_noun(mixed val) {
string reflexive(mixed val) { return sprintf(\"%sself\", objective(val)); }
string remove_article(string str) {
string strip_article(mixed val) {
string array explode_list(string list) {
","/verbs/items/eat.c":"static void create() {
void eventEat(object who, object what) {
mixed can_eat_obj() {
mixed do_eat_obj(object ob) {
","/lib/props/addstuff.c":"varargs int AddStuff(string array str, int q){
","/lib/events/search.c":"mapping RemoveSearch(string item) {
mixed direct_search_str_word_obj(string str) {
mixed direct_search_obj() {
varargs string GetSearch(string str, object who) {
string array GetSearches() {
varargs mixed SetSearch(mixed array args...) {
varargs mixed eventSearch(object who, string str) {
","/verbs/items/put.c":"static void create() {
mixed can_put_obs_word_obj(object array foo1, string wrd, object foo2) {
mixed can_put_obj_word_obj(object target, string wrd, object storage) {
mixed do_put_obs_word_obj(mixed array res, string wrd, object storage) {
mixed do_put_obj_word_obj(object what, string wrd, object storage) {
mixed eventCheckLight(object who) {
mixed can_put_wrd_wrd_word_obj(string num, string curr,string wrd, mixed container) {
mixed do_put_wrd_wrd_word_obj(string num, string curr, mixed wort, object ob) {
","/secure/sefun/path_file.c":"mixed array path_file(mixed full_path) {
","/lib/battery.c":"void create(){
void init(){
void heart_beat(){
int eventUse(int i){
int SetRechargeable(int i) { rechargeable = i; return i;}
string GetPowerType() { return powertype; }
int SetPowerType(string str) {powertype=str; return 1; }
int SetCharge(int i) {charge = i; fullcharge = i; return 1; }
int GetCharge() { return charge; }
string GetCellType() { return celltype; }
int GetRechargeable() { return rechargeable;}
int SetDrainable(int i) { drainable = i; return i; }
int GetDrainable() { return drainable; }
int SetDrainRate(int i) { drainrate = i; return i; }
int GetDrainRate() { return drainrate; }
int ModCharge(int i) {
int eventDrain(int i){
int eventCharge(int i){
int Spent(){
int SetCellType(string str) {celltype=str; return 1; }
","/lib/events/wield.c":"mixed direct_wield_obj_word_str(object target, string wrd, string limb) {
mixed direct_unwield_obj() {
","/verbs/common/ask.c":"static void create() {
mixed can_ask_liv_str(string str) {
mixed can_ask_str(string str) {
mixed do_ask_str(string str) {
mixed can_ask_liv_to_str(string str) { return 1; }
mixed can_ask_liv_for_str(string str) { return 1; }
mixed do_ask_liv_to_str(object ob, string str) {
mixed do_ask_liv_for_str(object ob, string str) {
mixed do_ask_liv_str(object ob, string str) {
","/verbs/items/ring.c":"static void create() {
mixed do_ring_str_on_obj_with_obj(string str, object target, object tool) {
mixed can_ring_obj() {
mixed can_ring_obj_with_obj() {
mixed can_ring_str_on_obj() {
mixed do_ring_obj_with_obj(object target, object tool) {
mixed can_ring_str_on_obj_with_obj() {
","/lib/events/sit.c":"static int SetMaxSitters(int x) {
int CanGet(object who){
object array GetSitters() {
mixed direct_sit_word_obj() {
int GetMaxSitters() {
mixed eventReleaseStand(object who) {
mixed direct_sit_down_word_obj() {
mixed eventReceiveSit(object who) {
","/lib/std/bane.c":"void create(){
string array GetBane(){
string array QueryBane(){
int SetBane(array arr){
","/lib/std/worn_storage.c":"int eventReceiveDamage(object agent, int type, int amt, int i, mixed array l) {
string array GetSave() {
string GetItemCondition() {
void eventDeteriorate(int type) {
int eventMove(mixed dest) {
mixed eventEquip(object who, string array limbs) {
mixed CanEquip(object who, string array limbs) {
varargs mixed eventUnequip(object who) {
static void create() {
static int Destruct() {
varargs string GetExternalDesc(){
mixed eventShow(object who, string component) {
int GetRadiantLight(int ambient) {
static mixed array AddSave(mixed array vars) {
int SetSaveRecurse(int x) {
mixed CanSteal(object who) {
string array GetRestrictLimbs() {
int inventory_visible() {
int GetOpacity() {
varargs mixed CanShowInterior(object who, object target) {
int eventReceiveObject(object ob) {
mixed CanPutInto(object who, object what) {
int inventory_accessible() {
mixed CanGetFrom(object who, object item) {
mixed CanOpen(object who, string id) {
mixed CanClose(object who, string id) {
mixed CanLock(object who, string id) {
mixed CanPick(object who, string id) {
mixed CanUnlock(object who, string id, object key) {
int SetMaxRecurseDepth(int i){
string GetEquippedShort() {
int GetCanClose() {
int SetCanClose(int x) {
int GetCanLock() {
int SetCanLock(int x) {
void SetKey(string key) {
void PutCheck();
void init() {
varargs mixed eventRepair(object who, int strength, int type) {
varargs string GetEquippedDescription(object who) {
int SetRetainOnDeath(int x ) { return (RetainOnDeath = x); }
mixed CanRepair(object who) {
int GetRetainOnDeath() { return RetainOnDeath; }
int GetMaxRecurseDepth(){
int GetRecurseDepth(){
int AddRecurseDepth(int i){
int SetRecurseDepth(int i){
int GetFingers() {
int GetMaxProtection(int type);
int SetProtection(int type, int amount) {
string array SetRestrictLimbs(string array limbs) {
int SetFingers(int x) {
int GetProtection(int type) {
mixed GetWear() {
mixed SetWear(mixed val) {
int restrict(mixed arg){
","/lib/std/bot_limb.c":"static void create() {
void SetLimb(string limb, string owner, string race) {
int eventDecay() {
","/secure/lib/connect.c":"varargs int eventPrint(string msg, mixed cl, mixed arg3) {
int array GetScreen() {
static void create(int binary) {
string GetKeyName() {
void eventDestruct() {
void SetLastError(mapping m) {
mapping GetLastError() {
string GetCapName() {
static void terminal_type(string str) {
static void window_size(int width, int height) {
static void InputPassword(string pass, string cap) {
static void CreateGuest() {
int eventCheckPending(string str){
void eventCompleteChar(){
void InputCre(string str){
static string eventReadPassword(string nom){
int CheckIp(){
static void eventCreatePlayer(string cap) {
varargs static void logon(mixed foo) {
static void InputName(string namen, string kill_me) {
static void ConfirmName(string ans, string cap) {
static void eventReEnterGame(string cap) {
static void ConfirmReconnect(string ans, string cap) {
static int CanLogin() {
static private void eventEnterGame() {
static void CreatePassword(string pass, string cap) {
static void ConfirmPassword(string control, string cap, string pass) {
static void InputGender(string str, string cap) {
static void InputCapName(string name, string cap) {
static void InputEmail(string email) {
static void InputRealName(string rname) {
static void InputRace(string str) {
static void cmdHelp(string args) {
static void cmdList() {
static void cmdPick(string args) {
static void eventTimeout() {
static void GetGuestName(string nom) {
","/verbs/creators/delete.c":"static void create() {
int eventDeleteObject(object ob1, object ob2){
mixed can_delete_exit_str(string str) {
mixed can_delete_enter_str(string str) {
mixed can_delete_room_str(string str) {
mixed can_delete_obj_from_here(object ob){
mixed can_delete_obj_from_obj(object ob1, object ob2){
mixed can_delete_obj_from_room(object ob){
mixed do_delete_exit_str(string str) {
mixed do_delete_enter_str(string str) {
mixed do_delete_room_str(string str) {
mixed do_delete_obj(object ob){
mixed do_delete_obj_from_obj(object ob1, object ob2){
mixed do_delete_obj_from_room(object ob){
mixed do_delete_obj_from_here(object ob){
int eventDeleteExit(string str){
","/lib/events/look_in.c":"mixed direct_look_in_obj() {
mixed direct_look_inside_obj() {
mixed indirect_look_at_obj_word_obj(object target) {
mixed inventory_visible() {
string SetInternalDesc(string str) {
int GetOpacity() {
int SetOpacity(int x) {
varargs mixed CanShowInterior(object who, object target) {
varargs mixed eventShowInterior(object who, object target) {
string GetInternalDesc() {
","/verbs/common/shout.c":"static void create() {
string GetHelp(string str) {
mixed do_shout_in_wrd_str(string lang, string str) {
mixed can_shout_str(string str) {
mixed can_shout_in_wrd_str(string lang, string str) {
mixed do_shout_str(string str) {
","/verbs/creators/dest.c":"static void create() {
mixed can_dest_obj(string str) {
mixed can_dest_str(){
mixed do_dest_obj(object ob){
mixed do_dest_obs(object array obs) {
mixed do_dest_str(string str){
","/secure/sefun/get_object.c":"varargs object get_object( string str, object player )
varargs mixed get_objects( string str, object player, int no_arr )
","/verbs/items/pull.c":"static void create() {
mixed can_pull_str_on_obj() {
mixed do_pull_obj(object target) {
varargs mixed do_pull_str_on_obj(string thing, object target) {
mixed can_pull_obj() {
","/lib/clay.c":"void create(){
void init(){
varargs string SetComposition(string comp, string name, string array nouns, string array adjs, string
void InitComposition();
","/lib/match.c":"mixed eventStrike(object who) {
int GetStrikeChance() {
mixed direct_strike_obj() {
static int SetStrikeChance(int x) {
","/lib/props/description.c":"mixed direct_reload_str_word() { return 1; }
mixed direct_reload_every_str() { return 1; }
mixed indirect_reload_every_str() { return 1; }
mixed direct_copy_obj_to_obj() { return 1; }
mixed direct_copy_obj_str() { return 1; }
mixed direct_add_obj_to_obj() { return 1; }
mixed indirect_add_obj_to_obj() { return 1; }
mixed direct_delete_obj_from_obj(){
mixed direct_delete_obj_from_here() { return 1; }
mixed direct_delete_obj_from_room() { return 1; }
mixed indirect_add_obj_to_here() { return 1; }
mixed indirect_add_obj_to_room() { return 1; }
mixed direct_createfix_obj() {
mixed direct_modify_word_str() {
string GetShort();
mixed indirect_reload_word_obj() { return 1; }
mixed indirect_delete_obj_from_here() { return 1; }
mixed indirect_reload_str_word() { return 1; }
mixed direct_initfix_obj() {
mixed direct_reload_obj() { return 1; }
mixed indirect_reload_obj() { return 1; }
mixed direct_reload_str_obj() { return 1; }
mixed indirect_reload_str_obj() { return 1; }
object array GetDummyItems() {
mixed indirect_delete_obj_from_obj(){
mixed direct_modify_obj_str() {
int SetNoModify(int i){
int GetModify(){
int GetNoModify(){
string GetDefiniteShort() {
varargs mixed SetShort(mixed val, int proper) {
mixed indirect_delete_obj_from_room() { return 1; }
","/verbs/common/say.c":"static void create() {
string GetHelp(string str) {
mixed can_say_to_liv(object ob) {
mixed can_say_to_liv_str(object targ, string str) {
mixed can_say_str(string str) {
mixed do_say() { return 1; }
mixed do_say_to_liv(object ob) { return 1; }
mixed do_say_to_liv_str(object targ, string str) {
mixed do_say_str(string str) { return do_say_to_liv_str(0, str); }
","/lib/currency.c":"int GetBank(string bank, string type) {
mapping GetAccountInfo(string bank) {
varargs int GetNetWorth(string benjamins) {
void ResetBank() { Bank = ([]); }
void ResetCurrency() { Currency = ([]); }
static void create() {
int GetCurrency(string type) { return Currency[type]; }
int AddBank(string bank, string type, int amount) {
mapping GetCurrencyMap() { return copy(Currency); }
varargs int GetCurrencyMass(string type) {
string array GetCurrencies() { return keys(Currency); }
int AddCurrency(string type, int amount) {
","/secure/sefun/absolute_path.c":"string absolute_path(string curr, string newp) {
","/lib/virtual/virt_std.c":"object compile_object(string fname) {
mixed CreateVirtualObject(string fname) {
","/lib/domesticate.c":"mixed direct_command_liv_to_str(){
mixed direct_befriend_liv(){
object GetMountOwner(){
object SetMountOwner(object who){
int SetCanBefriend(int i){
int CanAbandon(object who){
int SetCanTrain(int i){
int CanUnTrain(){
int SetCanCommand(int i){
int eventBefriend(object who){
mixed direct_train_liv_to_str(){
mixed direct_abandon_liv(){
mixed direct_untrain_liv(){
int eventAbandon(object who){
varargs int eventTrainLiving(object who, string what){
varargs int eventUnTrainLiving(object who, string what){
string array GetTrainedSkilles(){
string array SetTrainedSkills(string array skills){
string eventCommandNPC(object who, string cmd){
mixed direct_untrain_liv_to_str(){
","/verbs/items/unlock.c":"static void create() {
mixed do_unlock_obj_with_obj(object target, object key) {
mixed can_unlock_obj_with_obj() {
","/verbs/players/describe.c":"static void create() {
mixed can_describe_str(string str) {
mixed do_describe_str(string str) {
","/lib/events/sell.c":"mixed CanSell(object seller) {
mixed indirect_sell_liv_obj() {
mixed direct_sell_obj_to_liv() {
","/lib/verb.c":"static void create() {
varargs static string array SetSynonyms(mixed array args...) {
static string SetVerb(string str) {
static string SetErrorMessage(string str) { return (ErrorMessage = str); }
string GetVerb() { return Verb; }
varargs static string array SetRules(mixed array args...) {
string GetErrorMessage() { return ErrorMessage; }
string array GetRules() { return copy(Rules); }
string array GetVerbs() { return ({ Verb }); }
string array GetSynonyms() { return copy(Synonyms); }
","/verbs/items/balance.c":"static void create() {
mixed do_balance_obj_to_obj(object obj1, object obj2) {
mixed can_balance_obj_to_obj() {
int eventBalance(object caster, object obj1, object obj2) {
","/verbs/items/touch.c":"static void create() {
mixed do_touch_str_word_obj(string str, object ob) {
mixed can_touch_str_word_obj() {
mixed can_touch_obj() {
mixed do_touch_obj(object ob) {
","/lib/props/equip.c":"string array GetSave() {
mixed eventEquip(object who, string array limbs) {
int SetArmorType(int x) {
mixed CanEquip(object who, string array limbs) {
mixed CanUnequip(object who) {
static void eventRestoreEquip(string array limbs) {
int GetArmorType() {
static string array SetWorn(string array limbs) {
mixed eventUnequip(object who) {
string array GetWorn() {
","/verbs/items/donate.c":"static void create() {
mixed do_donate_str_str_to_str(string amount, string currency, string foo){
mixed can_donate_str_str_to_str(string amount, string currency, string foo){
","/lib/teacher.c":"static void create() {
static void init() {
string SetLocalCurrency(string str){
int eventComplete(object who, string language) {
string GetLocalCurrency(){
int eventContinue(object who, string language, int x) {
string array GetTeachingLanguages() { return copy(TeachingLanguages); }
mapping GetStudents() { return copy(Students); }
int eventHelp(object who, string unused) {
int eventTeach(object who, string verb, string language) {
static int ContinueTeaching(object who, string language, int x) {
int eventStart(object who, string language) {
mixed AddTeachingLanguages(string array args){
int SetAllLanguages(int i){
int GetAllLanguages(){
int GetCommercial(){
int SetCommercial(int i){
int GetTeachingFee(){
int SetTeachingFee(int i){
string Expertise(){
mixed RemoveTeachingLanguages(string array args...) {
","/verbs/items/extinguish.c":"static void create() {
mixed can_extinguish_obj() {
mixed do_extinguish_obj(object target) {
mixed do_extinguish_obs(mixed array targs) {
","/verbs/items/consult.c":"static void create() {
mixed do_consult_obj(object target) {
varargs mixed do_consult_str_on_obj(string thing, object target) {
mixed can_consult_obj() {
mixed can_consult_str_on_obj() {
","/lib/events/climb.c":"varargs mixed eventClimb(object who, int type, string where) {
mixed direct_climb_word_obj(string word, object ob) {
mixed direct_climb_out_of_obj(object ob) {
mapping GetClimbs() {
int SetCanClimbCarried(int i) {
int GetCanClimbCarried() {
varargs static mapping SetClimb(mixed val, int type) {
mixed direct_climb_obj(object ob) {
","/lib/detect.c":"int direct_detect_wrd_in_obj(string word) {
mixed eventDetect(object who, string str, int ability) {
","/verbs/creators/reload.c":"static void create() {
mixed do_reload_word(string wrd) {
mixed do_reload_str_word(string wrd1, string wrd2) {
mixed do_reload_every_str(string str){
mixed can_reload_every_str(string str){
mixed can_reload_str_obj(string str) {
mixed can_reload_word(string str) {
mixed can_reload_str_word(string str, string str2) {
mixed do_reload_obj(object ob) {
mixed do_reload_str_obj(string str, object ob) {
mixed can_reload_obj(string str) {
","/lib/lvs/abilities.c":"static void create() {
varargs void RemoveSkillBonus(string skill, object ob) {
int GetSkillBonus(string skill) {
int GetSkillClass(string skill) {
int GetLevel() {
void AddSkillBonus(string skill, mixed f) {
int GetMaxSkillPoints(string skill, int level) {
string array GetSkills() {
mapping GetSkillsMap(){
int SetLevel(int x) {
int AddSkillPoints(string name, int x) {
int GetSkillLevel(string skill) {
string array GetPrimarySkills();
varargs void SetSkill(string skill, int level, mixed cls);
int GetBaseSkillLevel(string skill) {
int ResetLevel() {
","/lib/flask.c":"static void create() {
string GetExternalDesc(){
mixed CanDrink(object who, string what){
varargs mixed eventDrink(object who, object target, string foo) {
mixed GetStrength() { return FlaskStrength; }
int GetMealType() { return MealType; }
varargs mixed eventEmpty(object who){
mixed eventPour(object who, object from){
int SetMealType(int x) { return (MealType = x); }
int SetStrength(int x) { return (FlaskStrength = x); }
mixed eventFill(object who, object from){
int CanFillMe(){
int CanFillOther(){
string GetFlaskContents() { return FlaskContents; }
int direct_fill_obj_with_obj(){ return 1;}
int direct_fill_obj_from_obj(){ return 1;}
mixed indirect_drink_from_obj() {
int direct_pour_from_obj_into_obj() { return 1;}
int direct_pour_out_obj() { return 1;}
int SetFlaskUses(int x) { return (FlaskUses = x); }
int GetFlaskUses() { return FlaskUses; }
int SetEverFill(int x) { return (EverFill = x); }
int GetEverFill() { return EverFill; }
int direct_pour_obj_out() { return 1;}
int indirect_pour_from_obj_into_obj() { return 1;}
int SetMaxFlask(int x) { return (MaxFlask = x); }
int GetMaxFlask() { return MaxFlask; }
string SetFlaskContents(string str) {
int indirect_fill_obj_from_obj(){ return 1;}
int indirect_pour_obj_into_obj() { return 1;}
int indirect_fill_obj_with_obj(){ return 1;}
int direct_empty_obj() { return 1;}
","/lib/events/smell.c":"varargs string GetSmell(string str, object who) {
string array GetSmells() {
mapping RemoveSmell(string item) {
mixed direct_smell_obj() {
mixed direct_smell_str_word_obj(string str) {
varargs mixed SetSmell(mixed array args...) {
varargs mixed eventSmell(object who, string str) {
mapping GetSmellMap(){
","/lib/events/get_from.c":"mixed CanPutInto(object who, object item) {
mixed CanPutOnto(object who, object item) {
mixed eventGetFrom(object who, object array what) {
mixed indirect_get_obs_from_obj(object array items, object storage) {
int inventory_visible() {
int inventory_accessible() {
mixed eventPutInto(object who, object what) {
mixed eventPutOnto(object who, object what) {
mixed indirect_get_obs_out_of_obj(object array items, object storage) {
mixed indirect_put_obj_word_obj(object what, string word, object storage) {
mixed indirect_put_obs_word_obj(object array items, string wrd, object storage) {
mixed CanGetFrom(object who, object item) {
mixed indirect_get_obj_out_of_obj(object item, object container) {
mixed indirect_get_obj_from_obj(object item, object container) {
","/verbs/players/sit.c":"static void create() {
mixed do_sit_down_word_obj(string word, object target) {
mixed can_sit_down_word_obj() {
mixed do_sit_word_obj(string word, object target) {
mixed can_sit_up() {
mixed can_sit_word_obj() {
mixed do_sit_up() {
","/lib/blank.c":"","/lib/help.c":"string GetHelp(string topic) {
static mapping SetHelp(mixed val) {
","/secure/sefun/user_path.c":"string user_path(string name)
","/lib/props/deterioration.c":"int eventReceiveDamage(object agent, int type, int amt, int d, mixed array l) {
string array GetSave() {
int GetBroken() {
int SetBroken(int x) {
int SetDamagePoints(int x) {
int GetDamagePoints() {
string GetItemCondition() {
int GetDeterioration() {
","/lib/race.c":"void NewBody(string race) {
static void heart_beat() {
string GetRace() { return Race; }
int GetMaxCarry() {
static void create() {
varargs int eventDie(object agent) {
int GetCarriedMass() { return 0; }
varargs string SetRace(string race, mixed extra) {
string GetResistance(int type) { return genetics::GetResistance(type); }
int GetHeartRate() {
int GetHealRate() {
varargs int GetMaxHealthPoints(string limb) {
int GetMaxMagicPoints() {
float GetMaxStaminaPoints() {
int GetAlcohol() { return body::GetAlcohol(); }
int GetStatLevel(string stat) { return genetics::GetStatLevel(stat); }
varargs void SetStat(string stat, int level, int classes) {
string GetGender() { return Gender; }
mixed CanDrink(object ob) {
mixed CanEat(object ob) {
mixed eventDrink(object ob) {
mixed eventEat(object ob) {
string SetGender(string gender) { return (Gender = gender); }
string SetTown(string str) { return (Town = str); }
string GetTown() { return Town; }
int GetLuck() {
int GetMobility() {
","/secure/sefun/tail.c":"int tail(string file) {
","/lib/props/save.c":"int DumpVars(string file){
","/lib/magic.c":"static varargs void eventCast(object spell, string limb, object array targs);
mapping GetSpellBook() {
void SetSpellBook(mapping book) {
int GetSpellLevel(string spell) {
varargs mixed CanCast(object spell) {
varargs mixed eventPrepareCast(string verb, mixed array args...) {
mixed eventLearnSpell(string spell) {
static void eventTrainSpell(object spell);
","/lib/combat.c":"varargs int eventReceiveDamage(object agent, int type, int x, int internal,
mixed eventBite(object target) {
mixed eventTurn(object who) {
static void heart_beat() {
int GetMaxCarry() {
static void create() {
varargs int eventDie(mixed agent) {
int GetLevel() {
void eventEnemyDied(object ob) {
varargs int SetParalyzed(int count, function f) {
varargs int GetMaxHealthPoints(string limb){
int GetBaseStatLevel(string stat) {
int GetParalyzed() { return cParalyzed; }
void eventDestroyEnemy(object ob) {
int GetInCombat() {
int eventWeaponRound(mixed target, mixed val);
void eventWeaponAttack(object target, object weapon, int num);
int eventMeleeRound(mixed target, function f);
void eventMeleeAttack(object target, string limb);
int eventMagicRound(mixed target, function f);
int eventWimpy();
int SetDead(int i){
object array GetEnemies() {
int AddEnemy(object ob) {
int RemoveEnemy(object ob) {
int GetDead(){
int CanMelee(object target) {
static int Destruct() {
int eventPreAttack(object agent) {
varargs int eventReceiveAttack(int speed, string def, object agent) {
object array SetSpecialTarget(object array cibles) {
int eventQuell(){
int eventUnQuell(){
string SetParty(string str) {
string GetParty() {
varargs int SetAttack(mixed target, function callback, int type) {
string SetWimpyCommand(string cmd) {
string GetWimpyCommand() {
int GetMagicChance(int val) {
int GetMagicResistance() {
int GetCombatChance(int val) {
int GetDefenseChance(int val) {
int GetCombatBonus(int level) {
static int GetDamage(int power, string skill) {
int CanWeapon(object target, string type, int hands, int num) {
void eventKillEnemy(object ob) {
int eventExecuteAttack(mixed target);
object SetCurrentEnemy(object ob) {
static object ResetCurrentEnemy() {
object GetCurrentEnemy() {
private static void SortEnemies() {
mixed array AddNonTargets(mixed val){
mixed array RemoveNonTargets(mixed val){
object array GetNonTargets(){
int AddHostile(object ob) {
int RemoveHostile(object ob) {
object array GetHostiles() {
object array GetSpecialTarget() {
","/lib/events/look.c":"mapping RemoveItem(mixed item) {
mapping SetItems(mapping items) {
string SetLong(string str) {
mixed direct_look_obj() {
mixed direct_look_at_obj_word_obj() {
varargs string GetLong(string str) {
varargs int GetInvis(object ob) {
mixed direct_look_at_str_on_obj(string str, object target) {
varargs string GetExternalDesc(object who) {
string SetExternalDesc(string desc) {
varargs mixed AddItem(mixed item, mixed val) {
mixed AddItem_func(mixed foo){
mixed SetItem_func(mixed foo){
string array GetItems() {
mapping GetItemsMap(){
mapping SetItem_desc(mapping items) {
mixed SetInvis(mixed val) {
varargs mixed eventShow(object who, string component) {
","/lib/std/armor.c":"int eventReceiveDamage(object agent, int type, int amt, int i, mixed array l) {
string array GetSave() {
string GetItemCondition() {
void eventDeteriorate(int type) {
int eventMove(mixed dest) {
mixed eventEquip(object who, string array limbs) {
mixed CanEquip(object who, string array limbs) {
varargs mixed eventUnequip(object who) {
static void create() {
static int Destruct() {
varargs string GetExternalDesc(){
mixed eventShow(object who, string component) {
static mixed array AddSave(mixed array vars) {
mixed CanSteal(object who) {
string array GetRestrictLimbs() {
string GetEquippedShort() {
void init() {
varargs mixed eventRepair(object who, int strength, int type) {
varargs string GetEquippedDescription(object who) {
int SetRetainOnDeath(int x ) { return (RetainOnDeath = x); }
mixed CanRepair(object who) {
int GetRetainOnDeath() { return RetainOnDeath; }
int GetFingers() {
int GetMaxProtection(int type);
int SetProtection(int type, int amount) {
string array SetRestrictLimbs(string array limbs) {
int SetFingers(int x) {
int GetProtection(int type) {
int SetAC(int i){
mixed GetWear() {
mixed SetWear(mixed val) {
int restrict(mixed arg){
","/verbs/items/move.c":"static void create() {
mixed can_move_str_on_obj() {
mixed do_move_obj(object target) {
varargs mixed do_move_str_on_obj(string thing, object target) {
mixed can_move_obj() {
","/verbs/players/bump.c":"static void create() {
void MoveBack(object ob, string where) {
mixed can_bump_liv() {
mixed do_bump_liv(object ob) {
","/verbs/players/pray.c":"static void create() {
mixed can_pray_for_str_against_str(string spell) {
mixed can_pray_for_str_for_obj(string spell) {
mixed do_pray_for_str_for_obj(string spell, object ob) {
mixed can_pray_for_str_against_str_for_liv(string spell) {
mixed do_pray_for_str_against_str(string spell, string ag) {
mixed do_pray_for_str_against_str_for_liv(string spell, string ag, object tg) {
","/verbs/rooms/stop.c":"static void create() {
string GetHelp(string str) {
mixed do_stop_str(string str) {
mixed can_stop_str(string str) {
","/verbs/common/body.c":"static void create() {
string GetHelp(string str) {
varargs void eventCheckBody(object ob, object receiver) {
int livings_are_remote() { return 1; }
mixed can_body() {
mixed can_body_liv() {
mixed do_body() {
mixed do_body_liv(object ob) {
","/verbs/players/withdraw.c":"static void create() {
mixed can_withdraw() {
mixed do_withdraw() {
","/verbs/items/free.c":"static void create() {
mixed can_free_liv_from_obj() {
mixed do_free_liv_from_obj(object target, object tool) {
","/secure/sefun/ascii.c":"string convert_ascii(int i){
","/lib/events/drop.c":"mixed SetPreventDrop(mixed val) {
mixed GetPreventDrop() {
mixed CanDrop(object who) {
mixed direct_drop_obj(object target) {
","/lib/events/put.c":"mixed CanPut(object who) {
varargs mixed eventPut(object who, object storage, string prep) {
mixed direct_put_wrd_wrd_word_obj(){
static void create() {
mixed direct_put_obj_word_obj(object ob, string wrd, object ob2) {
mixed GetPreventPut() {
mixed SetPreventPut(mixed val) {
","/lib/events/dig.c":"mixed eventDig(object who, object tool) {
mixed GetDig() {
mixed direct_dig_obj_with_obj() {
int RemoveDig() {
mixed SetDig(mixed val) {
mixed CanDig(object who) {
","/secure/sefun/numbers.c":"int bitshiftedp(int x){
int bool_reverse(mixed arg){
int atoi(string str){
string itoa(int i){
","/secure/sefun/make_workroom.c":"int make_workroom(mixed dude) {
","/verbs/creators/pulsecheck.c":"static void create() {
mixed can_pulsecheck_liv(string str) {
mixed do_pulsecheck_liv(object ob){
mixed do_pulsecheck_lvs(object array obs) {
","/verbs/players/abandon.c":"static void create() {
mixed do_abandon_liv(object ob) {
mixed can_abandon_liv() { return 1; }
","/verbs/items/strike.c":"static void create() {
mixed can_strike_obj() {
mixed do_strike_obj(object ob) {
","/secure/sefun/events.c":"int event_pending(object ob) {
varargs void add_event(string source, string ob, string fun, mixed array args, int when, int repeat){
varargs void remove_event(int i){
varargs void create_event(string f, int when, mixed array args, int reg) {
","/verbs/items/sell.c":"static void create() {
mixed do_sell_liv_obj(object vendor, object item) {
mixed can_sell_obj_to_liv() {
mixed can_sell_liv_obs() {
mixed do_sell_obj_to_liv(object ob, object vendor) {
mixed do_sell_obs_to_liv(object array items, object vendor) {
mixed do_sell_liv_obs(object vendor, object array items) {
","/lib/std/limb.c":"string GetShort() {
int CanReceive(object ob) {
void create(){
string GetItemCondition(){
int Destruct() {
int GetSaveString() {
void init(){
void SetLimb(string limb, string owner, string race) {
string GetLimb() {
string GetRace() {
int eventDecay();
string GetOwner() {
int SetDecayLife(int x) {
int GetDecayLife() {
","/lib/manycoins.c":"int PutCoins(object who);
int Payment(object who, int value) {
","/verbs/players/stand.c":"static void create() {
mixed can_stand_up() {
mixed do_stand_up() {
","/secure/sefun/copy.c":"mixed copy(mixed val) {
","/verbs/items/remove.c":"static void create() {
mixed do_remove_obj(object ob) {
mixed do_remove_obs(mixed array res) {
mixed do_remove_obs_out_of_obj(mixed array res, object container) {
mixed do_remove_obj_from_obj(object targ, object container) {
mixed do_remove_obs_from_obj(mixed array res, object container) {
mixed can_remove_obj_out_of_obj() {
mixed can_remove_obj_from_obj() {
mixed do_remove_obj_out_of_obj(object targ, object container) {
","/verbs/items/throw.c":"static void create() {
void eventThrow(object who, object what, object where) {
mixed do_throw_obj_word_obj(object what, string word, object where) {
mixed can_throw_obj() {
mixed can_throw_obj_word_obj() {
","/lib/events/touch.c":"static void create() {
varargs string GetTouch(string str, object who) {
string array GetTouches() {
mapping RemoveTouch(string item) {
varargs mixed SetTouch(mixed array args...) {
varargs mixed eventTouch(object who, string str) {
mixed direct_touch_obj() {
mixed direct_touch_str_word_obj(string str) {
","/lib/potion.c":"void create(){
mixed eventDrink(object who) {
mapping GetSkills(){
mapping GetStats(){
mapping SetSkills(mapping arg){
mapping SetStats(mapping arg){
int GetDuration(){
mapping SetPoints(mapping arg){
mapping GetPoints(){
int SetDuration(int i){
","/verbs/players/news.c":"static void create() {
mixed can_news_str(string str) {
mixed do_news() { return do_news_str(\"general\"); }
","/verbs/items/turn.c":"static void create() {
mixed do_turn_on_obj_word_obj(mixed foo, mixed foo2) {
mixed can_turn_obj(mixed foo) {
mixed can_turn_on_obj(mixed foo) {
mixed can_turn_off_obj(mixed foo) {
varargs mixed do_turn_obj(mixed foo, mixed foo2) {
mixed do_turn_off_obj(mixed foo) {
","/lib/teller.c":"static void create() {
mixed GetCurrencies() { return copy(Currencies); }
int eventWithdraw(object who, string currency, int amount) {
string SetLocalCurrency(string str) { return (LocalCurrency = str); }
int eventBalance(object who) {
string GetLocalCurrency() { return LocalCurrency; }
int SetNonLocalFee(int x) { return (NonLocalFee = x); }
string SetBankName(string str) { return (BankName = str); }
int SetLocalFee(int x) { return (LocalFee = x); }
int SetOpenFee(int x) { return (OpenFee = x); }
float SetExchangeFee(float x) { return (ExchangeFee = x); }
mixed SetCurrencies(mixed var) {
int GetLocalFee() { return LocalFee; }
int GetNonLocalFee() { return NonLocalFee; }
int GetExchangeFee() { return ExchangeFee; }
int GetOpenFee() { return OpenFee; }
string GetBankName() { return BankName; }
int AddSurcharge(object who, string currency, int amount) {
int eventDeposit(object who, string currency, int amount) {
int eventExchange(object who, int amount, string str1, string str2) {
int eventOpenAccount(object who) {
int cmdParse(object who, string cmd, string str) {
mixed CanBank(object who) {
","/verbs/items/bury.c":"static void create() {
static void eventBury(object who, object tool, object what, object check) {
varargs static void eventPrepareBury(object who, object tool, object what) {
mixed can_bury_str_with_obj() {
mixed can_bury_obj_with_obj() {
mixed do_bury_str_with_obj(string str, object tool) {
mixed do_bury_obj_with_obj(object what, object tool) {
","/lib/genetics.c":"static void create() {
static void RemoveBlindness() {
int GetStatClass(string stat) {
static void heart_beat() {
varargs mixed GetEffectiveVision(mixed location, int raw_score) {
mapping GetStatsMap() { return copy(Stats); }
string GetResistance(int type) {
int GetStatLevel(string stat) {
mixed eventCustomizeStat(string stat, int amount) {
varargs void SetStat(string stat, int level, int classes) {
varargs void AddStat(string stat, int base, int cls) {
int GetBaseStatLevel(string stat) {
int AddStatPoints(string stat, int x) {
int GetMaxStatPoints(string stat, int level) {
void AddStatBonus(string stat, mixed f) {
varargs void RemoveStatBonus(string stat, object ob) {
int GetStatBonus(string stat) {
varargs string SetResistance(int type, string level) {
int GetCustomStats() { return CustomStats; }
int array GetLightSensitivity() {
varargs static int array SetLightSensitivity(mixed array val...) {
int AddVisionBonus(int x) {
int GetVisionBonus() {
int GetBlind() {
varargs mixed eventBlind(object who, int amt, mixed end) {
mixed eventRestoreSight(object who, int amt) {
mapping GetResistanceMap(){
","/secure/sefun/get_stack.c":"string get_stack() {
","/lib/comp/seal.c":"varargs mixed eventOpen(object who, object tool) {
mixed CanOpen(object who) {
mixed CanLock(object who, string id) {
void create() {
varargs static mixed AddSave(mixed args...) {
","/lib/nmsh.c":"static void create() {
string GetKeyName() { return 0; }
nomask static int cmd_nickname(string str) {
nomask static int cmd_unalias(string str) {
nomask static int cmd_pwd(string str) {
nomask static int cmd_work(string str) {
int Setup() {
string get_path() { return query_cwd(); }
varargs int GetInvis(object ob) { return 0; }
string process_input(string str) {
nomask static int cmd_alias(string str) {
nomask static int cmd_cd(string str) {
nomask static int cmd_nmsh(string str) {
nomask static int cmd_pushd(string str) {
nomask static int cmd_popd(string str) {
nomask string write_prompt() {
nomask static void process_request(string request, string xtra) {
static int request_vis(object ob) {
private static int set_cwd(string str) {
nomask private static string do_nickname(string str) {
nomask private static string do_alias(string str) {
nomask static string replace_nickname(string str) {
void reset_prompt() {
string GetPrompt() { return DEFAULT_PROMPT; }
int query_mp() { return 1; }
int query_max_mp() { return 10; }
int query_hp() { return 1; }
int query_max_hp() { return 10; }
int query_sp() { return 1; }
int query_max_sp() { return 10; }
static string user_names(object ob) {
string query_prev_wd() { return PreviousWorkingDirectory; }
","/verbs/players/ride.c":"static void create() {
mixed can_ride_str(string str) {
mixed can_ride_into_str(string str) {
mixed do_ride_str(string str) {
mixed do_ride_into_str(string str) {
","/lib/pole.c":"static void create() {
mixed AddSave(mixed array vars) { return ({}); }
mixed CanCast(object who) {
int GetStrength() { return PoleStrength; }
int SetStrength(int x) { return (PoleStrength = x);  }
mixed eventCatch(object who, string fish) {
int SetChance(int x) { return (CatchChance =x); }
int GetChance() { return CatchChance + GetProperty(\"blessed\"); }
mixed direct_fish_with_obj() {
int eventFish(object who) {
int eventBreak() {
mixed direct_cast_obj() {
","/lib/editor.c":"varargs void eventEdit(string file, function callback) {
static void create() {
static string process_input(string str) {
","/secure/sefun/morality.c":"int moral_act(object agent, object target, int amount) {
","/spells/meditate.c":"static void create() {
int eventCast(object who, int level) {
","/lib/chat.c":"mapping returnChannels(){
static void net_dead() {
static void create() {
string array GetRestrictedChannels() { return (RestrictedChannels + ({})); }
int eventDestruct() {
void eventReconnect() {
string array AddChannel(mixed val) {
string array RemoveChannel(mixed val) {
string array GetChannels() { return keys(Channels); }
string array RestrictChannel(mixed val) {
string array UnrestrictChannel(mixed val) {
static string chat_command(string str) {
","/spells/buffer.c":"static void create() {
int eventCast(object who, int level, string race, object array targets) {
int hitCallback(object who, object agent, int x, class MagicProtection cl) {
void endCallback(object who) {
","/verbs/items/steal.c":"static void create() {
static void eventSteal(object who, mixed what, object target) {
mixed do_steal_obs_from_liv(mixed array res, object liv) {
mixed do_steal_wrd_from_liv(string wrd, object liv) {
mixed do_steal_obj_from_liv(object item, object liv) {
mixed can_steal_obj_from_liv() {
mixed can_steal_wrd_from_liv(string wrd) {
","/verbs/items/wield.c":"static void create() {
mixed can_wield_obj_word_str() {
mixed do_wield_obj_word_str(object ob, string word, string str) {
string array GetFreeLimbs(object who) {
mixed do_wield_obs(mixed array targs) {
","/secure/lib/file.c":"int eventDestruct() {
varargs static void create(string file) {
mixed eventWrite(mixed val) {
mixed eventDelete() {
int isDirectory() {
int isFile() {
int isTemporary() {
mixed eventCreateDirectory() {
string GetFileName() {
string GetLine() {
varargs string GetLines(int arg1, int arg2) {
string GetString() {
varargs mixed eventRename(string name, int clobber) {
int GetLastModified() {
string GetCharacters(int start, int length) {
string array GetDirectoryList() {
int GetSize() {
mixed array GetDirectoryShort() {
","/verbs/items/buy.c":"static void create() {
mixed do_buy_str_from_liv(string str, object vendor) {
mixed can_buy_str_from_liv(string str) {
","/verbs/items/drink.c":"static void create() {
varargs void eventDrink(object who, object what, string id) {
mixed do_drink_obj(object ob) {
mixed can_drink_from_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_drink_from_obj(object ob, string id) {
mixed can_drink_obj(string verb) { return this_player()->CanManipulate(); }
","/lib/clip.c":"int CanReceive(object ob){
int CanRelease(object ob){
void create(){
int MinusAmmo(int i) { ammo -= i; return 1; }
int SetMillimeter(int x){ millimeter=x; return 1; }
string GetAmmoType() { return ammotype; }
string GetPistolType() { return pistoltype; }
int GetCaliber() { return caliber; }
int GetMillimeter() { return millimeter; }
int SetAmmoType(string str) {ammotype=str; return 1; }
int SetPistolType(string str) {pistoltype=str; return 1; }
int SetMaxAmmo(int i) { MaxAmmo=i; return 1; }
int SetCaliber(int x) { caliber=x; return 1; }
int PlusAmmo(int i) { ammo += i; return 1; }
","/lib/trap.c":"static void create() {
static void heart_beat() {
mixed eventFree(object who, string target) {
mixed eventCapture(object who, object target) {
mixed indirect_capture_liv_word_obj(object target) {
mixed indirect_free_liv_from_obj(object target) {
mixed CanCapture(object who, object target) {
mixed CanFree(object who, object target) {
int GetEscapeChance() {
mixed eventEscape() {
object array GetCaptives() {
int SetEscapeChance(int x) {
int GetMaxCapture() {
int SetMaxCapture(int x) {
","/verbs/items/smell.c":"static void create() {
mixed can_smell_obj() {
mixed do_smell() {
mixed do_smell_obj(object ob) {
mixed do_smell_str_word_obj(string str, object ob) {
mixed can_smell_str_word_obj() {
","/secure/sefun/economy.c":"float currency_inflation(string type) {
float currency_rate(string type) {
int currency_mass(int x, string type) {
int currency_value(int x, string str) {
string array mud_currencies() { return (string array )ECONOMY_D->__QueryCurrencies(); }
string query_base_currency(){
int query_base_rate(){
int query_player_money(object who) {
int query_base_value(string currency, int amount){
int valid_currency(string str){
int query_value(int amount,string from_currency, string to_currency){
","/secure/lib/connect.first.c":"string GetKeyName() { return Name; }
static void InputPassword(string str) {
static void logon() {
static void InputName(string str) {
static void ConfirmPassword(string str) {
static void InputGender(string str) {
static void InputCapName(string str) {
static void InputEmail(string str) {
static void InputRealName(string str) {
","/secure/sefun/local_time.c":"mixed local_time(mixed val){
string set_tz(string str){
mixed local_ctime(int i){
int valid_timezone(string str){
string query_tz(){
","/lib/std/bot_corpse.c":"void create() {
int eventDecay() {
","/lib/pistol.c":"int CanReceive(object ob){
int CanRelease(object ob){
mixed CanPutInto(object who, object what) {
mixed CanGetFrom(object who, object item) {
static void create(){
void init(){
int eventShoot(object ob, string str){
int eventFire(string str){
int SetMillimeter(int x) { Millimeter=x; return 1; }
string GetAmmoType() { return AmmoType; }
string GetPistolType() { return PistolType; }
int GetMaxAmmo() { return MaxAmmo; }
int GetCaliber() { return Caliber; }
int GetMillimeter() { return Millimeter; }
int CalculateAmmoSize(){
int missed_shot(){
int ShowRounds() { environment(this_object())->eventPrint(\"Pistol has: \"+rounds+\" rounds.\\n\");
int LoadRevolver(string str){
int SetAmmoType(string str) { AmmoType=str; return 1; }
int SetPistolType(string str) { PistolType=str; return 1; }
int SetMaxAmmo(int x) { MaxAmmo=x; return 1; }
int SetCaliber(int x) { Caliber=x; return 1; }
int GetMag(int i) { return mag; }
int SetMag(int i) { mag=i; return 1; }
int SetLoaded(int i) { loaded=i; return 1; }
int GetLoaded(int i) { return loaded; }
int doMagUnload(){
int LoadAuto(string str){
int doRevolverUnload(string what, string num){
int SetAmmoFile(string str) { AmmoFile=str; return 1; }
int InitRevolver(string array arr){
int startLoad(string str){
int startUnload(string str){
","/verbs/rooms/go.c":"static void create() {
mixed can_go_str(string str) {
mixed do_go_str(string str) {
mixed do_go_into_str(string str) {
mixed can_go_into_str(string str) {
","/lib/std/vendor.c":"static void create() {
int CanCarry(int amount) { return 1; }
mixed eventBuy(object who, object array obs) {
int indirect_sell_obj_to_liv() { return 1; }
mixed eventAsk(object who, string str) {
mixed CanSell(object who, string what) {
int GetValue(object ob, object who) {
int GetVendorType() { return VendorType; }
int SetVendorType(int x) { return (VendorType = x); }
mixed eventSell(object who, mixed what) {
string SetLocalCurrency(string str) { return (LocalCurrency = str); }
string SetStorageRoom(string room) { return (StorageRoom = room); }
int SetMaxItems(int x) { return (MaxItems = x); }
string GetLocalCurrency() { return LocalCurrency; }
mixed direct_buy_str_from_liv(string str) {
int cmdBrowse(object who, string args) {
int cmdShow(object who, string args) {
int cmdPrice(object who, string args) {
int cmdAppraise(object who, string args) {
int indirect_sell_obs_to_liv() { return 1; }
int GetCost(object ob, object who) {
mixed CanBuy(object who, object array obs) {
string GetStorageRoom() { return StorageRoom; }
int GetMaxItems() { return MaxItems; }
","/verbs/players/attack.c":"static void create() {
varargs mixed can_attack_liv(object target) {
mixed do_attack_liv(object target) {
varargs mixed do_attack_lvs(mixed array targets, int exclusive) {
mixed can_attack_only_liv(object target){
mixed can_attack_liv_only(object target){
mixed do_attack_only_liv(object target){
mixed do_attack_liv_only(object target){
","/lib/lead.c":"static void create() {
int eventMoveFollowers(object dest) {
object array GetFollowers() { return filter(keys(Followers), (: $1 :)); }
object array AddFollower(object follower) {
object array RemoveFollower(object follower) {
int SetFollowed(object follower, int followed) {
int GetFollowed(object follower) {
int AddFollowBonus(object follower, int bonus) {
int GetFollowBonus(object follower) {
varargs mixed CanEvade(object ob) {
int eventEvade(object ob) {
mixed direct_lead_liv() {
mixed direct_evade_liv() {
varargs mixed CanLead(object ob) {
","/lib/events/lock.c":"mixed direct_lock_obj_with_obj(object target, object key, string id) {
mixed direct_pick_str_on_obj_with_obj(string str, object target, object tool,
string array GetSave() {
mixed direct_unlock_obj_with_obj(object target, object key, string id) {
string array AddKey(string key) {
varargs string array GetKeys(string unused) {
int GetLocked() {
mixed CanLock(object who, string id) {
mixed CanPick(object who, string id) {
mixed CanUnlock(object who, string id) {
mixed eventLock(object who, object key) {
varargs mixed eventPick(object who, string id, object tool) {
mixed eventUnlock(object who, object key) {
varargs string array SetKeys(mixed array args...) {
int SetLocked(int x) {
int GetLockStrength() {
int SetLockStrength(int x) {
function GetPick() {
function SetPick(function f) {
","/lib/props/value.c":"int CanSell() {
string array GetSave() {
int GetDestroyOnSell() {
int SetDestroyOnSell(int x) {
varargs int GetValue(string str) {
int SetValue(mixed y) {
varargs mixed SetBaseCost(mixed arg, int i){
int GetVendorType() {
int SetVendorType(int x) {
int GetBaseCost(string str){
int SetDollarCost(int x){
","/lib/events/lock_with.c":"mixed indirect_lock_obj_with_obj(object target, object key, string id) {
mixed indirect_unlock_obj_with_obj(object target, object key, string id) {
mixed array GetSave() {
int SetDisableChance(int x) {
int GetDisableChance() {
int GetDisabled() {
int SetDisabled(int x) {
mixed eventUnlockLock(object who, object what) {
mixed eventLockLock(object who, object what) {
","/lib/shell.c":"void create(){
int SetMillimeter(int x){ millimeter=x; return 1; }
string GetAmmoType() { return ammotype; }
string GetPistolType() { return pistoltype; }
int GetCaliber() { return caliber; }
int GetMillimeter() { return millimeter; }
int SetAmmoType(string str) {ammotype=str; return 1; }
int SetPistolType(string str) {pistoltype=str; return 1; }
int SetCaliber(int x) { caliber=x; return 1; }
","/verbs/items/pick.c":"static void create() {
mixed can_pick_obj() {
mixed do_pick_str_on_obj_with_obj(string wrd, object ob, object tool,
mixed can_pick_str_on_obj(string str) {
mixed can_pick_str_on_obj_with_obj(string str) {
mixed do_pick_obj(object ob, string id) {
","/verbs/players/stealth.c":"static void create() {
mixed do_stealth() {
mixed can_stealth_wrd() {
mixed do_stealth_wrd(string args) {
int eventStealth(object caster, string args, int skill) {
","/lib/props/carry.c":"int GetCarriedWeight() {
int GetMaxCarry() {
int GetLivingMaxCarry() {
int SetMaxCarry(int x) {
int AddCarriedMass(int x) {
int CanCarry(int amount);
int GetCarriedMass() {
","/lib/virtual/virt_land.c":"varargs static void create(int x, int y,int z) {
int GetMedium() {
mapping GetDirectionMap(){
void SetVirtualExits(int x, int y, int z);
void PreAddEnter(mixed dir, string file){
varargs mixed GetMapType(int x, int y, int z){
mapping SetSurroundAreas(int x, int y, int z){
void ResetSurroundExits(){
void ResetLocation(){
string GetAreaType(){ return AreaType;}
varargs mixed GetCoordinates(int level) {
object GetMasterMap(){ return Map_Master;}
varargs string array GetNonExits(string array extra){
mapping GetSurroundAreas(){ return Surrounding_Areas; }
varargs void SetLongAndItems(int x, int y, int z) {
int SetMasterMap(mixed map_name){
int SetVirtFile( string file ){
string SetResetMessage(mixed str){ Reset_Message = str;}
void SetCoordinates(int x, int y, int z) {
int SetMedium(int medium){ return Medium = medium;}
string GetReverseDirection(string dir){
","/lib/trainer.c":"static void create() {
static void init() {
int eventTrain(object who, string verb, string skill) {
int SetNoSpells(int i){
mixed AddTrainingSkills(string array args){
int eventComplete(object who, string skill) {
int eventContinue(object who, string skill, int x) {
mixed RemoveTrainingSkills(string array args) {
mapping GetStudents() { return copy(Students); }
int eventHelp(object who, string unused) {
int eventStart(object who, string skill) {
string Expertise(){
int GetNoSpells(){
string array GetTrainingSkills() { return copy(TrainingSkills); }
static int ContinueTraining(object who, string skill, int x) {
","/secure/lib/net/ftp_client.c":"int eventDestruct() {
static void eventSocketError(string str, int x) {
static void eventReadCallback(int fd, mixed val) {
function SetRead(function f) { return (Read = f); }
varargs static int eventClose(class client sock, int aborted) {
static void eventSocketClose() { }
int SetSocketType(int type) { return (SocketType = type); }
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
static void eventWriteCallback(int fd) {
function SetWrite(function f) { return (Write = f); }
function SetClose(function f) { return (Close = f); }
int eventWriteDestruct() {
","/lib/meal.c":"string GetShort() { return item::GetShort(); }
static void create() {
int eventDestruct() { return item::eventDestruct(); }
static mixed AddSave(mixed array vars) { return item::AddSave(vars); }
int GetValue() {
int eventPoison(object who, object agent, int x) {
int GetStrength() { return MealStrength; }
int GetMealType() { return MealType; }
mixed direct_drink_obj() {
mixed eventDrink(object who) {
mixed eventEat(object who) {
int SetMealType(int x) {
int SetStrength(int x) { return (MealStrength = x); }
string GetEmptyItem() { return EmptyItem; }
mixed direct_eat_obj() {
mixed SetEmptyShort(mixed val) { return (EmptyShort = val); }
mixed GetEmptyShort() { return EmptyShort; }
mixed SetEmptyLong(mixed val) { return (EmptyLong = val); }
mixed GetEmptyLong() { return EmptyLong; }
varargs void SetMealMessages(mixed array val...) {
mixed array GetMealMessages() { return ({ MyMessage, OtherMessage }); }
string SetEmptyName(string str) { return (EmptyName = str); }
string GetEmptyName() { return EmptyName; }
mixed direct_drink_from_obj() {
string SetEmptyItem(string file) { return (EmptyItem = file); }
","/verbs/rooms/enter.c":"static void create() {
mixed can_enter_obj() {
mixed can_enter_into_obj() {
mixed do_enter_obj(object targ, string what) {
mixed do_enter_into_obj(object targ, string what) {
","/lib/virtual/virt_map.c":"varargs static void create(string virt_file) {
varargs string array BaseMap(){ //override with actual map
varargs mixed SetAreaMap(int y,int x ,int z, string str){
varargs void InitializeLocations(string tmp){
int AddLocation(string str, int array where){
int RemoveLocation(string str){
varargs mixed GetAreaMap(int x, int y, int z){
int array GetLocations(string str){return Location[str]; }
int SetVirtFile( string file){
void SwitchLocations(){
","/secure/sefun/format_page.c":"string format_page(string array items, int columns) {
","/lib/props/move.c":"object GetLastEnvironment() {
int eventMove(mixed dest) {
","/verbs/players/mount.c":"static void create() {
mixed do_mount_liv(object ob) {
mixed can_mount_liv() {
","/secure/lib/net/telnet_client.c":"static void create()
void init()
string help()
int do_reconnect()
int parse_comm( string str )
void close_callback( int fd )
int do_connect(string args)
int do_reset( string args )
void read_callback( int fd, mixed message )
void write_callback( int fd )
","/verbs/items/look.c":"static void create() {
mixed can_look_at_str_on_obj(string targ, string verb, string id1, string id2){
mixed can_look_obj(string verb, string id) {
varargs mixed do_look_obj(object ob, mixed array args...) {
mixed do_look_str(string str) {
mixed can_look_at_obj(string verb, string id) {
mixed can_look_in_obj(string verb, string id) {
mixed can_look_inside_obj(string verb, string id) {
mixed can_look_at_obj_word_obj(string verb, string targ, string store) {
varargs mixed do_look_at_obj(object ob, mixed arg) {
mixed do_look_at_str(string str) {
mixed do_look_in_obj(object ob) { return do_look_inside_obj(ob); }
mixed do_look_at_obj_word_obj(object target, object storage) {
varargs mixed do_look_at_str_on_obj(string id, object ob) {
mixed can_look_str(string str, string verb) {
","/verbs/players/sleep.c":"static void create() {
mixed can_sleep() {
mixed do_sleep() {
","/verbs/rooms/fish.c":"static void create() {
mixed can_fish_with_obj() {
mixed do_fish_with_obj(object ob) {
","/lib/comp/object.c":"static int Destruct() {
static void create() {
mixed direct_dest_obj() { return 1; }
mixed indirect_dest_obj() { return 1; }
","/lib/talk.c":"int direct_whisper_to_liv() { return 1; }
varargs mixed eventHearTalk(object who, object target, int cls, string verb,
varargs mixed CanSpeak(object target, string verb, string msg, string lang) {
int direct_ask_liv_to_str() { return 1; }
int direct_say_to_liv_str() { return 1; }
int direct_request_str_from_liv() { return 1; }
int eventTellHist(string str){
mixed eventTalkRespond(object who, object targ, int cls, string msg, string lang) {
varargs mixed eventSpeak(object target, int cls, string msg, string lang) {
int direct_ask_liv_str() { return 1; }
int direct_whisper_in_wrd_to_liv() { return 1; }
int direct_whisper_to_liv_str() { return 1; }
int direct_whisper_in_wrd_to_liv_str() { return 1; }
int direct_whisper_to_liv_in_wrd_str() { return 1; }
string array GetTellHistory(){
","/lib/props/mass.c":"string array GetSave() {
int AddMass(int x) {
int SetMass(int x) {
int GetWeight() {
int GetMass() {
","/secure/sefun/time.c":"varargs string time_elapsed(int arg1, int arg2){
int query_date(int x) { return (int)SEASONS_D->GetDay(x); }
string query_day_name(int x) { return (string)SEASONS_D->GetDayName(x); }
int query_hour(int x) { return (int)SEASONS_D->GetHour(x); }
int query_minutes(int x) { return (int)SEASONS_D->GetMinutes(x); }
string query_month(int x) { return (string)SEASONS_D->GetMonth(x); }
int query_night() { return ((string)SEASONS_D->GetTimeOfDay() == \"night\"); }
string query_season(int x) { return (string)SEASONS_D->GetSeason(x); }
int query_year(int x) { return (int)SEASONS_D->GetYear(x); }
function time_event(string tod, function f) {
","/secure/sefun/ordinal.c":"string ordinal(int x) {
","/lib/blank_pile.c":"string GetShort() {
static void create() {
string array GetId() {
","/lib/events/bait.c":"string array GetSave() {
int eventBait(object who, object bait) {
mixed direct_bait_obj_with_obj() {
int AddBait(int x) {
int GetBait() {
int SetBait(int x) {
mixed CanBait(object who) {
","/verbs/players/marry.c":"static void create() {
mixed can_marry_liv_to_liv() {
mixed do_marry_liv_to_liv(object spouse1, object spouse2) {
","/lib/std/barkeep.c":"static void create() {
int CanCarry(int cmt) {
int indirect_sell_obj_to_liv() {
mixed CanSell(object who, string item) {
mixed eventSell(object who, string args);
mapping GetMenuItems() {
string SetLocalCurrency(string str) {
mapping SetMenuItems(mapping mp) {
mapping RemoveMenuItem(string item) {
string GetLocalCurrency();
int eventList(object who, string cmd, string args) {
int GetCost(string array item) {
mapping AddMenuItem(mixed item, string file) {
mixed eventBuyItem(object who, string cmd, string item) {
","/lib/lvs/position.c":"varargs mixed eventLay(object target) {
int SetPosition(int x) {
mixed eventFall() {
int GetPosition() {
string GetFurnitureName(){
varargs mixed eventSit(object target) {
mixed eventFly(){
mixed eventLand(){
mixed eventStand() {
","/verbs/players/target.c":"static void create() {
mixed can_target_liv(object target) {
mixed do_target_liv(object target) {
varargs mixed do_target_lvs(mixed array targets, int exclusive) {
mixed can_target_only_liv(object target){
mixed can_target_liv_only(object target){
mixed do_target_only_liv(object target){
mixed do_target_liv_only(object target){
","/verbs/players/wake.c":"static void create() {
mixed can_wake() {
mixed do_wake() {
","/lib/interactive.c":"string GetShort() {
int GetRadiantLight(int ambient) {
int eventDestruct() {
string SetShort(string str) {
string SetKeyName(string str) {
string GetKeyName() { return object::GetKeyName(); }
string GetName() { return object::GetName(); }
int id(string str) {
void SetCapName(string str) {
void SetId(string array bogus) {
string array GetId() { return UserId; }
string SetLong(string str) {
varargs string GetLong() {
varargs int GetInvis(object ob) { return object::GetInvis(ob); }
static void create() {
int Setup() {
string query_cwd() { return interface::query_cwd(); }
int eventMove(mixed dest) {
static void net_dead() {
void eventReconnect() {
string get_path() {
mixed CanGet(object ob) {
void eventLoadObject(mixed array value, int recurse) { }
mixed array GetCommands() {
int cmdQuit(string str) {
void SetLastError(mapping m) {
mapping GetLastError() {
void eventDescribeEnvironment(int brief) {
int SetRescueBit(int i){
mixed CanDivorce(object who) {
mixed CanMarry(object who, object to_whom) {
mixed eventDivorce(object who) {
mixed eventMarry(object who, object to_whom) {
int GetAge() {
int GetBirth() { return BirthTime - (YEAR array  18); }
void SetEmail(string str) {
string GetEmail() {
int GetLoginTime() { return LoginTime; }
void SetNews(string type, int sz) { News[type] = sz; }
int GetNews(string type) { return News[type]; }
void SetPassword(string str) {
string GetPassword() {
void SetRank(string str) { Rank = str; }
string GetRank() { return Rank; }
void SetRealName(string str) {
string GetRealName() { return RealName; }
int SetBriefMode(int x) { return (Brief = x); }
int GetBriefMode() { return Brief; }
int SetWhereBlock() { return (WhereBlock = !WhereBlock); }
int GetWhereBlock() { return WhereBlock; }
void move_or_destruct() {
string GetSpouse() {
string GetHostSite() {
string GetWebPage() {
string SetWebPage(string page) {
","/lib/fish.c":"static void create() {
int GetMass() { return Mass; }
int SetMass(int x) { return (Mass = x); }
string GetFood() { return Food; }
int eventCatch(object who) { return 1; }
int SetFight(int x) { return (Fight = x); }
string SetFood(string str) { return (Food = str); }
int GetFight() { return Fight; }
","/secure/sefun/parse_objects.c":"object parse_objects(object where, string str) {
","/secure/sefun/percent.c":"float percent(mixed numerator, mixed denominator) {
","/secure/sefun/base_name.c":"string base_name(mixed val) {
","/lib/std/story.c":"static void create() {
void PickTale( string taletotell );
void TellTale( int part );
string SetTalesDir(string dir);
string GetTalesDir();
string SetNoTaleMessage(string notalemessage);
string GetNoTaleMessage();
int GetTellingTale();
","/lib/events/give.c":"mixed direct_give_obj_to_liv() {
mixed indirect_give_liv_obj(object target) {
","/lib/std/bed.c":"int CanGet(object who){
void create(){
","/lib/std/book.c":"void create(){
void init(){
void SetTitle(string title){
void SetSource(string source){
void LoadBook();
mixed GetTitle(){
string GetSource(){
mapping array eventLoadChapters(){
string eventLoadIndex(){
string array eventExtractChapterName(string path){
","/secure/sefun/sefun.c":"string array query_local_functions(mixed arg){
int destruct(object ob) {
int exec(object target, object src) {
object array livings() {
object query_snoop(object ob) {
object query_snooping(object ob) {
void set_eval_limit(int x) {
void set_privs(object ob, string str) { return; }
varargs void shutdown(int code) {
void write(string str) {
mixed array users(){
function functionify(string str){
object find_object( string str ){
varargs mixed objects(mixed arg1, mixed arg2){
int valid_snoop(object snooper, object target){
void notify_fail(string str) {
string capitalize(mixed str) {
","/lib/comp/surface.c":"void create(){
int eventPutOn(object player, object item){
","/verbs/items/judge.c":"static void create() {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed can_judge_obj_to_obj() {
","/lib/exits.c":"object GetDummyItem(mixed id) {
string GetExit(string str) {
string GetEnter(string dir) {
string array GetExits() {
varargs string array GetEnters(int i) {
static void create() {
mixed CanGo(object who, string str) {
mixed eventGo(object who, string str) {
string array GetDoors() {
string SetDoor(string dir, string file) {
varargs void AddEnter(string dir, string dest, function pre, function post) {
static mapping GetEnterData(string dir) {
void RemoveEnter(string dir) {
void SetEnters(mapping mp) {
string GetEnterMessage() {
string SetEnterMessage(string str) {
varargs mapping AddExit(string dir, string dest, function pre, function post) {
mapping GetExitData(string str) {
mapping RemoveExit(string dir) {
mapping SetExits(mapping mp) {
string GetGoMessage() {
string SetGoMessage(string str) {
string SetObviousExits(string str) {
string GetSky() {
string SetSky(string str) {
string ResolveObjectName(string file) {
string GetObviousExits() {
varargs string CreateDoor(string dir, string odir, string long, string locked, string key){
mapping GetFullExitData() {
mapping GetExitMap() {
mapping GetEnterMap(){
string GetDirection(string dest) {
","/lib/language.c":"mapping RemoveLanguage(string lang) {
mapping SetNativeLanguage(string lang){
mixed SetDefaultLanguage(string str){
string GetDefaultLanguage(){
int GetLanguageLevel(string lang) {
string GetLanguageName(string lang) {
int AddLanguagePoints(string lang, int points) {
int GetLanguagePoints(string lang) {
string array GetLanguages() {
int SetPolyglot(int i){
int GetPolyglot(){
int GetNextLevel(string lang, int curr_level);
varargs void SetLanguage(string lang, int level, int native) {
static void heart_beat() {
varargs void SetLanguageComprehension(function check, int time, function end) {
int GetStatLevel(string stat);
string GetNativeLanguage();
","/lib/events/listen.c":"mixed direct_listen_obj() {
mapping RemoveListen(string item) {
string array GetListens() {
varargs mixed SetListen(mixed array args...) {
varargs mixed eventListen(object who, string str) {
mapping GetListenMap(){
mixed direct_listen_to_str_word_obj(string str) {
mixed direct_listen_to_obj() {
","/secure/sefun/absolute_value.c":"int absolute_value(int x) {
","/secure/sefun/singular_array.c":"mixed array singular_array(mixed array arr) {
","/verbs/items/judge1.c":"static void create() {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed can_judge_obj_to_obj() {
","/lib/shadow.c":"int wtf(){
int eventShadow(object ob){
string GetShadowedName(){
object GetShadowedObject(){
","/secure/sefun/interface.c":"string strip_colours(string str) {
","/verbs/items/lock.c":"static void create() {
varargs mixed do_lock_obj_with_obj(object target, object key, mixed array words...) {
mixed can_lock_obj_with_obj(string verb) {
","/lib/sentient.c":"static void create() {
static void heart_beat() {
static int ContinueHeart() {
mixed eventTalkRespond(object who, object targ, int cls, string msg, string lang) {
varargs mixed eventReceiveEmote(object who, string verb, string info) {
mixed eventRequest(object who, string str) {
mixed eventWander() {
int RemoveCommandResponse(string str) {
mixed AddCommandResponse(string str, mixed val) {
mapping GetCommandResponses() {
mapping SetCommandResponses(mapping mp) {
mixed AddEmoteResponse(string verb, mixed val) {
mapping GetEmoteResponses() {
int RemoveEmoteResponse(string verb) {
mapping SetEmoteResponses(mapping mp) {
mixed AddRequestResponse(string str, mixed val) {
mapping GetRequestResponses() {
mapping SetRequestResponses(mapping mp) {
mixed AddTalkResponse(string str, mixed val) {
int RemoveTalkResponse(string str) {
mapping GetTalkResponses() {
mapping SetTalkResponses(mapping mp) {
int SetSpellChance(int i){
int GetSpellChance(){
varargs int SetWander(int speed, mixed array path, int recurse) {
mixed array GetWanderPath() {
mixed array SetWanderPath(mixed array path) {
int GetWanderRecurse() {
int SetWanderRecurse(int x) {
int GetWanderSpeed() {
int SetWanderSpeed(int x) {
int SetPermitLoad(mixed i){
int GetPermitLoad(){
mixed eventAsk(object who, string str) {
int RemoveRequestResponse(string str) {
","/spells/restoration.c":"static void create() {
varargs int eventCast(object who, int level, string limb, object array targs) {
varargs int CanCast(object who, int level, string limb, object array targs) {
int GetMagicCost() {
","/lib/fuel.c":"static void create() {
varargs string GetLong(string val) {
static string SetFuelType(string str) {
int GetFuelAmount() {
static int SetMaxFuel(int x) {
int GetRefuelable() {
static int SetRefuelable(int x) {
mixed eventDecreaseFuel(int x) {
mixed eventRefuel(int x) {
static int SetFuelAmount(int x) {
string GetFuelType() {
int GetMaxFuel() {
","/lib/pile.c":"string GetShort() {
int eventMove(mixed dest) {
static void create() {
int GetMass() {
string array GetId() {
void init(){
void SetCurrency(string str, int amt) {
void SetPile(string str, int amt) {
mixed eventGetMoney(object who, int amount, string curr) {
mixed direct_get_wrd_wrd_from_obj(string amt, string curr) {
int GetPileAmount() { return PileAmount; }
string GetPileType() { return PileType; }
mixed direct_get_wrd_wrd_out_of_obj(string num, string curr) {
","/secure/sefun/distinct_array.c":"mixed array distinct_array(mixed array arr) {
","/lib/props/poisoning.c":"","/verbs/common/mail.c":"static void create() {
string GetHelp(string str) {
mixed can_mail_str(string str) {
mixed do_mail() { return do_mail_str(0); }
","/lib/events/buy.c":"mixed CanSell(object who, string what) {
int direct_buy_str_from_liv(string str) {
","/lib/events/bait_with.c":"mixed eventBait(object who, object pole) {
mixed indirect_bait_obj_with_obj() {
int GetBaitStrength() {
int SetBaitStrength(int x) {
","/lib/events/read.c":"mixed GetLanguage(){
varargs mixed eventRead(object who, string str) {
mixed direct_read_obj() {
int SetLanguage(string str){
varargs mixed SetDefaultRead(mixed arg1, mixed desc) {
string GetRead(string str) {
string array GetReads() {
mapping RemoveRead(string item) {
void SetReads(mapping ReadMap){
mixed direct_read_str_word_obj(string str) {
","/verbs/common/yell.c":"static void create() {
string GetHelp(string str) {
mixed can_yell_in_wrd_str(string lang, string str) {
mixed can_yell_str(string str) {
mixed do_yell() { return 1; }
mixed do_yell_str(string str) {
mixed do_yell_in_wrd_str(string lang, string str) {
","/lib/user/autosave.c":"nomask int restore_player(string nom) {
int Setup() {
static void heart_beat() {
nomask void restore_inventory();
nomask void save_player(string nom);
","/lib/creator.c":"int inventory_visible() { return 1; }
static int Destruct() {
string GetName() {
mixed direct_look_obj() { return 1; }
varargs string GetLong(string str) {
mixed direct_look_at_obj() { return 1; }
varargs int eventShow(object who, string str, string on_id) {
static void create() {
int Setup() {
static void net_dead() {
void eventReconnect() {
int eventForce(string cmd) {
int inventory_accessible() { return 1; }
void eventDescribeEnvironment(int verbose) {
int CanCarry(int amount) { return 1; }
int is_living() { return 1; }
mixed direct_verb_rule(string verb) {
mixed direct_give_liv_obs() {
mixed indirect_give_obs_to_liv(object array item) {
mixed indirect_give_obj_to_liv(object item) {
mixed direct_marry_liv_to_liv() {
mixed direct_give_liv_obj() {
mixed indirect_marry_liv_to_liv() {
int GetCreatorBirth() { return CreatorBirth; }
int GetCreatorAge() {
","/secure/sefun/wild_card.c":"varargs string array wild_card(string str) {
nomask int remove_dots(string str) { return !(str[0] == '.'); }
","/verbs/creators/add.c":"static void create() {
mixed do_add_obj_to_obj(object ob, object ob2) {
mixed can_add_obj_to_obj(string one, string two){
mixed can_add_obj_to_here(string one) { return 1; }
mixed can_add_obj_to_room(string one) { return 1; }
mixed do_add_obj_to_here(object ob){
mixed do_add_obj_to_room(object ob){
","/lib/events/poison.c":"mixed direct_poison_obj_with_obj() {
mixed CanPoison(object who) {
mixed eventPoison(object who, object agent, int strength) {
int SetPoison(int x) {
string array GetSave() {
int AddPoison(int x) {
int GetPoison() {
","/lib/body.c":"mixed eventFall() {
void NewBody(string race) {
string GetName() { return 0; }
varargs int eventReceiveDamage(object agent, int type, int x, int internal,
void eventCompleteHeal(int x) {
static void heart_beat() {
varargs int GetHealthPoints(string limb) {
string GetRace() { return 0; }
static void create() {
varargs int eventDie(mixed agent) {
string GetLong(string nom) {
string GetCapName() { return 0; }
int SetMelee(int i) { melee = i; return melee; }
int GetSleeping() { return Sleeping; }
varargs int eventHealDamage(int x, int internal, mixed limbs) {
int SetMass(int i){
int GetMass(){
int AddExperiencePoints(mixed x) {
int GetMelee() { return melee; }
int HealLimb(string limb){
mixed CanManipulate(){
string GetResistance(int type) { return \"none\"; }
int GetHeartRate() {
int GetHealRate() {
varargs string array GetMissingLimbs(int not_default) {
string array GetEquippedLimbs(){
int DestLimb(string limb) {
string GetMissingLimbParent(string limb) { return MissingLimbs[limb][\"parent\"]; }
string array GetMissingLimbParents(string limb) {
varargs mixed eventBuy(mixed arg1, mixed arg2, mixed arg3){
int GetEncumbrance(){
string SetBodyComposition(string str){
string GetBodyComposition(){
int GetPacifist(){
int SetPacifist(int i){
int SetCanBite(int i){
int GetCanBite(){
void eventReconnect() {
string array GetExtraChannels(){
string array AddExtraChannels(string array chans){
string array RemoveExtraChannels(string array chans){
int CanFly(){
void eventCheckHealing() {
int eventCheckProtection(object agent, int type, int damage) {
mixed eventReceiveThrow(object who, object what) {
int eventRemoveItem(object ob) {
int eventWear(object ob, mixed limbs) {
mixed CanWear(object ob, string array limbs) {
varargs int AddLimb(string limb, string parent, int classes, int array armors) {
varargs int RestoreLimb(string limb, int recurse) {
int RemoveLimb(string limb, object agent) {
string GetLimbParent(string limb) { return Limbs[limb][\"parent\"]; }
string GetRandomLimb(string targ) {
string GetTorso() {
string array GetLimbs() {
int GetLimbClass(string limb) { return Limbs[limb][\"class\"]; }
int eventCompareLimbs(string limb1, string limb2){
int AddLead(string ammo,int number){
int GetLead(string ammo){
int GetExperiencePoints() { return ExperiencePoints; }
int AddQuestPoints(mixed x) {
int GetQuestPoints() { return QuestPoints; }
string GetHealthShort() {
mixed SetProtect(function f) { return (Protect = f); }
function GetProtect() { return Protect; }
int GetHeartModifier() {
varargs int AddHeartModifier(int x, int t) {
int AddHP(int hp){
string GetAffectLong(object ob){
int GetDeathEvents(){
int SetDeathEvents(int i){
string array SetExtraChannels(string array chans){
mixed direct_turn_liv() {
void ParseHook(string str){
mixed CanRemoveItem(object ob) { return 1; }
private void checkCollapse() {
int eventCollapse() {
string array GetLimbChildren(string limb) {
string array GetWieldingLimbs() {
varargs int AddFingers(string limb, int x) {
int GetFingers(string limb) {
varargs object array GetWorn(string limb) {
varargs mixed GetWielded(string limb) {
varargs static int AddHealthPoints(int x, string limb, object agent) {
varargs int GetMaxHealthPoints(string limb) { return 0; }
int AddMagicPoints(int x) {
int GetMagicPoints() { return MagicPoints; }
int GetMaxMagicPoints() { return 0; }
float AddStaminaPoints(mixed x) {
int GetStaminaPoints() { return to_int(StaminaPoints); }
float GetMaxStaminaPoints() {  return 0; }
int AddMagicProtection(class MagicProtection cl) {
int RemoveMagicProtection(int i) {
int SetSleeping(int x) { return (Sleeping = x); }
int AddAlcohol(int x) { return (Alcohol += x); }
int GetAlcohol() { return Alcohol; }
int AddCaffeine(int x) { return (Caffeine += x); }
int GetCaffeine() { return Caffeine; }
int AddFood(int x) { return (Food += x); }
int GetFood() { return Food; }
int AddDrink(int x) { return (Drink += x); }
int GetDrink() { return Drink; }
int AddPoison(int x) {
int GetPoison() { return Poison; }
int GetDying() { return Dying; }
int SetSize(int i){
int SetBodyType(int i){
int GetBodyType(){
int GetRespiration(){
int GetSize(){
int SetRespiration(int i){
","/secure/sefun/values.c":"int round(string f){
mixed convert_value(string val) {
","/verbs/items/fill.c":"static void create() {
mixed can_fill_obj_from_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_fill_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_fill_obj_from_obj(object to, object from) {
mixed do_fill_obj_with_obj(object to, object from) {
","/secure/sefun/load_object.c":"object load_object(string str) {
int update(string file){
","/lib/events/fly.c":"mixed direct_fly_into_str(string str) {
mixed direct_fly_str(string str) {
","/verbs/items/press.c":"static void create() {
mixed do_press_obj(object target) {
varargs mixed do_press_str_on_obj(string thing, object target) {
mixed can_press_str_on_obj() {
mixed can_press_obj() {
","/secure/lib/bboard.c":"void create() {
string GetExternalDesc() {
void init() {
int cmd_remove(string str) {
void continue_post(string subj, string file) {
static private int valid_edit(string author) {
int cmd_post(string str) {
static void begin_post(string cmd, string subj, string file, function f) {
void end_post(string subj, string mail) {
int cmd_read(string str) {
int cmd_followup_and_respond(string str) {
void continue_followup(mapping post, string subj, string file) {
void continue_mail(mapping post, string subj, string file) {
static void check_include_text(string ans, string subj, string file, mapping
int cmd_edit(string str) {
void end_edit(string subj, int num) {
void set_board_id(string str) { __BoardID = str; }
string query_board_id() { return __BoardID; }
string query_board_time(int x) {
","/lib/props/clean.c":"int eventDestruct() {
int GetNoClean() {
static int SetNoClean(int x) {
int clean_up(int ref_exists) {
","/secure/sefun/get_livings.c":"varargs object array get_livings(object ob,int foo){
varargs object get_random_living(object room, int foo){
","/lib/bot.c":"static void create() {
varargs int eventDie(object agent) {
string GetLong(string nom) {
","/secure/sefun/legacy.c":"mixed seteuid(mixed args){
mixed getuid(mixed args){
mixed geteuid(mixed args){
void add(mixed arg1, mixed arg2){
varargs mixed dump_variable(mixed foo, mixed bar){
string day(){
int date(){
string month(){
int year(){
varargs int minutes(int x){
varargs string season(int x){
string query_time(){
varargs int hour(int x){
void personal_log(string str){
void add_sky_event(function f){
mixed set_verbs(string array args){
","/verbs/items/equate.c":"static void create() {
mixed do_judge_obj_to_obj(object obj1, object obj2) {
int eventJudge(object caster, object obj1, object obj2, int level) {
mixed can_judge_obj_to_obj() {
","/lib/spell.c":"static void create() {
static string SetVerb(string verb) {
static int SetMorality(int x) {
varargs int eventCast(object who, int level, mixed limb, object array targets) {
varargs int CanCast(object who, int level, string limb, object array targets) {
string GetVerb() {
string GetSpell() {
int GetMorality() {
varargs static string array SetRules(mixed args...) {
string GetErrorMessage() {
varargs string array GetMessage(int damage, int healing) {
string array GetSkills() {
string array GetRules() {
static int CanAttack(object who, object array enemies, int power) {
int GetRequiredMagic() {
int GetRequiredStamina() {
varargs mixed eventParse(object who, mixed array args...) {
varargs object array GetTargets(object who, mixed args...) {
int GetAutoHeal() {
int GetSpellType() {
int GetRequiredSkill(string skill) {
int GetDamage() {
int GetDamageType() {
static mapping SetSkills(mapping mp) {
int GetAutoDamage() {
static int SetAutoDamage(int x) {
static int SetAutoHeal(int x) {
string GetConjure() {
static string SetConjure(string str) {
varargs static void SetDamage(int type, mixed array rest...) {
int GetDifficulty() {
static int SetDifficulty(int x) {
int GetHealing() {
static varargs int array SetHealing(mixed args...) {
int GetMagicCost() {
static varargs int array SetMagicCost(mixed args...) {
static mixed array SetMessages(mixed array messages) {
string array GetReligions() {
varargs static string array SetReligions(string array religions...) {
int GetRemoteTargets() {
static int SetRemoteTargets(int x) {
static int SetRequiredMagic(int x) {
static int SetRequiredStamina(int x) {
static string SetSpell(string str) {
static int SetSpellType(int x) {
int GetStaminaCost() {
static varargs int array SetStaminaCost(mixed args...) {
static int SetTrainingModifier(int modifier) {
int GetTrainingModifier() {
","/lib/torch.c":"static void create() {
string GetShort() {
varargs string GetLong(string unused) {
int GetRadiantLight(int ambient) {
int direct_pray_for_str_for_obj() { return 1; }
","/spells/cure.c":"static void create() {
int eventCast(object who, int level, mixed limbs, object array targets) {
","/lib/clerk.c":"void create(){
int eventRequest(mixed arg1, mixed arg2, mixed arg3);
mixed performMarriage(object spouse1, object spouse2) ;
int eventRequestDivorce(mixed arg1, mixed arg2, mixed arg3);
int performDivorce(object ob1);
","/spells/fireball.c":"static void create() {
","/lib/persist.c":"int eventLoadObject(mixed val, int recurse) {
static int eventConvertObject(mixed val, int recurse) {
static mixed array AddSave(mixed array vars) { return (Saved += vars); }
string GetSaveString() {
static int SetSaveRecurse(int flag) { return (SaveRecurse = flag); }
int SetRetain(int i){
int GetRetain(){
","/lib/props/getlivings.c":"","/lib/mount.c":"mixed direct_dismount_from_liv(){
mixed direct_ride_word_str(){
int GetMount(){ return Mount; }
mixed direct_mount_liv(){
mixed direct_dismount_liv(){
int eventRide(string direction){
int SetMount(int x) {
mixed eventMount(object who){
mixed eventDismount(object who){
mixed direct_ride_str(){
","/lib/living.c":"int GetMaxCarry() { return combat::GetMaxCarry(); }
int AddCarriedMass(int x) { return carry::AddCarriedMass(x); }
int CanCarry(int amount) { return carry::CanCarry(amount); }
int GetCarriedMass() {
int inventory_visible() { return 1; }
static void create() {
mixed direct_dismount_from_liv(){
mixed direct_ride_word_str(){
int GetMount() { return Mount; }
int inventory_accessible() { return 1; }
mixed direct_mount_liv(){
mixed direct_dismount_liv(){
int SetMount(int x) { return (Mount = x); }
mixed direct_ride_str(){
int is_living() { return 1; }
int eventFollow(object dest, int followChance) {
varargs mixed eventShow(object who, string str, string on_id) {
varargs int GetMaxHealthPoints(string limb){
int SetDead(int i){
int direct_follow_liv() { return 1; }
int direct_lead_liv() { return 1; }
int direct_evade_liv() { return 1; }
mixed direct_smell_obj(object ob, string id) {
mixed indirect_look_at_obj_word_obj() {
varargs mixed CanReceiveHealing(object who, string limb);
mixed direct_verb_rule(string verb) {
mixed direct_attack_liv() {
mixed direct_attack_only_liv(){
mixed direct_attack_liv_only(){
mixed direct_target_liv(){
int direct_backlash_for_liv_against_wrd() { return CanReceiveMagic(0, \"backlash\"); }
mixed direct_target_only_liv(){
mixed direct_target_liv_only(){
mixed direct_capture_liv_word_obj() {
mixed direct_pray_for_str_against_str_for_liv() {
mixed direct_cast_str_on_obj() {
mixed direct_cast_str_against_str() {
mixed direct_cast_str_on_str_of_obj() {
mixed direct_free_liv_from_obj() {
mixed direct_resurrect_obj() { return 1; }
mixed indirect_resurrect_obj() { return 1; }
mixed direct_get_obj() {
mixed direct_get_obj_from_obj() {
mixed direct_give_liv_obs() {
mixed indirect_give_obs_to_liv(object array items) {
mixed direct_look_obj() { return 1; }
mixed direct_backstab_liv() {
mixed direct_heal_str_of_liv(string limb) {
mixed indirect_give_obj_to_liv(object item) {
int direct_shock_liv() { return CanReceiveMagic(1, \"shock\"); }
int direct_palm_liv() { return CanReceiveMagic(1, \"palm\"); }
int direct_immolate_liv() { return CanReceiveMagic(1, \"immolate\"); }
int direct_gale_liv() { return CanReceiveMagic(1, \"gale\"); }
int direct_aura_liv() { return CanReceiveMagic(0, \"aura\"); }
int direct_soulseek_liv() { return CanReceiveMagic(0, \"soulseek\"); }
int direct_cloak_wrd() { return CanReceiveMagic(0, \"cloak\"); }
int direct_stealth_wrd() { return CanReceiveMagic(0, \"stealth\"); }
int direct_balance_obj_to_obj() { return CanReceiveMagic(0, \"balance\"); }
int direct_buffer_liv() { return CanReceiveMagic(0, \"buffer\"); }
int direct_calm_liv() { return CanReceiveMagic(0, \"calm\"); }
int direct_cleanse_liv() { return CanReceiveMagic(0, \"cleanse\"); }
int direct_convert_liv() { return CanReceiveMagic(0, \"convert\"); }
int direct_shield_liv() { return CanReceiveMagic(0, \"shield\"); }
int direct_veil_liv_against_wrd_wrd() { return CanReceiveMagic(0, \"veil\"); }
int direct_ward_liv_against_wrd() { return CanReceiveMagic(0, \"ward\"); }
int direct_remedy_liv() { return CanReceiveMagic(0, \"remedy\"); }
int direct_command_str_to_str() { return CanReceiveMagic(0, \"command\"); }
int direct_gaze() { return CanReceiveMagic(0, \"gaze\"); }
int direct_send_str_to_str() { return CanReceiveMagic(0, \"send\"); }
int direct_connect_str() { return CanReceiveMagic(0, \"connect\"); }
int direct_heal_liv() { return CanReceiveMagic(0, \"heal\"); }
int direct_mend_liv() { return CanReceiveMagic(0, \"mend\"); }
int direct_refresh_liv() { return CanReceiveMagic(0, \"refresh\"); }
int direct_rejuvinate_liv() { return CanReceiveMagic(0, \"rejuvinate\"); }
int direct_farsight_liv() { return 1; }
int direct_bump_liv() { return 1; }
int direct_marry_liv_to_liv() { return 1; }
int direct_party_wrd_liv() { return 1; }
int direct_challenge_liv() { return 1; }
int direct_ignore_liv() { return 1; }
mixed direct_give_liv_wrd_wrd(object targ, string num, string curr) {
varargs mixed eventSteal(object who, mixed what, object target, int skill) {
int GetNonCurrencyMass(){
mixed direct_remedy_str_of_liv(string limb) {
mixed direct_regen_str_on_liv(string limb) {
mixed direct_teleport_to_liv() {
mixed direct_portal_to_liv() {
mixed direct_resurrect_liv() {
mixed direct_scry_liv() {
mixed indirect_zap_liv() { return 1; }
mixed indirect_pulsecheck_liv() { return 1; }
int direct_rockwhip_liv() { return CanReceiveMagic(1, \"rockwhip\"); }
int direct_acidspray_liv() { return CanReceiveMagic(1, \"acidspray\"); }
int direct_annihilate_at_liv() { return CanReceiveMagic(1, \"annihilate\"); }
int direct_annihilate_liv() { return CanReceiveMagic(1, \"annihilate\"); }
int direct_arrow_liv() { return CanReceiveMagic(1, \"arrow\"); }
int direct_arrow_at_liv() { return CanReceiveMagic(1, \"arrow\"); }
int direct_blades_at_liv() { return CanReceiveMagic(1, \"blades\"); }
int direct_blades_liv() { return CanReceiveMagic(1, \"blades\"); }
int direct_corrupt_liv() { return CanReceiveMagic(1, \"currupt\"); }
int direct_demonclaw_liv() { return CanReceiveMagic(1, \"demonclaw\"); }
int direct_dispel_liv() { return CanReceiveMagic(1, \"dispel\"); }
int direct_drain_at_liv() { return CanReceiveMagic(1, \"drain\"); }
int direct_drain_liv() { return CanReceiveMagic(1, \"drain\"); }
int direct_fireball_at_liv() { return CanReceiveMagic(1, \"fireball\"); }
int direct_fireball_liv() { return CanReceiveMagic(1, \"fireball\"); }
int direct_frigidus_at_liv() { return CanReceiveMagic(1, \"frigidus\"); }
int direct_frigidus_liv() { return CanReceiveMagic(1, \"frigidus\"); }
int direct_holylight_liv() { return CanReceiveMagic(1, \"holylight\"); }
int direct_missile_liv() { return CanReceiveMagic(1, \"missile\"); }
int direct_missile_at_liv() { return CanReceiveMagic(1, \"missile\"); }
varargs mixed CanCastMagic(int hostile, string spell) {
mixed direct_bite_liv() {
mixed direct_give_liv_obj() {
mixed direct_give_wrd_wrd_to_liv(string num, string curr) {
mixed direct_steal_wrd_from_liv(string wrd) {
mixed indirect_steal_obj_from_liv(object item, mixed args...) {
int SetPK(int x) { return (isPK = x); }
int GetPK() { return isPK; }
int indirect_throw_obj_at_obj() { return 1; }
int indirect_toss_obj_at_obj() { return 1; }
int indirect_buy_str_from_liv() { return 1; }
int indirect_sell_obj_to_liv() { return 1; }
int indirect_marry_liv_to_liv() { return 1; }
mixed eventCure(object who, int amount, string type) {
mixed eventInfect(object germ) {
","/secure/sefun/messaging.c":"string create_message(int pov, string array verb, string message,
void send_messages(mixed verb, string message, object subject, mixed targets,
","/verbs/common/speak.c":"static void create() {
string GetHelp(string str) {
mixed can_speak_str(string str) {
mixed can_speak_in_wrd_str(string lang, string str) {
mixed do_speak() { return 1; }
mixed do_speak_in_wrd(string str) {
mixed do_speak_str(string str) {
mixed do_speak_in_wrd_str(string lang, string str) {
","/secure/sefun/mappings.c":"string flat_map(mapping mp) {
int mgrepp(string primary, string array sub){
mixed mapping_member(mapping Map, string sub){
varargs mapping add_maps(mapping FirstMapping,mapping  SecondMapping, int preference){
","/secure/sefun/wipe_inv.c":"int wipe_inv(mixed dude){
","/verbs/players/dismount.c":"static void create() {
mixed can_dismount_liv() {
mixed do_dismount_liv(object ob) {
mixed can_dismount_from_liv() {
mixed do_dismount_from_liv(object ob) {
","/lib/events/crawl.c":"mixed direct_crawl_str(string str) {
mixed direct_crawl_into_str(string str) {
","/lib/events/drink.c":"varargs mixed CanDrink(object who, string substance) {
mixed direct_drink_obj() {
varargs mixed eventDrink(object who, string substance) {
mixed direct_drink_str_from_obj(string str) {
mixed direct_drink_from_obj() {
","/secure/sefun/get_cmds.c":"string array get_cmds(){
","/lib/events/shake.c":"varargs mixed eventShake(object who, string component) {
mixed direct_shake_obj(object target) {
mixed direct_shake_str_on_obj(string str, object target) {
string array GetShakes() {
mapping RemoveShake(string item) {
varargs mapping SetShake(mixed key, mixed desc) {
varargs mixed CanShake(object who, string component) {
","/lib/lamp.c":"string GetShort() {
static void create() {
varargs string GetLong(string unused) {
int GetRadiantLight(int ambient) {
varargs mixed eventLight(object who, object tool) {
mixed direct_light_obj() {
mixed eventDarken() {
static void heart_beat() {
int GetBurnRate() {
static int SetBurnRate(int x) {
","/lib/events/close.c":"int inventory_visible() {
mixed direct_open_obj_with_obj(object target, object tool) {
int GetClosed() {
string array GetSave() {
int inventory_accessible() {
varargs mixed eventOpen(object who, object tool) {
int SetOpen(int x) {
mixed direct_close_obj(object target) {
int GetOpen(){
int SetClosed(int x) {
varargs mixed CanOpen(object who, object tool) {
mixed eventClose(object who) {
mixed CanClose(object who) {
","/verbs/players/cast.c":"static void create() {
mixed do_cast_str_against_str(string spell, object target) {
mixed can_cast_str_on_obj(string spell) {
mixed can_cast_str_on_str(string spell) {
mixed can_cast_str_against_str(string spell) {
mixed can_cast_str_on_str_of_str(string spell) {
mixed do_cast_str_on_obj(string spell, object target) {
mixed do_cast_str_on_str(string spell, string limb) {
mixed do_cast_str_on_str_of_obj(string spell, string limb, object target) {
","/verbs/creators/copy.c":"static void create() {
mixed do_copy_obj_str(object ob, string str) {
mixed do_copy_str(string str) {
mixed can_copy_obj_str(object ob, string str) { return 1; }
mixed can_copy_str(string str) { return 1; }
","/lib/combatmsg.c":"static mixed GetMissData(object targ, int type, string limb) {
mixed GetCombatVerbs(string type, int damage) {
mixed GetCombatMove(string type, int skill) {
static void eventSendMissMessages(object target, int x, string limb) {
","/secure/sefun/log_file.c":"void log_file(string fl, string msg) {
","/lib/follow.c":"object SetLeader(object leader) {
object GetLeader() { return Leader; }
varargs mixed CanFollow(object ob) {
static void create() { Leader = 0; }
int IsFollowing(object ob) {
mixed direct_follow_liv() {
int eventFollow(object dest, int followChance) { return 0; }
","/lib/npc.c":"static void create() {
int eventDestruct() {
void eventReconnect() { }
static int cmdAll(string arg) {
string GetCommandFail() { return \"What?\"; }
string GetShort() { return object::GetShort(); }
int GetRadiantLight(int ambient) {
int CanReceive(object ob) { return CanCarry((int)ob->GetMass()); }
int eventReceiveObject() {
int eventReleaseObject() {
int AddCarriedMass(int x) { return living::AddCarriedMass(x); }
int eventMove(mixed dest) {
varargs int eventPrint(string msg, mixed arg2, mixed arg3) {
string GetName() { return object::GetName(); }
mixed eventTurn(object who) {
static void heart_beat() {
string SetKeyName(string nom) {
static void init() {
void receive_message(string cl, string msg) {
varargs int eventDie(mixed agent) {
mixed GetCombatAction() { return CombatAction; }
mixed array GetCommands() { return commands(); }
int SetUnique(int x) {
int GetUnique() { return Unique; }
string array GetEnemyNames() { return EnemyNames; }
int GetLevel() { return Level; }
string SetClass(string cls) {
int SetLevel(int x) {
int SetHealthPoints(int x) {
int SetMaxHealthPoints(int x) {
int SetMagicPoints(int x) {
float SetStaminaPoints(float x) {
float SetMaxStaminaPoints(float x) {
varargs void SetCurrency(mixed val, int amount) {
mixed SetEncounter(mixed val) { return (Encounter = val); }
string array AddEncounter(string nom) {
string array RemoveEncounter(string nom) {
mixed GetEncounter() { return Encounter; }
mixed SetDie(mixed val) { return (Die = val); }
mixed GetDie() { return Die; }
varargs string GetLong(string str) {
void SetAction(int chance, mixed val) {
mixed GetAction() { return Action; }
void SetCombatAction(int chance, mixed val) {
string GetCapName() { return object::GetCapName(); }
int eventCompleteMove(mixed dest) {
varargs int eventMoveLiving(mixed dest, string omsg, string imsg) {
void eventEnemyDied(object ob) {
varargs int eventShow(object who, string str) {
static int ContinueHeart() {
mapping SetInventory(mapping mp ) { return (Inventory = mp); }
varargs string SetRace(string race, mixed extra) {
varargs int GetMaxHealthPoints(string limb){
int array GetScreen() { return ({ 80, 24 }); }
int AddEnemy(object ob) {
int SetMaxMagicPoints(int x) {
mixed SetAggressive(mixed val){
int GetAutoStand(){ return AutoStand; }
mixed CanGet(object who) { return GetName() + \" is a living being!\"; }
mapping GetInventory() { return copy(Inventory); }
void eventDescribeEnvironment(int brief) {
int SetCustomXP(int i){
void CheckEncounter(){
int SetAutoStand(int i){
int eventExtraAction(){ return 1; }
int GetCustomXP(){
","/secure/sefun/compare_array.c":"int compare_array(mixed array arr1, mixed array arr2){
int arrcmp(mixed array arr1, mixed array arr2){
","/secure/sefun/dump_socket_status.c":"string dump_socket_status() {
","/verbs/creators/zap.c":"static void create() {
mixed do_zap_liv(object ob){
mixed do_zap_lvs(object array obs) {
mixed can_zap_liv(string str) {
","/lib/command.c":"static int cmdAll(string args) {
int eventForce(string cmd) {
int Setup() {
string array AddSearchPath(mixed val) {
string array RemoveSearchPath(mixed val) {
string array GetSearchPath() { return SearchPath; }
string GetClient() { return 0; }
string GetCommandFail() { return CommandFail; }
int direct_force_liv_str() { return 1; }
int direct_force_liv_to_str() { return 1; }
static void create() {
int GetForced() { return Forced; }
int cmdDebugAll(string args) {
string array GetCommandHist(){
int GetMaxCommandHistSize(){
int SetMaxCommandHistSize(int i){
int SetPlayerPaused(int i){
int GetPlayerPaused(){
static string process_input(string cmd) {
string GetLastCommand(){
int eventRetryCommand(string lastcmd){
string SetCommandFail(string str) {
","/lib/events/bury.c":"mixed direct_bury_obj_with_obj() {
","/secure/lib/net/http.c":"int eventRead(buffer data) {
private static void eventError(string name) {
private static mixed eventGetFile(string name) {
","/verbs/creators/resurrect.c":"static void create() {
mixed do_resurrect_obj(object ob) {
mixed can_resurrect_obj(string str) {
","/spells/globo.c":"static void create()
int eventCast(object who, int level, mixed limbs, object array targets)
int hitCallback(object who, object agent, int x, class MagicProtection cl)
void endCallback(object who)
","/lib/props/ambiance.c":"int GetAmbientLight() {
static int SetAmbientLight(int x) {
","/secure/lib/net/server.c":"int eventDestruct() {
varargs static void create(int port, int type, string socket_obj) {
static void eventSocketError(string msg, int code) {
static int eventClose(mixed sock) {
int eventShutdown() {
static int SetSocketType(int x ) {
static int SetDestructOnClose(int x) {
int eventCreateSocket(int port) {
varargs int eventWrite(object owner, mixed val, int close) {
int GetSocketType() {
static void eventNewConnection(object socket) {
static void eventServerListenCallback(int fd) {
static void eventServerAbortCallback(int fd) {
static void eventServerWriteCallback(int fd) {
static void eventServerReadCallback(int fd, mixed val) {
int GetDestructOnClose() {
","/secure/sefun/light.c":"varargs int effective_light(object ob) {
varargs int total_light(object ob) {
varargs int visibility(object ob) {
mixed check_light(object who) {
","/lib/mayor.c":"static void create() {
static string SetLocalCurrency(string str) {
static void EvaluateCitizenshipRequest();
string GetLocalCurrency() {
mixed eventRequestCitizenship(object who) {
mixed CanRequestCitizenship(object who) {
int GetTax() {
static int SetTax(int x) {
","/secure/lib/net/client.c":"int eventDestruct() {
static void eventSocketError(string str, int x) {
static void eventReadCallback(int fd, mixed val) {
function SetRead(function f) { return (Read = f); }
static void eventClose(class client sock) {
static void eventSocketClose() { }
int SetSocketType(int type) { return (SocketType = type); }
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
static void eventWriteCallback(int fd) {
","/verbs/items/read.c":"static void create() {
mixed can_read_obj() {
mixed do_read_obj(object ob) {
mixed do_read_str_on_obj(string str, object ob) {
mixed do_read_str_in_obj(string str, object ob) {
mixed do_read_str_of_obj(string str, object ob) {
mixed do_read_str_from_obj(string str, object ob) {
mixed can_read_str_word_obj() {
","/verbs/creators/echo.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_echo() {
mixed can_echo_to_liv_str(object ob, string str) {
mixed do_echo() { return 1; }
mixed do_echo_to_liv_str(object who, string what) {
mixed do_echo_str(string str) {
void eventEcho(object array targs, string str) {
mixed can_echo_str(string str) {
","/lib/stargate.c":"void create(){
void init(){
string status(){
int eventEnter(object who){
void eventConnect(string destination){
string displayShort();
string displayLong();
mixed cmdDial(string s){
int cmdEnter(string what){
void SetOrigin(string o, string d){
string GetOrigin(){
int eventDisconnect(){
","/secure/sefun/query_invis.c":"varargs int query_invis(object lookee, object looker) {
","/lib/clan.c":"string SetLeader(string str) {
string GetLeader() { return Clan->leader; }
static void create() {
static void init() {
string GetAffectLong(object ob) {
string SetClanObject(string str) {
string GetClanSkill() { return Clan->skill; }
int eventBring(string str) {
int eventInitiate(string str) {
void eventJoin(object ob) {
int eventRetire(string str) {
void eventUnjoin(object ob) {
void eventWelcome(object ob) {
mixed CanJoin(object ob) { return 1; }
string SetClanName(string str) {
string GetClanName() { return Clan->name; }
string GetClanObject() { return Clan->objectName; }
string SetClanSkill(string str) {
","/secure/lib/net/ftp.c":"void Destruct(){
static void create(int fd, object owner){
private void eventReadFtpData(mixed text){
nomask static int check_privs(string file, string oper) {
string GetKeyName(){ return Session->user; }
string RetrieveCmdCallback(object ob){
private string find_flags(string arg){
private string strip_flags(string arg){
string FindPrevDir( string path ) {
private void eventCmdPswd(string arg){
private void eventCmdDele(string arg){
private void eventCmdRnfr(string arg) {
private void eventCmdRnto(string arg) {
private void eventCmdStou(string arg){
private void eventCmdSyst(string arg) {
private void eventCmdCwd(string arg){
private void eventCmdMkd(string arg){
void eventCmdPwd(string arg){
private void eventCmdRmd(string arg) {
private void idle_time_out(){
void StartService(){
private void do_list( string arg, int ltype){
private void eventCmdUser(string arg){
private void eventCmdRetr(string arg){
private void eventCmdStor(string arg){
private void eventCmdNlst(string arg){
private void eventCmdList(string arg){
private void eventCmdCdup(string arg){ eventCmdCwd(\"..\"); }
private void eventCmdQuit(string arg){
private void eventCmdType(string arg){
private void eventCmdPort(string arg){
void eventCmdNoop(string arg){
private void eventDestructDataPipe(mixed f){
string GetUniqueFileName(string arg){
private string GetFtpWelcomeMsg(){
","/secure/sefun/this_agent.c":"varargs object this_agent(mixed val) {
","/lib/events/turn.c":"int eventTurnOn(object ob){
int eventTurnOff(object ob){
int direct_turn_obj(object target) {
mixed CanTurn(object who) {
mixed CanTurnOn(object who) {
mixed CanTurnOff(object who) {
int direct_turn_on_obj(object target){
int direct_turn_off_obj(object target){
","/verbs/items/shake.c":"static void create() {
mixed do_shake_obj(object target) {
mixed can_shake_obj() {
mixed can_shake_str_on_obj() {
varargs mixed do_shake_str_on_obj(string thing, object target) {
","/verbs/players/crawl.c":"static void create() {
mixed do_crawl_into_str(string str) {
mixed can_crawl_into_str(string str) {
mixed can_crawl_str(string str) {
mixed do_crawl_str(string str) {
","/verbs/items/listen.c":"static void create() {
mixed can_listen() {
mixed can_listen_obj() {
mixed can_listen_to_obj() {
mixed can_listen_to_str_word_obj() {
mixed do_listen() {
mixed do_listen_obj(object ob) {
mixed do_listen_to_obj(object ob) {
mixed do_listen_to_str_word_obj(string str, object ob) {
","/lib/light.c":"static void create() {
string GetShort() {
varargs mixed eventLight(object who, object tool) {
int GetLit() {
static int SetLit(int x) {
mixed CanLight(object who) {
mixed direct_light_obj() {
mixed eventDarken() {
","/secure/sefun/pointers.c":"varargs int wizardp(object ob){
int adminp(object ob){
int ambassadorp(object ob) {
int archp(object ob) {
varargs int creatorp(object ob) {
int hiddenp(object ob) {
int high_mortalp(object ob) {
int leaderp(object ob) {
varargs int newbiep(object ob) {
varargs int playerp(object ob) {
int imud_privp(mixed guy) {
int securep(mixed guy) {
int assistp(mixed guy) {
int elderp(object ob) {
int testp(object ob) {
int councilp(object ob) {
int avatarp(object ob) {
","/lib/shop.c":"static void create() {
void init() {
int list(string str) {
int show(string str) {
int price(string str) {
int appraise(string str) {
","/secure/sefun/findobs.c":"mixed array findobs(mixed arg){
mixed find_inheritors(mixed arg){
mixed find_deep_inheritors(mixed arg){
","/verbs/items/close.c":"static void create() {
mixed can_close_obj(string verb) {
varargs mixed do_close_obj(object ob, mixed array args...) {
","/secure/sefun/security.c":"string file_privs(string file) {
int member_group(mixed who, string grp) {
mixed unguarded(function f) { return (mixed)master()->apply_unguarded(f); }
int check_privs(mixed pretender, mixed target){
int domain_admin(mixed pretender, string domain){
","/verbs/items/search.c":"static void create() {
mixed can_search_obj() {
mixed can_search_str_word_obj() {
mixed do_search_obj(object ob) {
mixed do_search_str_word_obj(string str, object ob) {
","/lib/events/shoot.c":"int CanShoot(object shooter, string target){
int MustCarry(int i){
int MustWield(int i){
int eventShoot(mixed shooter, mixed target){
int indirect_shoot_wrd_with_wrd(mixed shooter,mixed target){
int direct_shoot_obj_at_str(object shooter, string target){
","/verbs/items/shoot.c":"static void create() {
mixed can_shoot_wrd_with_wrd(mixed target,mixed shooter) {
mixed can_shoot_obj_at_str(object shooter, string target) {
varargs mixed do_shoot_obj_at_str(object shooter, string target) {
varargs mixed do_shoot_wrd_with_wrd(mixed target,mixed shooter) {
","/lib/leader.c":"static void create() {
int eventPreAttack(object ob) {
mixed eventAsk(object who, string str) {
int eventTeachPlayer(object who, string spell);
void eventConvert(object who, string args) {
void eventJoin(object who, string args) {
void eventPreview(object who, string args) {
","/lib/round.c":"void create(){
int SetRifleType(string str) {rifletype=str; return 1; }
int SetMillimeter(int x){ millimeter=x; return 1; }
string GetAmmoType() { return ammotype; }
string GetPistolType() { return pistoltype; }
int GetCaliber() { return caliber; }
int GetMillimeter() { return millimeter; }
int SetAmmoType(string str) {ammotype=str; return 1; }
int SetPistolType(string str) {pistoltype=str; return 1; }
int SetCaliber(int x) { caliber=x; return 1; }
string GetRifleType() { return rifletype; }
","/verbs/players/vote.c":"static void create() {
mixed can_vote_for_str() {
mixed do_vote_for_str( string str ) {
","/verbs/players/nominate.c":"static void create() {
mixed can_nominate_str() {
mixed do_nominate_str( string str ) {
","/secure/sefun/disable.c":"mixed hobbled(object ob){
","/verbs/creators/initfix.c":"static void create() {
mixed can_initfix_obj(string str) {
mixed can_initfix_word(string str) { return can_initfix_obj(\"foo\"); }
mixed do_initfix_obj(object ob) {
mixed do_initfix_word(string wrd) {
","/lib/steal.c":"mixed SetPreventSteal(mixed val) { return (PreventSteal = val); }
static void create() {
mixed direct_steal_obj_from_liv() { return CanSteal(this_player()); }
mixed GetPreventSteal() { return PreventSteal; }
","/secure/sefun/mud_info.c":"string architecture() { return MUDOS_ARCH; }
string mud_name() { return MUD_NAME; }
string mudlib() { return \"Dead Souls\"; }
string mudlib_version() { return \"2.1\"; }
int query_host_port() { return __PORT__; }
string admin_email() { return ADMIN_EMAIL; }
string query_os_type(){
","/secure/sefun/strings.c":"int check_string_length(string str){
int print_long_string(object who, string str){
varargs string arrange_string(string str, int x) {
varargs string center(string str, int x) {
varargs mixed convert_string(string str, int flag) {
string trim(string str) {
varargs string wrap(string str, int x) {
varargs mixed remove_matching_line(string target, string substring, int i, string exclude){
string truncate(string str, int i){
string path_prefix(string str){
varargs string first_string_element(string str, string delimiter, int stripfirst){
string last_string_element(string str, string delimiter){
string replace_line(string file, string array params, string repl){
int memberp(mixed array primary, mixed sub){
int reverse_memberp(string primary, string array sub){
int grepp(string primary, string sub){
varargs mixed replace_matching_line(string target, string substring, string replace, int i, string exclude){
int starts_with_arr(string primary, string array sub){
string reverse_string(string str) {
mixed homedir(object ob){
varargs string generate_tmp(mixed arg){
string newline_trim(string str) {
varargs mixed read_matching_line(string target, string substring, int i, string exclude){
int numericp(mixed arg){
int basic_punctuationp(mixed arg){
string append_line(string file, string array params, string repl){
varargs mixed alpha_crypt(mixed arg1, mixed arg2){
string alpha_strip(mixed arg){
string evaluate_description(mixed val) {
string to_html(string str) {
string space_trim(string str) {
int alphap(mixed arg){
","/lib/comp/weapon.c":"string array GetSave() {
int eventStrike(object target) {
mixed eventEquip(object who, string array limbs) {
mixed CanEquip(object who, string array limbs) {
mixed eventUnequip(object who) {
int GetHands() {
string GetEquippedShort() {
string SetWeaponType(string str) {
mixed direct_wear_obj() {
int eventDeteriorate(int type) {
varargs string GetEquippedDescription(object who) {
int SetHands(int x) {
int GetWielded(){
mixed SetWield(mixed val) {
mixed direct_remove_obj() {
string GetWeaponType() {
","/lib/events/wear.c":"mixed direct_wear_obj() {
mixed direct_remove_obj() {
mixed direct_wear_obj_on_str(object target, string str) {
","/lib/bonus.c":"void create(){
int eventDestruct(){
void init(){
int GetBonusDuration(){
void heart_beat(){
mapping GetSkills(){
mapping GetStats(){
mapping SetSkills(mapping arg){
mapping SetStats(mapping arg){
int SetBonusDuration(int i){
mapping SetPoints(mapping arg){
int SetBonuses();
mapping GetPoints(){
int RemoveBonuses(){
","/lib/std/room.c":"int inventory_visible() {
string GetInternalDesc() {
int CanReceive(object ob){
static void create() {
varargs int CanFly(mixed ob, mixed dir){
object array GetDummyItems() {
varargs void reset(int count) {
void RemoveItem(mixed item) {
void SetItems(mixed items) {
string SetLong(string str) {
string GetLong() {
varargs void AddItem(mixed item, mixed val, mixed adjectives) {
mapping GetItemsMap(){
varargs int eventShow(object who, string args) {
mixed SetProperties(mapping mp) {
mixed SetProperty(string prop, mixed val) {
int GetAmbientLight() {
void RemoveRead(mixed item) {
varargs void SetRead(mixed items, mixed arg) {
float GetGravity() { return Gravity; }
varargs int eventPrint(string msg, mixed arg2, mixed arg3);
static void init() {
mixed indirect_delete_exit_str(){
varargs void RemoveSearch(mixed item) {
varargs mixed eventHearTalk(object who, object target, int cls, string verb,
void heart_beat(){
string GetClimate();
int inventory_accessible() {
mapping QueryMap(string str){
varargs void AddListen(mixed item, mixed val) {
mapping GetSmellMap(){
varargs void RemoveSmell(mixed item) {
int GetResetNumber() {
int GetTerrainType(){
int SetTerrainType(int i){
int AddTerrainType(int i){
int RemoveTerrainType(int i){
function GetBury() {
function SetBury(function what) {
static string GetExtraLong() {
string SetDayLong(string str) { return (DayLong = str); }
string GetDayLong() { return DayLong; }
string SetNightLong(string str) { return (NightLong = str); }
string GetNightLong() { return NightLong; }
string SetClimate(string str) {
float SetGravity(float h) { return (Gravity = h); }
int SetNoReplace(int x) { return (NoReplace = x); }
int GetNoReplace() { return NoReplace; }
int GetPlayerKill() {
int SetPlayerKill(int x) {
int AddPoisonGas(int x) {
int SetPoisonGas(int x) {
void AddRead(mixed item, mixed val) {
static int SetShade(int x) {
varargs void AddSearch(mixed item, mixed val) {
varargs void AddSmell(mixed item, mixed val) {
varargs void AddTouch(mixed item, mixed val) {
mixed eventBuryItem(object who, object tool, object what) {
int SetNoDefaultExits(int i){
int SetDefaultExits(int i){
int SetCanFly(int i){
int SetNoObviousExits(int i){
int GenerateObviousExits(){
int GetNightLight();
int GetDayLight();
int GetShade();
void CheckActions(){
mapping SetActionsMap(mapping ActMap){
mapping GetActionsMap(){
int SetFrequency(int tick){
int GetFrequency(){
varargs void RemoveListen(mixed item) {
varargs void RemoveTouch(mixed item) {
varargs void SetTouch(mixed items, mixed arg) {
int CanAttack( object attacker, object who ) {
varargs void SetListen(mixed items, mixed arg) {
mapping GetListenMap(){
static int SetNightLight(int x) {
static int SetDayLight(int x) {
int GetMedium() {
int eventMove(mixed dest) { return 0; }
string array GetId() { return ({}); }
string SetTown(string town) { return (Town = town); }
string GetTown() { return Town; }
varargs void SetSmell(mixed items, mixed arg) {
varargs mixed GetSearch(string str) {
varargs void SetSearch(mixed items, mixed arg) {
int GetPoisonGas() {
","/secure/sefun/to_object.c":"object to_object(mixed var) {
","/lib/events/manipulate.c":"varargs mixed CanManipulate(object who, string component) {
varargs mixed eventManipulate(object who, string component) {
mapping RemoveManipulate(string item) {
string array GetManipulates() {
varargs mapping SetManipulate(mixed key, mixed desc) {
mixed direct_move_obj(object target) {
mixed direct_move_str_on_obj(string str, object target) {
","/verbs/players/backstab.c":"static void create() {
mixed do_backstab_liv(object ob) {
int eventBackstab(object backstabber, object target) {
int eventPrintDamage(object backstabber, object target, object weapon, int percentDamage) {
mixed can_backstab_liv() {
int eventStab(object backstabber, object target, object weapon) {
","/verbs/rooms/cast.c":"static void create() {
string GetHelp(string str) {
mixed do_cast_obj(object ob) {
mixed can_cast_obj(object ob) {
","/verbs/items/dig.c":"static void create() {
static void eventDig(object who, object tool, object what, object check) {
mixed can_dig_str_with_obj() {
varargs static void eventPrepareDig(object who, object tool, object what) {
mixed can_dig_with_obj() {
mixed do_dig_with_obj(object ob) {
mixed do_dig_str_with_obj(string str, object ob) {
mixed do_dig_obj_with_obj(object what, object ob, string id) {
mixed can_dig_obj_with_obj() {
","/lib/events/pull.c":"varargs mixed eventPull(object who, string component) {
mixed direct_pull_str_on_obj(string str, object target) {
mixed direct_pull_obj(object target) {
string array GetPulls() {
mapping RemovePull(string item) {
varargs mapping SetPull(mixed key, mixed desc) {
varargs mixed CanPull(object who, string component) {
","/secure/sefun/generic.c":"int true(){
int false(){
","/lib/comp/holder.c":"mixed inventory_visible() {
int GetOpacity(){
int SetOpacity(int x){
varargs string GetInternalDesc() {
int CanReceive(object ob) {
int eventReceiveObject(object ob) {
int eventReleaseObject(object ob) {
static void eventLoadInventory() {
static void create() {
int isBag() {
static mixed array AddSave(mixed array vars) {
int SetSaveRecurse(int x) {
","/lib/flashlight.c":"int CanReceive(object ob) {
void create(){
void init(){
int eventTurnOn(object ob){
varargs mixed eventTurnOff(string str){
int eventDie(){
void heart_beat(){
int eventUse(int i){
mixed eventLight(){
mixed eventExtinguish(){
int SetHB(int i){
int GetHB(){
int SetMaxCells(int i){ maxcells = i; return i; }
int GetMaxCells() { return maxcells; }
int SetMinCells(int i){ mincells = i; return i; }
int GetMinCells() { return mincells; }
int eventRadiate(int i);
void SetLightLevel(int i);
string GetCellType() { return celltype; }
int SetDrainRate(int i){
int SetCellType(string str) {celltype=str; return 1; }
int flicker(){
int CheckPower(){
void regetID(){
int GetLightLevel(){
","/verbs/items/light.c":"static void create() {
mixed do_light_obj_with_obj(object target, object source) {
mixed do_light_obs(mixed array targs) {
mixed do_light_obs_with_obj(mixed array targs, object source) {
mixed can_light_obj() {
mixed can_light_obj_with_obj() {
","/lib/post_office.c":"int CanReceive(object ob) {
int eventReleaseObject() {
static void create() {
mixed CanMail(object who, string args) {
mixed eventMail(object who, string args) {
","/verbs/rooms/fly.c":"static void create() {
mixed can_fly_str(string str) {
mixed can_fly_into_str(string str) {
mixed do_fly_str(string str) {
mixed do_fly_into_str(string str) {
","/lib/events/press.c":"varargs mixed eventPress(object who, string component) {
mixed direct_press_str_on_obj(string str, object target) {
string array GetPresses() {
mapping RemovePress(string item) {
varargs mapping SetPress(mixed key, mixed desc) {
varargs mixed CanPress(object who, string component) {
mixed direct_press_obj(object target) {
","/verbs/rooms/climb.c":"static void create() {
mixed do_climb_out_of_obj(object ob) {
mixed can_climb_obj() {
mixed do_climb_obj(object ob) {
mixed can_climb_word_obj() {
mixed do_climb_word_obj(string word, object ob) {
mixed can_climb_out_of_obj() {
","/secure/lib/net/socket.c":"static void create(int fd, object owner) {
int eventRead(mixed data) {
varargs static int eventWrite(mixed data, int close) {
int eventSocketClosed() {
static int eventCloseSocket() {
int GetDescriptor() {
string GetAddress() {
","/secure/sefun/convert_name.c":"string convert_name(string str) {
","/secure/sefun/dummy.c":"","/spells/missile.c":"static void create() {
","/lib/props/uniqueness.c":"int array SetRarity(int count, int days) {
int SetUnique(int x) {
int GetUnique() {
int array GetRarity() {
","/secure/sefun/flat_map.c":"string flat_map(mapping mp) {
","/verbs/players/party.c":"static void create() {
string GetHelp(string str) {
int livings_are_remote() { return 1; }
mixed can_party_wrd_wrd(string cmd, string party) {
mixed can_party_wrd_liv(string cmd) {
mixed do_party_wrd(string cmd) {
mixed do_party_wrd_wrd(string cmd, string party) {
mixed do_party_wrd_liv(string cmd, object targ) {
","/secure/sefun/query_time_of_day.c":"string query_time_of_day() { return SEASONS_D->GetTimeOfDay(); }
","/lib/donate.c":"static void create() {
static void init() {
string GetLong(string str) {
int eventDonate(string amt, string type) {
string SetLocalCurrency(string currency) {
string GetOwner() {return Owner;}
string SetOwner(string owner) {return (Owner = owner);}
int GetAssets() {return TotalAssets;}
int AddAssets(int amount) {
string GetLocalCurrency() {return LocalCurrency;}
","/lib/props/radiance.c":"int SetRadiantLight(int x) {
int GetRadiantLight(int ambient) {
","/secure/sefun/identify.c":"string identify( mixed a )
","/verbs/players/lie.c":"static void create() {
mixed can_lie_word_obj() {
mixed can_lie_down_word_obj() {
mixed do_lie_down() {
mixed do_lie_down_word_obj(string word, object target) {
mixed do_lie_word_obj(string word, object target) {
","/lib/std/daemon.c":"int eventDestruct() {
static void create() {
string GetSaveFile() {
static string SetSaveFile(string str) {
varargs int eventRestore(int do_not_zero_out) {
varargs int eventSave(int save_zero_values) {
","/secure/sefun/duplicates.c":"object array get_dupes(object ob, object where){
int query_dupes(object ob1,object ob2){
","/verbs/items/empty.c":"static void create() {
mixed can_empty_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_empty_obj(object from) {
","/verbs/items/open.c":"static void create() {
mixed can_open_obj(string verb, string id) {
mixed can_open_obj_with_obj(string verb, string id1, string id2) {
varargs mixed do_open_obj(object ob, mixed array args...) {
varargs mixed do_open_obj_with_obj(object ob, object with, mixed array args...) {
","/secure/sefun/reaper.c":"varargs void reap_other(string str){
mixed reap_list(){
","/lib/virtual/virt_sky.c":"mixed eventReceiveObject(object ob) {
varargs static void create(int x, int y,int z) {
mixed CanGo(object who, string dir) {
mixed eventGo(object who, string dir) {
mixed CanFly(object who, string dir) {
mixed eventFly(object who, string dir) {
varargs static void Setup(int x, int y,int z) {
string GetGround() {
mixed SetPreventLand(mixed val) {
string SetGround(string str) {
mixed GetPreventLand() {
","/verbs/common/whisper.c":"static void create() {
mixed can_whisper_to_liv(object target) {
mixed do_whisper_in_wrd_to_liv(string str, object ob) { return 1; }
mixed can_whisper_in_wrd_to_liv_str(string lang, object targ, string str) {
mixed can_whisper_to_liv_str(object targ, string str) {
mixed do_whisper_to_liv(object ob) { return 1; }
mixed do_whisper_in_wrd_to_liv_str(string lang, object targ, string str) {
mixed do_whisper_to_liv_in_wrd_str(object targ, string lang, string str) {
mixed can_whisper_to_liv_in_wrd_str(object targ, string lang, string str) {
mixed do_whisper_to_liv_str(object targ, string str) {
","/lib/interface.c":"static void create() {
int Setup() {
int GetClient() { return Client; }
static string process_input(string str) {
varargs int eventPrint(string msg, mixed arg2, mixed arg3) {
string GetKeyName() { return 0; }
void receive_message(string msg_class, string msg) {
int GetBlocked(string type) { return (Blocked[\"all\"] || Blocked[type]); }
int array GetScreen() { return Screen; }
static void terminal_type(string str) {
static void window_size(int width, int height) { SetScreen(width, height); }
static void receive_snoop(string str) { receive_message(\"snoop\", \"%\"+str); }
varargs int SetBlocked(string type, int flag) {
int SetClient(int x) {
int SetLogHarass(int x) {
int GetLogHarass() { return LogHarass; }
string SetTerminal(string terminal) {
string GetTerminal() { return Terminal; }
","/lib/used_meal.c":"static void create() {
","/lib/events/lie.c":"int CanGet(object who){
mixed eventReleaseStand(object who) {
object array GetLiers() {
mixed eventReceiveLay(object who) {
static int SetMaxLiers(int x) {
mixed direct_lie_word_obj() {
mixed direct_lie_down_word_obj() {
int GetMaxLiers() {
","/secure/sefun/expand_keys.c":"mapping expand_keys(mapping mp) {
","/verbs/players/lead.c":"static void create() {
mixed can_lead_liv() { return 1; }
mixed do_lead_liv(object ob) {
","/secure/sefun/translate.c":"string translate(string str, int prof) {
","/lib/std/chair.c":"int CanGet(object who){
void create(){
","/verbs/players/ignore.c":"static void create() {
mixed do_ignore_liv(object ob) {
mixed do_ignore_lvs(mixed array targets) {
mixed can_ignore(){ return 1; }
mixed can_ignore_liv() { return 1; }
","/secure/sefun/custom_path.c":"string array query_custom_path(){
string query_custom_command(string str){
","/verbs/creators/createfix.c":"static void create() {
mixed can_createfix_obj(string str) {
mixed can_createfix_word(string str) { return can_createfix_obj(\"foo\"); }
mixed do_createfix_obj(object ob) {
mixed do_createfix_word(string wrd) {
","/verbs/common/codesay.c":"static void create() {
string GetHelp(string str) {
mixed can_codesay_str(string str) {
varargs mixed do_codesay_str(string str) {
","/lib/fishing.c":"int CanRelease(object who){
static void create() {
void heart_beat() {
mixed eventCast(object who, object pole, string str) {
mixed CanCast(object who, string where) {
mixed CanStop(object who, string str) {
mixed eventStop(object who, string str) {
static void eventCatch(object who, string fish, object pole) {
int SetChance(int x) { return (Chance = x); }
int GetChance() { return Chance; }
mapping RemoveFish(string fish) {
mapping GetFish() { return Fish; }
mapping SetFishing(object who, object pole) {
int SetMaxFishing(int x) { return (MaxFishing = x); }
int GetMaxFishing() { return MaxFishing; }
int SetSpeed(int x) { return (Speed = x); }
mapping RemoveFishing(object who) {
int GetSpeed() { return Speed; }
int AddFish(string fish, int x) {
","/lib/money.c":"int AddMoney(string type, int amount) {
varargs void SetMoney(mixed val, int amount) {
mapping GetMoneyMap() { return copy(Money); }
","/secure/lib/net/ftp_data_connection.c":"int eventDestruct() {
static void eventSocketError(string str, int x) {
static void eventReadCallback(int fd, mixed val) {
function SetRead(function f) { return (Read = f); }
varargs static int eventClose(class data_conn sock, int aborted) {
static void eventSocketClose() { }
int SetSocketType(int type) { return (SocketType = type); }
int SetDestructOnClose(int x) { return (DestructOnClose = x); }
int eventCreateSocket(string host, int port) {
static void eventAbortCallback(int fd) {
static void eventWriteCallback(int fd) {
function SetWrite(function f) { return (Write = f); }
function SetClose(function f) { return (Close = f); }
static void eventListenCallback(int fd)
int eventWriteDestruct() {
int SetPassiveMode(int x) { return (PassiveMode = x); }
","/verbs/players/request.c":"static void create() {
mixed do_request_str_from_liv(string str, object who) {
mixed can_request_str_from_liv() {
","/verbs/players/follow.c":"static void create() {
mixed can_follow() { return 1; }
mixed do_follow() {
mixed do_follow_liv(object ob) {
mixed can_follow_liv() { return 1; }
","/lib/messages.c":"static void create() {
string GetName() { return 0; }
varargs string GetMessage(string msg, mixed arg) {
string SetMessage(string msg, string str) {
mapping GetMessages() { return copy(Messages); }
","/lib/history.c":"nomask private static string Push(string cmd) {
private string GetHistory(mixed val) {
static void create() {
int GetCommandNumber() {
string array GetHistoryList() {
int SetHistorySize(int x) {
static string eventHistory(string str) {
","/verbs/items/unwield.c":"static void create() {
mixed can_unwield_obj(string verb) {
mixed do_unwield_obj(object ob) {
mixed do_unwield_obs(mixed array targs) {
","/verbs/players/evade.c":"static void create() {
mixed do_evade_liv(object ob) {
mixed can_evade_liv() { return 1; }
","/lib/std/corpse.c":"int CanReceive(object ob) { return 1; }
static void create() {
string GetItemCondition() { return \"\";}
static int Destruct() {
string GetSaveString() { return 0; }
void SetCorpse(object who) {
string GetHealthShort() {
int isFreshCorpse() {
string GetRace() { return Race; }
int eventDecay() {
string GetOwner() { return Owner; }
int direct_animate_obj() {
int direct_offer_obj() {
int SetDecayLife(int x) { return (DecayLife = x); }
int GetDecayLife() { return DecayLife; }
","/secure/sefun/reload.c":"varargs mixed reload(mixed ob, int recursive) {
","/lib/events/jump.c":"mixed eventJump(object who, string id, int type) {
varargs mixed direct_jump_word_word_obj(mixed args...) {
mapping GetJumps() {
varargs mixed AddJump(string name, mixed saute, int type){
mixed CanJump(object who, string id, int type) {
mixed direct_jump_word_obj(string prep, object target, string id) {
","/lib/burn.c":"static void create() {
mixed eventLight(object who, object what) {
mixed direct_light_obj() {
static void heart_beat() {
mixed indirect_burn_obj_with_obj(object target, object source) {
mixed eventExtinguish(){
mixed direct_extinguish_obj(){
int GetBurntValue() {
mixed indirect_light_obs_with_obj(object array targets, object source) {
int GetBurning();
int GetBurnRate() {
static int SetBurnRate(int x) {
static int SetBurntValue(int x) {
int GetFuelRequired() {
static int SetFuelRequired(int x) {
int GetHeat() {
static int SetHeat(int x) {
int GetMinHeat() {
static int SetMinHeat(int x) {
mixed CanBurn(object who) {
mixed CanExtinguish(object who) {
mixed direct_light_obj_with_obj() {
mixed indirect_burn_obs_with_obj(object array targets, object source) {
mixed indirect_light_obj_with_obj(object target, object source) {
mixed eventBurnOut() {
","/verbs/items/bait.c":"static void create() {
mixed can_bait_obj_with_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_bait_obj_with_obj(object pole, object bait) {
","/lib/poison.c":"static void create() {
mixed eventSpreadPoison(object who, object target) {
int GetPoisonUses() { return PoisonUses; }
int SetPoisonStrength(int x) { return (PoisonStrength = x); }
mixed GetPoisonStrength() { return PoisonStrength; }
mixed indirect_poison_obj_with_obj() {
int SetPoisonUses(int x) { return (PoisonUses = x); }
","/lib/classes.c":"static void create() {
int AddSkillPoints(string skill, int x) {
string GetClan() { return Clan; }
int SetMorality(int x) { return (Morality = x); }
string array SetReligion(string adj, string noun) {
varargs string GetReligion(int flag) { return Religion[flag]; }
string ChangeClass(string class_name)  {
int ClassMember(string class_name) {
string GetMoralityDescription() {
int eventMoralAct(int degree) {
string SetClass(string class_name) {
int GetBaseStatLevel(string stat) { return 0; }
static string SetSkillModifier(string skill, string stat) {
string GetSkillModifier(string skill) { return SkillModifiers[skill]; }
string SetClan(string clan) { return (Clan = clan); }
string GetClass() { return Class; }
","/lib/events/consult.c":"varargs mixed eventConsult(object who, string component) {
string array GetConsults() {
varargs mapping SetConsult(mixed key, mixed desc) {
mixed direct_consult_str_on_obj(string str, object target) {
mixed direct_consult_obj(object target) {
varargs mixed CanConsult(object who, string component) {
mapping RemoveConsult(string item) {
","/secure/sefun/get_verbs.c":"string array get_verbs(){
","/secure/sefun/query_carrying.c":"int query_carrying(object who, mixed thing){
","/lib/comp/container.c":"int GetOpacity(){
int SetOpacity(int x){
int GetRadiantLight(int ambient) {
int CanReceive(object ob) {
int CanRelease(object ob) {
int eventReceiveObject(object ob) {
int eventReleaseObject(object ob) {
","/verbs/items/pour.c":"static void create() {
mixed can_pour_from_obj_into_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_into_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_in_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_on_obj(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_obj_out(string verb) { return this_player()->CanManipulate(); }
mixed can_pour_out_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_pour_obj_out(object from) {
mixed can_pour_obj_onto_obj(string verb) { return this_player()->CanManipulate(); }
mixed do_pour_obj_onto_obj(object from, object to) {
mixed do_pour_obj_on_obj(object from, object to) {
mixed do_pour_obj_in_obj(object from, object to) {
mixed do_pour_out_obj(object from) {
mixed do_pour_from_obj_into_obj(object from, object to) {
mixed do_pour_obj_into_obj(object from, object to) {
mixed do_pour_from_obj_in_obj(object from, object to) {
","/secure/sefun/rooms.c":"int query_night_light(object ob){
int query_day_light(object ob){
int query_ambient_light(object ob){
int reload_room(object ob) {
string opposite_dir(string str){
","/lib/bboard.c":"void create() {
string GetExternalDesc() {
void init() {
int cmd_remove(string str) {
void continue_post(string subj, string file) {
static private int valid_edit(string author) {
int cmd_post(string str) {
static void begin_post(string cmd, string subj, string file, function f) {
void end_post(string subj, string mail) {
int cmd_read(string str) {
int cmd_followup_and_respond(string str) {
void continue_followup(mapping post, string subj, string file) {
void continue_mail(mapping post, string subj, string file) {
static void check_include_text(string ans, string subj, string file, mapping
int cmd_edit(string str) {
void end_edit(string subj, int num) {
void set_board_id(string str) { __BoardID = str; }
string query_board_id() { return __BoardID; }
string query_board_time(int x) {
","/lib/std/germ.c":"static void create() {
void init(){
static void heart_beat() {
mixed eventEncounter(object who) {
mixed eventCure(object who, int x, string type) {
string GetType() {
mixed eventInfect(object ob) {
int isGerm() {
mixed GetCure() {
mixed SetCure(mixed val) {
void eventSuffer(object ob) {
mixed eventMultiply();
int GetCommunicable() {
int GetCannotInfect(){
int SetCannotInfect(int i){
int SetGermName(string str){
string GetGermName(){
array  int SetCommunicable(int x);
function GetInfect() {
function SetInfect(function f) {
int GetLifeSpan() {
int SetLifeSpan(int x) {
string SetType(string type) {
","/lib/props/properties.c":"mixed GetProperty(string prop) {
mixed AddProperty(string prop, mixed val) {
mapping GetProperties() {
int RemoveProperty(string prop) {
mapping SetProperties(mapping props) {
mixed SetProperty(string prop, mixed val) {
","/lib/events/smoke.c":"int eventTurnOn(object ob){
int eventTurnOff(object ob){
int direct_turn_obj(object target) {
mixed CanTurn(object who) {
mixed CanTurnOn(object who) {
mixed CanTurnOff(object who) {
int direct_turn_on_obj(object target){
int direct_turn_off_obj(object target){
","/secure/sefun/query_names.c":"string array query_names(object whom) {
int answers_to(string name, object what){
","/verbs/items/use.c":"static void create() {
mixed can_use_obj_to_str(string str) { return 1; }
mixed do_use_obj_to_str(object ob, string str) {
","/lib/props/id.c":"string array parse_command_adjectiv_id_list() {
string SetKeyName(string nom) {
string GetKeyName();
string array parse_command_id_list() {
string array parse_command_plural_id_list() {
string GetName() {
varargs string array SetAdjectives(mixed adjs...) {
string SetCapName(string str) {
varargs string array SetId(mixed val...) {
string array GetId() {
string array GetAdjectives() {
string GetCapName() {
","/lib/enter.c":"varargs mixed direct_lock_obj_with_obj(object target, object tool) {
string GetEnter() {
mixed direct_open_obj_with_obj(object target, object ob) {
static void create() {
void SetDoor(string door) {
string ResolveObjectName(string file) {
mixed direct_pick_str_on_obj_with_obj(string str, object ob, object w,
mixed direct_unlock_obj_with_obj(object target, object w) {
varargs mixed eventLock(object who, mixed arg1, mixed arg2) {
varargs mixed eventPick(object who, string str, object tool) {
mixed eventUnlock(object who, object key) {
varargs mixed eventOpen(object who, object tool) {
mixed direct_close_obj(object target) {
mixed eventClose(object who) {
string GetDoor() {
varargs void SetEnter(string dest, function pre, function post) {
varargs mixed eventEnter(object who, string what, string verb) {
mixed direct_enter_into_obj() {
mixed direct_enter_obj() {
","/lib/pager.c":"string GetHelp(string str) {
varargs mixed eventPage(mixed val, mixed msg_class, function f,mixed args...) {
static void cmdPage(string str, class page_file file) {
varargs static private void RazzleDazzle(mixed args...) {
static private string GetPagerPrompt(class page_file file) {
mixed more(mixed val, string cl, function f, mixed args) {
","/secure/sefun/timestamp.c":"string timestamp(){
","/secure/sefun/domains.c":"string domain(mixed val) {
int domain_exists(string dmn) {
object domain_master(mixed val) {
","/verbs/players/befriend.c":"static void create() {
mixed do_befriend_liv(object ob) {
mixed can_befriend_liv() { return 1; }
","/verbs/rooms/jump.c":"static void create() {
mixed can_jump_word_word_obj() {
varargs mixed do_jump_in_obj(object ob, mixed array args...) {
varargs mixed do_jump_off_of(object ob, mixed array args...) {
mixed can_jump_word_obj() {
varargs mixed do_jump_into_obj(object ob, mixed array args...) {
varargs mixed do_jump_off_obj(object ob, mixed array args...) {
varargs mixed do_jump_from_obj(object ob, mixed array args...) {
varargs mixed do_jump_through_obj(object ob, mixed array args...) {
varargs mixed do_jump_across_obj(object ob, mixed array args...) {
varargs mixed do_jump_over_obj(object ob, mixed array args...) {
varargs mixed do_jump_onto_obj(object ob, mixed array args...) {
varargs mixed do_jump_on_obj(object ob, mixed array args...) {
",])
